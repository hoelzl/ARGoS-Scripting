#include "lua_controller.h"
#include "lua.hpp"
#include "lauxlib.h"
#include "lualib.h"

#include <iostream>
#include <uuid/uuid.h>

#include <argos2/common/utility/logging/argos_log.h>

using namespace std;

// The entry point generated by SWIG.
extern "C" {
  extern int luaopen_argos(lua_State *L);
}

// Some utility functions for the controllers.

static int lua_uuid(lua_State *L) {
  uuid_t uuid;
  uuid_string_t result;
  uuid_generate_random(uuid);
  uuid_unparse(uuid, result);
  lua_pushstring(L, result);
  return 1;
}

static int lua_log(lua_State *L) {
  luaL_checkstring(L, 1);
  LOG << lua_tostring(L, 1) << endl;
  return 0;
}

static int lua_log_error(lua_State *L) {
  luaL_checkstring(L, 1);
  LOGERR << lua_tostring(L, 1) << endl;
  return 0;
}

static const struct luaL_Reg argos_utils[] = {
  {"uuid", lua_uuid},
  {"log_internal", lua_log},
  {"log_error_internal", lua_log_error},
  {NULL, NULL}
};

int luaopen_argos_utils(lua_State *L) {
  luaL_register(L, "argos_utils", argos_utils);
  return 1;
}

// Code for the controller proper.

LuaController::LuaController() {
  // Nothing to see here.
}

void LuaController::InitializeLuaInterpreter(string LuaSource) {
  LuaState = luaL_newstate();
  luaL_openlibs(LuaState);
  luaopen_argos(LuaState);
  luaopen_argos_utils(LuaState);
  if (luaL_loadfile(LuaState, LuaSource.c_str())) {
    cerr << "Error while loading Lua controller source:"
	 << endl
	 << lua_tostring(LuaState, -1)
	 << endl;
    // dumpLuaStack(LuaState);
  }
  else if (lua_pcall(LuaState, 0, 0, 0)) {
    cerr << "Error while initializing Lua controller:"
	 << endl
	 << lua_tostring(LuaState, -1)
	 << endl;
    // dumpLuaStack(LuaState);
  }
}

void LuaController::Init(TConfigurationNode& configurationNode) {
  GetNodeAttribute(configurationNode, "lua_source", LuaSource);
  InitializeLuaInterpreter(LuaSource);
  CallLuaInitFunction(&configurationNode, this);
}

void LuaController::ControlStep() {
  CallLuaFunction("control_step");
}

void LuaController::Reset() {
  CallLuaFunction("reset");
}

void LuaController::Destroy() {
  CallLuaFunction("destroy");
}

/*
 * This statement notifies ARGoS of the existence of the controller.
 * It binds the class passed as first argument to the string passed as
 * second argument.  The string is then usable in the XML
 * configuration file to refer to this controller.  When ARGoS reads
 * that string in the XML file, it knows which controller class to
 * instantiate.  See also the XML configuration files for an example
 * of how this is used.
 */
REGISTER_CONTROLLER(LuaController, "lua_controller")
