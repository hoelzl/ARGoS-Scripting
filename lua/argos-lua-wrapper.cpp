/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FILE swig_types[0]
#define SWIGTYPE_p_TLastReceivedPackets swig_types[1]
#define SWIGTYPE_p_TLedSettings swig_types[2]
#define SWIGTYPE_p_TRangeAndBearingData swig_types[3]
#define SWIGTYPE_p_TRawValues swig_types[4]
#define SWIGTYPE_p_TReadings swig_types[5]
#define SWIGTYPE_p_TiCppRC swig_types[6]
#define SWIGTYPE_p_TiCppRCImp swig_types[7]
#define SWIGTYPE_p_TiXmlAttribute swig_types[8]
#define SWIGTYPE_p_TiXmlAttributeSet swig_types[9]
#define SWIGTYPE_p_TiXmlBase swig_types[10]
#define SWIGTYPE_p_TiXmlComment swig_types[11]
#define SWIGTYPE_p_TiXmlCursor swig_types[12]
#define SWIGTYPE_p_TiXmlDeclaration swig_types[13]
#define SWIGTYPE_p_TiXmlDocument swig_types[14]
#define SWIGTYPE_p_TiXmlElement swig_types[15]
#define SWIGTYPE_p_TiXmlHandle swig_types[16]
#define SWIGTYPE_p_TiXmlNode swig_types[17]
#define SWIGTYPE_p_TiXmlParsingData swig_types[18]
#define SWIGTYPE_p_TiXmlPrinter swig_types[19]
#define SWIGTYPE_p_TiXmlStylesheetReference swig_types[20]
#define SWIGTYPE_p_TiXmlText swig_types[21]
#define SWIGTYPE_p_TiXmlUnknown swig_types[22]
#define SWIGTYPE_p_TiXmlVisitor swig_types[23]
#define SWIGTYPE_p_argos__CARGoSException swig_types[24]
#define SWIGTYPE_p_argos__CARGoSRandom swig_types[25]
#define SWIGTYPE_p_argos__CBaseConfigurableResource swig_types[26]
#define SWIGTYPE_p_argos__CByteArray swig_types[27]
#define SWIGTYPE_p_argos__CCI_Actuator swig_types[28]
#define SWIGTYPE_p_argos__CCI_Controller swig_types[29]
#define SWIGTYPE_p_argos__CCI_FootBotLedsActuator swig_types[30]
#define SWIGTYPE_p_argos__CCI_FootBotLightSensor swig_types[31]
#define SWIGTYPE_p_argos__CCI_FootBotMotorGroundSensor swig_types[32]
#define SWIGTYPE_p_argos__CCI_FootBotProximitySensor swig_types[33]
#define SWIGTYPE_p_argos__CCI_FootBotWheelsActuator swig_types[34]
#define SWIGTYPE_p_argos__CCI_RangeAndBearingActuator swig_types[35]
#define SWIGTYPE_p_argos__CCI_RangeAndBearingSensor swig_types[36]
#define SWIGTYPE_p_argos__CCI_Robot swig_types[37]
#define SWIGTYPE_p_argos__CCI_Sensor swig_types[38]
#define SWIGTYPE_p_argos__CCategory swig_types[39]
#define SWIGTYPE_p_argos__CColor swig_types[40]
#define SWIGTYPE_p_argos__CDegrees swig_types[41]
#define SWIGTYPE_p_argos__CMemento swig_types[42]
#define SWIGTYPE_p_argos__CQuaternion swig_types[43]
#define SWIGTYPE_p_argos__CRNG swig_types[44]
#define SWIGTYPE_p_argos__CRadians swig_types[45]
#define SWIGTYPE_p_argos__CRangeT_argos__CRadians_t swig_types[46]
#define SWIGTYPE_p_argos__CRangeT_float_t swig_types[47]
#define SWIGTYPE_p_argos__CRangeT_int_t swig_types[48]
#define SWIGTYPE_p_argos__CRangeT_unsigned_int_t swig_types[49]
#define SWIGTYPE_p_argos__CVector2 swig_types[50]
#define SWIGTYPE_p_argos__CVector3 swig_types[51]
#define SWIGTYPE_p_argos__LightSensorReading swig_types[52]
#define SWIGTYPE_p_argos__MotorGroundSensorReading swig_types[53]
#define SWIGTYPE_p_argos__ProximitySensorReading swig_types[54]
#define SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket swig_types[55]
#define SWIGTYPE_p_bool swig_types[56]
#define SWIGTYPE_p_double swig_types[57]
#define SWIGTYPE_p_f___p_argos__CCI_Controller swig_types[58]
#define SWIGTYPE_p_f_p_void__double swig_types[59]
#define SWIGTYPE_p_f_p_void__unsigned_long swig_types[60]
#define SWIGTYPE_p_f_p_void_unsigned_long__void swig_types[61]
#define SWIGTYPE_p_float swig_types[62]
#define SWIGTYPE_p_gsl_rng swig_types[63]
#define SWIGTYPE_p_gsl_rng_type swig_types[64]
#define SWIGTYPE_p_int swig_types[65]
#define SWIGTYPE_p_long_long swig_types[66]
#define SWIGTYPE_p_p_gsl_rng_type swig_types[67]
#define SWIGTYPE_p_p_ticpp__Attribute swig_types[68]
#define SWIGTYPE_p_short swig_types[69]
#define SWIGTYPE_p_signed_char swig_types[70]
#define SWIGTYPE_p_std__exception swig_types[71]
#define SWIGTYPE_p_std__mapT_std__string_argos__CCI_Actuator_p_std__lessT_std__string_t_t swig_types[72]
#define SWIGTYPE_p_std__mapT_std__string_argos__CCI_Controller_pfpFfF_std__lessT_std__string_t_t swig_types[73]
#define SWIGTYPE_p_std__mapT_std__string_argos__CCI_Sensor_p_std__lessT_std__string_t_t swig_types[74]
#define SWIGTYPE_p_std__mapT_std__string_argos__TRangeAndBearingReceivedPacket_t swig_types[75]
#define SWIGTYPE_p_std__string swig_types[76]
#define SWIGTYPE_p_std__vectorT_SReading_t swig_types[77]
#define SWIGTYPE_p_std__vectorT_argos__CColor_t swig_types[78]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[79]
#define SWIGTYPE_p_std__vectorT_ticpp__Base_p_t swig_types[80]
#define SWIGTYPE_p_ticpp__Attribute swig_types[81]
#define SWIGTYPE_p_ticpp__Base swig_types[82]
#define SWIGTYPE_p_ticpp__Comment swig_types[83]
#define SWIGTYPE_p_ticpp__Declaration swig_types[84]
#define SWIGTYPE_p_ticpp__Document swig_types[85]
#define SWIGTYPE_p_ticpp__Element swig_types[86]
#define SWIGTYPE_p_ticpp__Exception swig_types[87]
#define SWIGTYPE_p_ticpp__IteratorT_ticpp__Element_t swig_types[88]
#define SWIGTYPE_p_ticpp__Node swig_types[89]
#define SWIGTYPE_p_ticpp__NodeImpT_TiXmlComment_t swig_types[90]
#define SWIGTYPE_p_ticpp__NodeImpT_TiXmlDeclaration_t swig_types[91]
#define SWIGTYPE_p_ticpp__NodeImpT_TiXmlDocument_t swig_types[92]
#define SWIGTYPE_p_ticpp__NodeImpT_TiXmlElement_t swig_types[93]
#define SWIGTYPE_p_ticpp__NodeImpT_TiXmlStylesheetReference_t swig_types[94]
#define SWIGTYPE_p_ticpp__NodeImpT_TiXmlText_t swig_types[95]
#define SWIGTYPE_p_ticpp__StylesheetReference swig_types[96]
#define SWIGTYPE_p_ticpp__Text swig_types[97]
#define SWIGTYPE_p_ticpp__Visitor swig_types[98]
#define SWIGTYPE_p_unsigned_char swig_types[99]
#define SWIGTYPE_p_unsigned_int swig_types[100]
#define SWIGTYPE_p_unsigned_long_long swig_types[101]
#define SWIGTYPE_p_unsigned_short swig_types[102]
#define SWIGTYPE_p_void swig_types[103]
static swig_type_info *swig_types[105];
static swig_module_info swig_module = {swig_types, 104, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "argos"
#define SWIG_init      luaopen_argos
#define SWIG_init_user luaopen_argos_user

#define SWIG_LUACODE   luaopen_argos_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <gsl/gsl_rng.h>
#include <argos2/common/utility/datatypes/datatypes.h>
#include <argos2/common/utility/datatypes/color.h>

#include <argos2/common/utility/math/general.h>
#include <argos2/common/utility/math/range.h>
#include <argos2/common/utility/math/angles.h>
#include <argos2/common/utility/math/vector2.h>
#include <argos2/common/utility/math/vector3.h>

#include <argos2/common/utility/argos_random.h>

#include <argos2/common/utility/tinyxml-cpp/ticpp.h>
#include <argos2/common/utility/configuration/argos_configuration.h>

#include <argos2/common/control_interface/ci_controller.h>
#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_wheels_actuator.h>
#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_leds_actuator.h>
#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_proximity_sensor.h>

#include <argos2/common/control_interface/swarmanoid/ci_range_and_bearing_actuator.h>
#include <argos2/common/control_interface/swarmanoid/ci_range_and_bearing_sensor.h>
#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_proximity_sensor.h>
#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_light_sensor.h>
#include <argos2/common/control_interface/swarmanoid/footbot/ci_footbot_motor_ground_sensor.h>


	#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


  typedef signed char SInt8; 
  typedef unsigned char UInt8;

extern "C" void argos::Tokenize(std::string const &,std::vector< std::string > &,std::string const &);
extern "C" std::string argos::StringToUpperCase(std::string const &);
extern "C" std::string argos::StringToLowerCase(std::string const &);
extern "C" std::string argos::ExpandARGoSInstallDir(std::string const &);
extern "C" void argos::Replace(std::string &,std::string const &,std::string const &);
extern "C" bool argos::MatchPattern(std::string const &,std::string const);

  namespace argos {
    typedef argos::CARGoSRandom::CRNG CRNG;
  }


  namespace argos {
    typedef argos::CARGoSRandom::CCategory CCategory;
  }

SWIGINTERN argos::CCI_FootBotWheelsActuator *argos_CCI_Actuator_AsFootBotWheelsActuator(argos::CCI_Actuator *self){
      return dynamic_cast<argos::CCI_FootBotWheelsActuator *>(self);
  }
SWIGINTERN argos::CCI_FootBotLedsActuator *argos_CCI_Actuator_AsFootBotLedsActuator(argos::CCI_Actuator *self){
      return dynamic_cast<argos::CCI_FootBotLedsActuator *>(self);
  }
SWIGINTERN argos::CCI_RangeAndBearingActuator *argos_CCI_Actuator_AsRangeAndBearingActuator(argos::CCI_Actuator *self){
      return dynamic_cast<argos::CCI_RangeAndBearingActuator *>(self);
  }
SWIGINTERN argos::CCI_FootBotProximitySensor *argos_CCI_Sensor_AsFootBotProximitySensor(argos::CCI_Sensor *self){
      return dynamic_cast<argos::CCI_FootBotProximitySensor *>(self);
  }
SWIGINTERN argos::CCI_RangeAndBearingSensor *argos_CCI_Sensor_AsRangeAndBearingSensor(argos::CCI_Sensor *self){
      return dynamic_cast<argos::CCI_RangeAndBearingSensor *>(self);
  }
SWIGINTERN argos::CCI_FootBotLightSensor *argos_CCI_Sensor_AsFootBotLightSensor(argos::CCI_Sensor *self){
      return dynamic_cast<argos::CCI_FootBotLightSensor *>(self);
  }
SWIGINTERN argos::CCI_FootBotMotorGroundSensor *argos_CCI_Sensor_AsFootBotMotorGroundSensor(argos::CCI_Sensor *self){
      return dynamic_cast<argos::CCI_FootBotMotorGroundSensor *>(self);
  }
extern std::map< std::string,CCI_Controller_Maker *,std::less< std::string > > mapControllerFactory;

  namespace argos {
    typedef argos::CCI_FootBotProximitySensor::SReading ProximitySensorReading;
  }


  namespace argos {
    typedef argos::UInt8 TRangeAndBearingData[10];
    typedef argos::UInt16 TRawValues[12];
  }


  namespace argos {
    typedef argos::CCI_FootBotLightSensor::SReading LightSensorReading;
  }


  namespace argos {
    typedef argos::CCI_FootBotMotorGroundSensor::SReading MotorGroundSensorReading;
  }

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_ByteArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CByteArray *result = 0 ;
  
  SWIG_check_num_args("argos::CByteArray::CByteArray",0,0)
  result = (argos::CByteArray *)new argos::CByteArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CByteArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ByteArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CByteArray *arg1 = 0 ;
  argos::CByteArray *result = 0 ;
  
  SWIG_check_num_args("argos::CByteArray::CByteArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::CByteArray::CByteArray",1,"argos::CByteArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("new_ByteArray",1,SWIGTYPE_p_argos__CByteArray);
  }
  
  result = (argos::CByteArray *)new argos::CByteArray((argos::CByteArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CByteArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ByteArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt8 *arg1 = (argos::UInt8 *) 0 ;
  size_t arg2 ;
  argos::CByteArray *result = 0 ;
  
  SWIG_check_num_args("argos::CByteArray::CByteArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CByteArray::CByteArray",1,"argos::UInt8 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CByteArray::CByteArray",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("new_ByteArray",1,SWIGTYPE_p_unsigned_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (argos::CByteArray *)new argos::CByteArray((argos::UInt8 const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CByteArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ByteArray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ByteArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CByteArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ByteArray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ByteArray__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ByteArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CByteArray::CByteArray()\n"
    "    argos::CByteArray::CByteArray(argos::CByteArray const &)\n"
    "    argos::CByteArray::CByteArray(argos::UInt8 const *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ByteArray_size(lua_State* L) {
  int SWIG_arg = 0;
  argos::CByteArray *arg1 = (argos::CByteArray *) 0 ;
  size_t result;
  
  SWIG_check_num_args("argos::CByteArray::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CByteArray::Size",1,"argos::CByteArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("ByteArray_size",1,SWIGTYPE_p_argos__CByteArray);
  }
  
  result = ((argos::CByteArray const *)arg1)->Size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ByteArray_empty(lua_State* L) {
  int SWIG_arg = 0;
  argos::CByteArray *arg1 = (argos::CByteArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CByteArray::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CByteArray::Empty",1,"argos::CByteArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("ByteArray_empty",1,SWIGTYPE_p_argos__CByteArray);
  }
  
  result = (bool)((argos::CByteArray const *)arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ByteArray_add_buffer(lua_State* L) {
  int SWIG_arg = 0;
  argos::CByteArray *arg1 = (argos::CByteArray *) 0 ;
  argos::UInt8 *arg2 = (argos::UInt8 *) 0 ;
  size_t arg3 ;
  argos::CByteArray *result = 0 ;
  
  SWIG_check_num_args("argos::CByteArray::AddBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CByteArray::AddBuffer",1,"argos::CByteArray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("argos::CByteArray::AddBuffer",2,"argos::UInt8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CByteArray::AddBuffer",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("ByteArray_add_buffer",1,SWIGTYPE_p_argos__CByteArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ByteArray_add_buffer",2,SWIGTYPE_p_unsigned_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (argos::CByteArray *) &(arg1)->AddBuffer((argos::UInt8 const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CByteArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ByteArray_fetch_buffer(lua_State* L) {
  int SWIG_arg = 0;
  argos::CByteArray *arg1 = (argos::CByteArray *) 0 ;
  argos::UInt8 *arg2 = (argos::UInt8 *) 0 ;
  size_t arg3 ;
  argos::CByteArray *result = 0 ;
  
  SWIG_check_num_args("argos::CByteArray::FetchBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CByteArray::FetchBuffer",1,"argos::CByteArray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("argos::CByteArray::FetchBuffer",2,"argos::UInt8 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CByteArray::FetchBuffer",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("ByteArray_fetch_buffer",1,SWIGTYPE_p_argos__CByteArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ByteArray_fetch_buffer",2,SWIGTYPE_p_unsigned_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (argos::CByteArray *) &(arg1)->FetchBuffer(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CByteArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ByteArray(void *obj) {
argos::CByteArray *arg1 = (argos::CByteArray *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CByteArray_methods[] = {
    {"size", _wrap_ByteArray_size}, 
    {"empty", _wrap_ByteArray_empty}, 
    {"add_buffer", _wrap_ByteArray_add_buffer}, 
    {"fetch_buffer", _wrap_ByteArray_fetch_buffer}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CByteArray_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CByteArray_bases[] = {0};
static const char *swig_argos_CByteArray_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CByteArray = { "ByteArray", &SWIGTYPE_p_argos__CByteArray,_wrap_new_ByteArray, swig_delete_ByteArray, swig_argos_CByteArray_methods, swig_argos_CByteArray_attributes, swig_argos_CByteArray_bases, swig_argos_CByteArray_base_names };

static int _wrap_new_TiCppRC(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRC *result = 0 ;
  
  SWIG_check_num_args("TiCppRC::TiCppRC",0,0)
  result = (TiCppRC *)new TiCppRC();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiCppRC,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiCppRC_m_spawnedWrappers_set(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRC *arg1 = (TiCppRC *) 0 ;
  std::vector< ticpp::Base * > *arg2 = (std::vector< ticpp::Base * > *) 0 ;
  
  SWIG_check_num_args("TiCppRC::m_spawnedWrappers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiCppRC::m_spawnedWrappers",1,"TiCppRC *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiCppRC::m_spawnedWrappers",2,"std::vector< ticpp::Base * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiCppRC,0))){
    SWIG_fail_ptr("TiCppRC_m_spawnedWrappers_set",1,SWIGTYPE_p_TiCppRC);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ticpp__Base_p_t,0))){
    SWIG_fail_ptr("TiCppRC_m_spawnedWrappers_set",2,SWIGTYPE_p_std__vectorT_ticpp__Base_p_t);
  }
  
  if (arg1) (arg1)->m_spawnedWrappers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiCppRC_m_spawnedWrappers_get(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRC *arg1 = (TiCppRC *) 0 ;
  std::vector< ticpp::Base * > *result = 0 ;
  
  SWIG_check_num_args("TiCppRC::m_spawnedWrappers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiCppRC::m_spawnedWrappers",1,"TiCppRC *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiCppRC,0))){
    SWIG_fail_ptr("TiCppRC_m_spawnedWrappers_get",1,SWIGTYPE_p_TiCppRC);
  }
  
  result = (std::vector< ticpp::Base * > *)& ((arg1)->m_spawnedWrappers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ticpp__Base_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiCppRC_delete_spawned_wrappers(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRC *arg1 = (TiCppRC *) 0 ;
  
  SWIG_check_num_args("TiCppRC::DeleteSpawnedWrappers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiCppRC::DeleteSpawnedWrappers",1,"TiCppRC *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiCppRC,0))){
    SWIG_fail_ptr("TiCppRC_delete_spawned_wrappers",1,SWIGTYPE_p_TiCppRC);
  }
  
  (arg1)->DeleteSpawnedWrappers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiCppRC(void *obj) {
TiCppRC *arg1 = (TiCppRC *) obj;
delete arg1;
}
static swig_lua_method swig_TiCppRC_methods[] = {
    {"delete_spawned_wrappers", _wrap_TiCppRC_delete_spawned_wrappers}, 
    {0,0}
};
static swig_lua_attribute swig_TiCppRC_attributes[] = {
    { "m_spawnedWrappers", _wrap_TiCppRC_m_spawnedWrappers_get, _wrap_TiCppRC_m_spawnedWrappers_set},
    {0,0,0}
};
static swig_lua_class *swig_TiCppRC_bases[] = {0};
static const char *swig_TiCppRC_base_names[] = {0};
static swig_lua_class _wrap_class_TiCppRC = { "TiCppRC", &SWIGTYPE_p_TiCppRC,_wrap_new_TiCppRC, swig_delete_TiCppRC, swig_TiCppRC_methods, swig_TiCppRC_attributes, swig_TiCppRC_bases, swig_TiCppRC_base_names };

static int _wrap_new_TiCppRCImp(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRC *arg1 = (TiCppRC *) 0 ;
  TiCppRCImp *result = 0 ;
  
  SWIG_check_num_args("TiCppRCImp::TiCppRCImp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiCppRCImp::TiCppRCImp",1,"TiCppRC *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiCppRC,0))){
    SWIG_fail_ptr("new_TiCppRCImp",1,SWIGTYPE_p_TiCppRC);
  }
  
  result = (TiCppRCImp *)new TiCppRCImp(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiCppRCImp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiCppRCImp_nullify(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRCImp *arg1 = (TiCppRCImp *) 0 ;
  
  SWIG_check_num_args("TiCppRCImp::Nullify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiCppRCImp::Nullify",1,"TiCppRCImp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiCppRCImp,0))){
    SWIG_fail_ptr("TiCppRCImp_nullify",1,SWIGTYPE_p_TiCppRCImp);
  }
  
  (arg1)->Nullify();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiCppRCImp_inc_ref(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRCImp *arg1 = (TiCppRCImp *) 0 ;
  
  SWIG_check_num_args("TiCppRCImp::IncRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiCppRCImp::IncRef",1,"TiCppRCImp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiCppRCImp,0))){
    SWIG_fail_ptr("TiCppRCImp_inc_ref",1,SWIGTYPE_p_TiCppRCImp);
  }
  
  (arg1)->IncRef();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiCppRCImp_dec_ref(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRCImp *arg1 = (TiCppRCImp *) 0 ;
  
  SWIG_check_num_args("TiCppRCImp::DecRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiCppRCImp::DecRef",1,"TiCppRCImp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiCppRCImp,0))){
    SWIG_fail_ptr("TiCppRCImp_dec_ref",1,SWIGTYPE_p_TiCppRCImp);
  }
  
  (arg1)->DecRef();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiCppRCImp_init_ref(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRCImp *arg1 = (TiCppRCImp *) 0 ;
  
  SWIG_check_num_args("TiCppRCImp::InitRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiCppRCImp::InitRef",1,"TiCppRCImp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiCppRCImp,0))){
    SWIG_fail_ptr("TiCppRCImp_init_ref",1,SWIGTYPE_p_TiCppRCImp);
  }
  
  (arg1)->InitRef();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiCppRCImp_get(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRCImp *arg1 = (TiCppRCImp *) 0 ;
  TiCppRC *result = 0 ;
  
  SWIG_check_num_args("TiCppRCImp::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiCppRCImp::Get",1,"TiCppRCImp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiCppRCImp,0))){
    SWIG_fail_ptr("TiCppRCImp_get",1,SWIGTYPE_p_TiCppRCImp);
  }
  
  result = (TiCppRC *)(arg1)->Get();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiCppRC,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiCppRCImp_is_null(lua_State* L) {
  int SWIG_arg = 0;
  TiCppRCImp *arg1 = (TiCppRCImp *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiCppRCImp::IsNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiCppRCImp::IsNull",1,"TiCppRCImp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiCppRCImp,0))){
    SWIG_fail_ptr("TiCppRCImp_is_null",1,SWIGTYPE_p_TiCppRCImp);
  }
  
  result = (bool)(arg1)->IsNull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiCppRCImp(void *obj) {
TiCppRCImp *arg1 = (TiCppRCImp *) obj;
delete arg1;
}
static swig_lua_method swig_TiCppRCImp_methods[] = {
    {"nullify", _wrap_TiCppRCImp_nullify}, 
    {"inc_ref", _wrap_TiCppRCImp_inc_ref}, 
    {"dec_ref", _wrap_TiCppRCImp_dec_ref}, 
    {"init_ref", _wrap_TiCppRCImp_init_ref}, 
    {"get", _wrap_TiCppRCImp_get}, 
    {"is_null", _wrap_TiCppRCImp_is_null}, 
    {0,0}
};
static swig_lua_attribute swig_TiCppRCImp_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiCppRCImp_bases[] = {0};
static const char *swig_TiCppRCImp_base_names[] = {0};
static swig_lua_class _wrap_class_TiCppRCImp = { "TiCppRCImp", &SWIGTYPE_p_TiCppRCImp,_wrap_new_TiCppRCImp, swig_delete_TiCppRCImp, swig_TiCppRCImp_methods, swig_TiCppRCImp_attributes, swig_TiCppRCImp_bases, swig_TiCppRCImp_base_names };

static int _wrap_TIXML_MAJOR_VERSION_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("TIXML_MAJOR_VERSION",0,0)
  result = (int)(int)TIXML_MAJOR_VERSION;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TIXML_MINOR_VERSION_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("TIXML_MINOR_VERSION",0,0)
  result = (int)(int)TIXML_MINOR_VERSION;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TIXML_PATCH_VERSION_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("TIXML_PATCH_VERSION",0,0)
  result = (int)(int)TIXML_PATCH_VERSION;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlCursor(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlCursor *result = 0 ;
  
  SWIG_check_num_args("TiXmlCursor::TiXmlCursor",0,0)
  result = (TiXmlCursor *)new TiXmlCursor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlCursor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlCursor_clear(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlCursor *arg1 = (TiXmlCursor *) 0 ;
  
  SWIG_check_num_args("TiXmlCursor::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlCursor::Clear",1,"TiXmlCursor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlCursor,0))){
    SWIG_fail_ptr("TiXmlCursor_clear",1,SWIGTYPE_p_TiXmlCursor);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlCursor_row_set(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlCursor *arg1 = (TiXmlCursor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TiXmlCursor::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlCursor::row",1,"TiXmlCursor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TiXmlCursor::row",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlCursor,0))){
    SWIG_fail_ptr("TiXmlCursor_row_set",1,SWIGTYPE_p_TiXmlCursor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->row = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlCursor_row_get(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlCursor *arg1 = (TiXmlCursor *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlCursor::row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlCursor::row",1,"TiXmlCursor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlCursor,0))){
    SWIG_fail_ptr("TiXmlCursor_row_get",1,SWIGTYPE_p_TiXmlCursor);
  }
  
  result = (int) ((arg1)->row);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlCursor_col_set(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlCursor *arg1 = (TiXmlCursor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TiXmlCursor::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlCursor::col",1,"TiXmlCursor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TiXmlCursor::col",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlCursor,0))){
    SWIG_fail_ptr("TiXmlCursor_col_set",1,SWIGTYPE_p_TiXmlCursor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->col = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlCursor_col_get(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlCursor *arg1 = (TiXmlCursor *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlCursor::col",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlCursor::col",1,"TiXmlCursor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlCursor,0))){
    SWIG_fail_ptr("TiXmlCursor_col_get",1,SWIGTYPE_p_TiXmlCursor);
  }
  
  result = (int) ((arg1)->col);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlCursor(void *obj) {
TiXmlCursor *arg1 = (TiXmlCursor *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlCursor_methods[] = {
    {"clear", _wrap_TiXmlCursor_clear}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlCursor_attributes[] = {
    { "row", _wrap_TiXmlCursor_row_get, _wrap_TiXmlCursor_row_set},
    { "col", _wrap_TiXmlCursor_col_get, _wrap_TiXmlCursor_col_set},
    {0,0,0}
};
static swig_lua_class *swig_TiXmlCursor_bases[] = {0};
static const char *swig_TiXmlCursor_base_names[] = {0};
static swig_lua_class _wrap_class_TiXmlCursor = { "TiXmlCursor", &SWIGTYPE_p_TiXmlCursor,_wrap_new_TiXmlCursor, swig_delete_TiXmlCursor, swig_TiXmlCursor_methods, swig_TiXmlCursor_attributes, swig_TiXmlCursor_bases, swig_TiXmlCursor_base_names };

static int _wrap_TiXmlVisitor_visit_enter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlVisitor *arg1 = (TiXmlVisitor *) 0 ;
  TiXmlDocument *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlVisitor::VisitEnter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlVisitor::VisitEnter",1,"TiXmlVisitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlVisitor::VisitEnter",2,"TiXmlDocument const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit_enter",1,SWIGTYPE_p_TiXmlVisitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit_enter",2,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (bool)(arg1)->VisitEnter((TiXmlDocument const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlVisitor_visit_exit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlVisitor *arg1 = (TiXmlVisitor *) 0 ;
  TiXmlDocument *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlVisitor::VisitExit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlVisitor::VisitExit",1,"TiXmlVisitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlVisitor::VisitExit",2,"TiXmlDocument const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit_exit",1,SWIGTYPE_p_TiXmlVisitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit_exit",2,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (bool)(arg1)->VisitExit((TiXmlDocument const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlVisitor_visit_enter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlVisitor *arg1 = (TiXmlVisitor *) 0 ;
  TiXmlElement *arg2 = 0 ;
  TiXmlAttribute *arg3 = (TiXmlAttribute *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlVisitor::VisitEnter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlVisitor::VisitEnter",1,"TiXmlVisitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlVisitor::VisitEnter",2,"TiXmlElement const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlVisitor::VisitEnter",3,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit_enter",1,SWIGTYPE_p_TiXmlVisitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit_enter",2,SWIGTYPE_p_TiXmlElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit_enter",3,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (bool)(arg1)->VisitEnter((TiXmlElement const &)*arg2,(TiXmlAttribute const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlVisitor_visit_enter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlVisitor_visit_enter__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlVisitor_visit_enter__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlVisitor_visit_enter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlVisitor::VisitEnter(TiXmlDocument const &)\n"
    "    TiXmlVisitor::VisitEnter(TiXmlElement const &,TiXmlAttribute const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlVisitor_visit_exit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlVisitor *arg1 = (TiXmlVisitor *) 0 ;
  TiXmlElement *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlVisitor::VisitExit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlVisitor::VisitExit",1,"TiXmlVisitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlVisitor::VisitExit",2,"TiXmlElement const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit_exit",1,SWIGTYPE_p_TiXmlVisitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit_exit",2,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (bool)(arg1)->VisitExit((TiXmlElement const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlVisitor_visit_exit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlVisitor_visit_exit__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlVisitor_visit_exit__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlVisitor_visit_exit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlVisitor::VisitExit(TiXmlDocument const &)\n"
    "    TiXmlVisitor::VisitExit(TiXmlElement const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlVisitor_visit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlVisitor *arg1 = (TiXmlVisitor *) 0 ;
  TiXmlDeclaration *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlVisitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlVisitor::Visit",1,"TiXmlVisitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlVisitor::Visit",2,"TiXmlDeclaration const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit",1,SWIGTYPE_p_TiXmlVisitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit",2,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (bool)(arg1)->Visit((TiXmlDeclaration const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlVisitor_visit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlVisitor *arg1 = (TiXmlVisitor *) 0 ;
  TiXmlStylesheetReference *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlVisitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlVisitor::Visit",1,"TiXmlVisitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlVisitor::Visit",2,"TiXmlStylesheetReference const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit",1,SWIGTYPE_p_TiXmlVisitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit",2,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  result = (bool)(arg1)->Visit((TiXmlStylesheetReference const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlVisitor_visit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlVisitor *arg1 = (TiXmlVisitor *) 0 ;
  TiXmlText *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlVisitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlVisitor::Visit",1,"TiXmlVisitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlVisitor::Visit",2,"TiXmlText const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit",1,SWIGTYPE_p_TiXmlVisitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit",2,SWIGTYPE_p_TiXmlText);
  }
  
  result = (bool)(arg1)->Visit((TiXmlText const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlVisitor_visit__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlVisitor *arg1 = (TiXmlVisitor *) 0 ;
  TiXmlComment *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlVisitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlVisitor::Visit",1,"TiXmlVisitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlVisitor::Visit",2,"TiXmlComment const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit",1,SWIGTYPE_p_TiXmlVisitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit",2,SWIGTYPE_p_TiXmlComment);
  }
  
  result = (bool)(arg1)->Visit((TiXmlComment const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlVisitor_visit__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlVisitor *arg1 = (TiXmlVisitor *) 0 ;
  TiXmlUnknown *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlVisitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlVisitor::Visit",1,"TiXmlVisitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlVisitor::Visit",2,"TiXmlUnknown const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit",1,SWIGTYPE_p_TiXmlVisitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlUnknown,0))){
    SWIG_fail_ptr("TiXmlVisitor_visit",2,SWIGTYPE_p_TiXmlUnknown);
  }
  
  result = (bool)(arg1)->Visit((TiXmlUnknown const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlVisitor_visit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlDeclaration, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlVisitor_visit__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlStylesheetReference, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlVisitor_visit__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlText, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlVisitor_visit__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlComment, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlVisitor_visit__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlUnknown, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlVisitor_visit__SWIG_4(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlVisitor_visit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlVisitor::Visit(TiXmlDeclaration const &)\n"
    "    TiXmlVisitor::Visit(TiXmlStylesheetReference const &)\n"
    "    TiXmlVisitor::Visit(TiXmlText const &)\n"
    "    TiXmlVisitor::Visit(TiXmlComment const &)\n"
    "    TiXmlVisitor::Visit(TiXmlUnknown const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_TiXmlVisitor(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlVisitor *result = 0 ;
  
  SWIG_check_num_args("TiXmlVisitor::TiXmlVisitor",0,0)
  result = (TiXmlVisitor *)new TiXmlVisitor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlVisitor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlVisitor(void *obj) {
TiXmlVisitor *arg1 = (TiXmlVisitor *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlVisitor_methods[] = {
    {"visit_enter", _wrap_TiXmlVisitor_visit_enter}, 
    {"visit_exit", _wrap_TiXmlVisitor_visit_exit}, 
    {"visit", _wrap_TiXmlVisitor_visit}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlVisitor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlVisitor_bases[] = {0};
static const char *swig_TiXmlVisitor_base_names[] = {0};
static swig_lua_class _wrap_class_TiXmlVisitor = { "TiXmlVisitor", &SWIGTYPE_p_TiXmlVisitor,_wrap_new_TiXmlVisitor, swig_delete_TiXmlVisitor, swig_TiXmlVisitor_methods, swig_TiXmlVisitor_attributes, swig_TiXmlVisitor_bases, swig_TiXmlVisitor_base_names };

static int _wrap_TIXML_DEFAULT_ENCODING_get(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlEncoding result;
  
  SWIG_check_num_args("TIXML_DEFAULT_ENCODING",0,0)
  result = (TiXmlEncoding)(TiXmlEncoding)TIXML_DEFAULT_ENCODING;
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_print(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlBase *arg1 = (TiXmlBase *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("TiXmlBase::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlBase::Print",1,"TiXmlBase const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlBase::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlBase::Print",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlBase,0))){
    SWIG_fail_ptr("TiXmlBase_print",1,SWIGTYPE_p_TiXmlBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlBase_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((TiXmlBase const *)arg1)->Print(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_set_condense_white_space(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("TiXmlBase::SetCondenseWhiteSpace",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("TiXmlBase::SetCondenseWhiteSpace",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  TiXmlBase::SetCondenseWhiteSpace(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_is_white_space_condensed(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("TiXmlBase::IsWhiteSpaceCondensed",0,0)
  result = (bool)TiXmlBase::IsWhiteSpaceCondensed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_row(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlBase *arg1 = (TiXmlBase *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlBase::Row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlBase::Row",1,"TiXmlBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlBase,0))){
    SWIG_fail_ptr("TiXmlBase_row",1,SWIGTYPE_p_TiXmlBase);
  }
  
  result = (int)((TiXmlBase const *)arg1)->Row();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_column(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlBase *arg1 = (TiXmlBase *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlBase::Column",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlBase::Column",1,"TiXmlBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlBase,0))){
    SWIG_fail_ptr("TiXmlBase_column",1,SWIGTYPE_p_TiXmlBase);
  }
  
  result = (int)((TiXmlBase const *)arg1)->Column();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_set_user_data(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlBase *arg1 = (TiXmlBase *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("TiXmlBase::SetUserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlBase::SetUserData",1,"TiXmlBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlBase::SetUserData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlBase,0))){
    SWIG_fail_ptr("TiXmlBase_set_user_data",1,SWIGTYPE_p_TiXmlBase);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TiXmlBase_set_user_data");
  (arg1)->SetUserData(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_get_user_data__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlBase *arg1 = (TiXmlBase *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("TiXmlBase::GetUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlBase::GetUserData",1,"TiXmlBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlBase,0))){
    SWIG_fail_ptr("TiXmlBase_get_user_data",1,SWIGTYPE_p_TiXmlBase);
  }
  
  result = (void *)(arg1)->GetUserData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_get_user_data__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlBase *arg1 = (TiXmlBase *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("TiXmlBase::GetUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlBase::GetUserData",1,"TiXmlBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlBase,0))){
    SWIG_fail_ptr("TiXmlBase_get_user_data",1,SWIGTYPE_p_TiXmlBase);
  }
  
  result = (void *)((TiXmlBase const *)arg1)->GetUserData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_get_user_data(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlBase_get_user_data__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlBase_get_user_data__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlBase_get_user_data'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlBase::GetUserData()\n"
    "    TiXmlBase::GetUserData() const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlBase_utf8ByteTable_get(lua_State* L) {
  int SWIG_arg = 0;
  int *result = 0 ;
  
  SWIG_check_num_args("TiXmlBase::utf8ByteTable",0,0)
  result = (int *)(int *)TiXmlBase::utf8ByteTable;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_parse(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlBase *arg1 = (TiXmlBase *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlParsingData *arg3 = (TiXmlParsingData *) 0 ;
  TiXmlEncoding arg4 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlBase::Parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlBase::Parse",1,"TiXmlBase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlBase::Parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlBase::Parse",3,"TiXmlParsingData *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TiXmlBase::Parse",4,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlBase,0))){
    SWIG_fail_ptr("TiXmlBase_parse",1,SWIGTYPE_p_TiXmlBase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlBase_parse",3,SWIGTYPE_p_TiXmlParsingData);
  }
  
  arg4 = (TiXmlEncoding)(int)lua_tonumber(L, 4);
  result = (char *)(arg1)->Parse((char const *)arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlBase_encode_string(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = (std::string *) 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("TiXmlBase::EncodeString",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TiXmlBase::EncodeString",1,"std::string const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlBase::EncodeString",2,"std::string *");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TiXmlBase_encode_string",2,SWIGTYPE_p_std__string);
  }
  
  TiXmlBase::EncodeString((std::string const &)*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlBase(void *obj) {
TiXmlBase *arg1 = (TiXmlBase *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlBase_methods[] = {
    {"print", _wrap_TiXmlBase_print}, 
    {"row", _wrap_TiXmlBase_row}, 
    {"column", _wrap_TiXmlBase_column}, 
    {"set_user_data", _wrap_TiXmlBase_set_user_data}, 
    {"get_user_data", _wrap_TiXmlBase_get_user_data}, 
    {"parse", _wrap_TiXmlBase_parse}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlBase_bases[] = {0,0};
static const char *swig_TiXmlBase_base_names[] = {"TiCppRC *",0};
static swig_lua_class _wrap_class_TiXmlBase = { "TiXmlBase", &SWIGTYPE_p_TiXmlBase,0, swig_delete_TiXmlBase, swig_TiXmlBase_methods, swig_TiXmlBase_attributes, swig_TiXmlBase_bases, swig_TiXmlBase_base_names };

static int _wrap_TiXmlNode_value(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::Value",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_value",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (char *)((TiXmlNode const *)arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_value_str(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ValueStr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ValueStr",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_value_str",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (std::string *) &((TiXmlNode const *)arg1)->ValueStr();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_value_tstr(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ValueTStr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ValueTStr",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_value_tstr",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (std::string *) &((TiXmlNode const *)arg1)->ValueTStr();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_set_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("TiXmlNode::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::SetValue",1,"TiXmlNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::SetValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_set_value",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetValue((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_set_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TiXmlNode::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::SetValue",1,"TiXmlNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::SetValue",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_set_value",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->SetValue((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_set_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_set_value__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_set_value__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_set_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::SetValue(char const *)\n"
    "    TiXmlNode::SetValue(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_clear(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  
  SWIG_check_num_args("TiXmlNode::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::Clear",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_clear",1,SWIGTYPE_p_TiXmlNode);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_parent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::Parent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::Parent",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_parent",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->Parent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_parent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::Parent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::Parent",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_parent",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->Parent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_parent(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_parent__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_parent__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_parent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::Parent()\n"
    "    TiXmlNode::Parent() const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_first_child__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChild",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->FirstChild();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChild",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->FirstChild();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChild",1,"TiXmlNode const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::FirstChild",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->FirstChild((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChild",1,"TiXmlNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::FirstChild",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlNode *)(arg1)->FirstChild((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_last_child__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::LastChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::LastChild",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_last_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->LastChild();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_last_child__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::LastChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::LastChild",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_last_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->LastChild();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_last_child__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::LastChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::LastChild",1,"TiXmlNode const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::LastChild",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_last_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->LastChild((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_last_child__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::LastChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::LastChild",1,"TiXmlNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::LastChild",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_last_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlNode *)(arg1)->LastChild((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChild",1,"TiXmlNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::FirstChild",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->FirstChild((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChild",1,"TiXmlNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::FirstChild",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlNode *)(arg1)->FirstChild((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_first_child__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_first_child__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_first_child__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_first_child__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_first_child__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_first_child__SWIG_4(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_first_child'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::FirstChild() const\n"
    "    TiXmlNode::FirstChild()\n"
    "    TiXmlNode::FirstChild(char const *) const\n"
    "    TiXmlNode::FirstChild(char const *)\n"
    "    TiXmlNode::FirstChild(std::string const &) const\n"
    "    TiXmlNode::FirstChild(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_last_child__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::LastChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::LastChild",1,"TiXmlNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::LastChild",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_last_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->LastChild((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_last_child__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::LastChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::LastChild",1,"TiXmlNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::LastChild",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_last_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlNode *)(arg1)->LastChild((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_last_child(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_last_child__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_last_child__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_last_child__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_last_child__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_last_child__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_last_child__SWIG_4(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_last_child'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::LastChild() const\n"
    "    TiXmlNode::LastChild()\n"
    "    TiXmlNode::LastChild(char const *) const\n"
    "    TiXmlNode::LastChild(char const *)\n"
    "    TiXmlNode::LastChild(std::string const &) const\n"
    "    TiXmlNode::LastChild(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_iterate_children__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *arg2 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::IterateChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::IterateChildren",1,"TiXmlNode const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlNode::IterateChildren",2,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",1,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",2,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->IterateChildren((TiXmlNode const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_iterate_children__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *arg2 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::IterateChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::IterateChildren",1,"TiXmlNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlNode::IterateChildren",2,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",1,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",2,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->IterateChildren((TiXmlNode const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_iterate_children__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlNode *arg3 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::IterateChildren",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::IterateChildren",1,"TiXmlNode const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::IterateChildren",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlNode::IterateChildren",3,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",3,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->IterateChildren((char const *)arg2,(TiXmlNode const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_iterate_children__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlNode *arg3 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::IterateChildren",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::IterateChildren",1,"TiXmlNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::IterateChildren",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlNode::IterateChildren",3,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",3,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->IterateChildren((char const *)arg2,(TiXmlNode const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_iterate_children__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  TiXmlNode *arg3 = (TiXmlNode *) 0 ;
  std::string temp2 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::IterateChildren",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::IterateChildren",1,"TiXmlNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::IterateChildren",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlNode::IterateChildren",3,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",3,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->IterateChildren((std::string const &)*arg2,(TiXmlNode const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_iterate_children__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  TiXmlNode *arg3 = (TiXmlNode *) 0 ;
  std::string temp2 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::IterateChildren",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::IterateChildren",1,"TiXmlNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::IterateChildren",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlNode::IterateChildren",3,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_iterate_children",3,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->IterateChildren((std::string const &)*arg2,(TiXmlNode const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_iterate_children(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlNode_iterate_children__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlNode_iterate_children__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlNode_iterate_children__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlNode_iterate_children__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlNode_iterate_children__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlNode_iterate_children__SWIG_4(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_iterate_children'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::IterateChildren(TiXmlNode const *) const\n"
    "    TiXmlNode::IterateChildren(TiXmlNode const *)\n"
    "    TiXmlNode::IterateChildren(char const *,TiXmlNode const *) const\n"
    "    TiXmlNode::IterateChildren(char const *,TiXmlNode const *)\n"
    "    TiXmlNode::IterateChildren(std::string const &,TiXmlNode const *) const\n"
    "    TiXmlNode::IterateChildren(std::string const &,TiXmlNode const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_insert_end_child(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *arg2 = 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::InsertEndChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::InsertEndChild",1,"TiXmlNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlNode::InsertEndChild",2,"TiXmlNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_insert_end_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_insert_end_child",2,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->InsertEndChild((TiXmlNode const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_link_end_child(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *arg2 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::LinkEndChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::LinkEndChild",1,"TiXmlNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlNode::LinkEndChild",2,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_link_end_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_link_end_child",2,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->LinkEndChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_insert_before_child(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *arg2 = (TiXmlNode *) 0 ;
  TiXmlNode *arg3 = 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::InsertBeforeChild",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::InsertBeforeChild",1,"TiXmlNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlNode::InsertBeforeChild",2,"TiXmlNode *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TiXmlNode::InsertBeforeChild",3,"TiXmlNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_insert_before_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_insert_before_child",2,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_insert_before_child",3,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->InsertBeforeChild(arg2,(TiXmlNode const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_insert_after_child(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *arg2 = (TiXmlNode *) 0 ;
  TiXmlNode *arg3 = 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::InsertAfterChild",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::InsertAfterChild",1,"TiXmlNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlNode::InsertAfterChild",2,"TiXmlNode *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TiXmlNode::InsertAfterChild",3,"TiXmlNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_insert_after_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_insert_after_child",2,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_insert_after_child",3,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->InsertAfterChild(arg2,(TiXmlNode const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_replace_child(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *arg2 = (TiXmlNode *) 0 ;
  TiXmlNode *arg3 = 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ReplaceChild",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ReplaceChild",1,"TiXmlNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlNode::ReplaceChild",2,"TiXmlNode *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TiXmlNode::ReplaceChild",3,"TiXmlNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_replace_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_replace_child",2,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_replace_child",3,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->ReplaceChild(arg2,(TiXmlNode const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_remove_child(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *arg2 = (TiXmlNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlNode::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::RemoveChild",1,"TiXmlNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlNode::RemoveChild",2,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_remove_child",1,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_remove_child",2,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (bool)(arg1)->RemoveChild(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_previous_sibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::PreviousSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::PreviousSibling",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_previous_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->PreviousSibling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_previous_sibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::PreviousSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::PreviousSibling",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_previous_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->PreviousSibling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_previous_sibling__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::PreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::PreviousSibling",1,"TiXmlNode const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::PreviousSibling",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_previous_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->PreviousSibling((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_previous_sibling__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::PreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::PreviousSibling",1,"TiXmlNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::PreviousSibling",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_previous_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlNode *)(arg1)->PreviousSibling((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_previous_sibling__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::PreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::PreviousSibling",1,"TiXmlNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::PreviousSibling",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_previous_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->PreviousSibling((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_previous_sibling__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::PreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::PreviousSibling",1,"TiXmlNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::PreviousSibling",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_previous_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlNode *)(arg1)->PreviousSibling((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_previous_sibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_previous_sibling__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_previous_sibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_previous_sibling__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_previous_sibling__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_previous_sibling__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_previous_sibling__SWIG_4(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_previous_sibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::PreviousSibling() const\n"
    "    TiXmlNode::PreviousSibling()\n"
    "    TiXmlNode::PreviousSibling(char const *) const\n"
    "    TiXmlNode::PreviousSibling(char const *)\n"
    "    TiXmlNode::PreviousSibling(std::string const &) const\n"
    "    TiXmlNode::PreviousSibling(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_next_sibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSibling",1,"TiXmlNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::NextSibling",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->NextSibling((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSibling",1,"TiXmlNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::NextSibling",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlNode *)(arg1)->NextSibling((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSibling",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->NextSibling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSibling",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)(arg1)->NextSibling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSibling",1,"TiXmlNode const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::NextSibling",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->NextSibling((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSibling",1,"TiXmlNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::NextSibling",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlNode *)(arg1)->NextSibling((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_next_sibling__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_next_sibling__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_next_sibling__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_next_sibling__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_next_sibling__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_next_sibling__SWIG_4(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_next_sibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::NextSibling(std::string const &) const\n"
    "    TiXmlNode::NextSibling(std::string const &)\n"
    "    TiXmlNode::NextSibling() const\n"
    "    TiXmlNode::NextSibling()\n"
    "    TiXmlNode::NextSibling(char const *) const\n"
    "    TiXmlNode::NextSibling(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_next_sibling_element__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSiblingElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSiblingElement",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlElement *)((TiXmlNode const *)arg1)->NextSiblingElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling_element__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSiblingElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSiblingElement",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlElement *)(arg1)->NextSiblingElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling_element__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSiblingElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSiblingElement",1,"TiXmlNode const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::NextSiblingElement",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlElement *)((TiXmlNode const *)arg1)->NextSiblingElement((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling_element__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSiblingElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSiblingElement",1,"TiXmlNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::NextSiblingElement",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlElement *)(arg1)->NextSiblingElement((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling_element__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSiblingElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSiblingElement",1,"TiXmlNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::NextSiblingElement",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlElement *)((TiXmlNode const *)arg1)->NextSiblingElement((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling_element__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::NextSiblingElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NextSiblingElement",1,"TiXmlNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::NextSiblingElement",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_next_sibling_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlElement *)(arg1)->NextSiblingElement((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_next_sibling_element(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_next_sibling_element__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_next_sibling_element__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_next_sibling_element__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_next_sibling_element__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_next_sibling_element__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_next_sibling_element__SWIG_4(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_next_sibling_element'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::NextSiblingElement() const\n"
    "    TiXmlNode::NextSiblingElement()\n"
    "    TiXmlNode::NextSiblingElement(char const *) const\n"
    "    TiXmlNode::NextSiblingElement(char const *)\n"
    "    TiXmlNode::NextSiblingElement(std::string const &) const\n"
    "    TiXmlNode::NextSiblingElement(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_first_child_element__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChildElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChildElement",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlElement *)((TiXmlNode const *)arg1)->FirstChildElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child_element__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChildElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChildElement",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlElement *)(arg1)->FirstChildElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child_element__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChildElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChildElement",1,"TiXmlNode const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::FirstChildElement",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlElement *)((TiXmlNode const *)arg1)->FirstChildElement((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child_element__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChildElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChildElement",1,"TiXmlNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlNode::FirstChildElement",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlElement *)(arg1)->FirstChildElement((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child_element__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChildElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChildElement",1,"TiXmlNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::FirstChildElement",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlElement *)((TiXmlNode const *)arg1)->FirstChildElement((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child_element__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::FirstChildElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::FirstChildElement",1,"TiXmlNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlNode::FirstChildElement",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_first_child_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlElement *)(arg1)->FirstChildElement((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_first_child_element(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_first_child_element__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_first_child_element__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_first_child_element__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_first_child_element__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_first_child_element__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlNode_first_child_element__SWIG_4(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_first_child_element'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::FirstChildElement() const\n"
    "    TiXmlNode::FirstChildElement()\n"
    "    TiXmlNode::FirstChildElement(char const *) const\n"
    "    TiXmlNode::FirstChildElement(char const *)\n"
    "    TiXmlNode::FirstChildElement(std::string const &) const\n"
    "    TiXmlNode::FirstChildElement(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_type(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlNode::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::Type",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_type",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (int)((TiXmlNode const *)arg1)->Type();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_get_document__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlDocument *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::GetDocument",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::GetDocument",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_get_document",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlDocument *)((TiXmlNode const *)arg1)->GetDocument();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDocument,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_get_document__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlDocument *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::GetDocument",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::GetDocument",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_get_document",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlDocument *)(arg1)->GetDocument();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDocument,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_get_document(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_get_document__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_get_document__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_get_document'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::GetDocument() const\n"
    "    TiXmlNode::GetDocument()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_no_children(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlNode::NoChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::NoChildren",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_no_children",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (bool)((TiXmlNode const *)arg1)->NoChildren();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_document__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlDocument *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToDocument",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToDocument",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_document",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlDocument *)((TiXmlNode const *)arg1)->ToDocument();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDocument,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_element__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToElement",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlElement *)((TiXmlNode const *)arg1)->ToElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_comment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlComment *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToComment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToComment",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_comment",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlComment *)((TiXmlNode const *)arg1)->ToComment();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlComment,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_unknown__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlUnknown *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToUnknown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToUnknown",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_unknown",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlUnknown *)((TiXmlNode const *)arg1)->ToUnknown();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlUnknown,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_text__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlText *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToText",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_text",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlText *)((TiXmlNode const *)arg1)->ToText();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_declaration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlDeclaration *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToDeclaration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToDeclaration",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_declaration",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlDeclaration *)((TiXmlNode const *)arg1)->ToDeclaration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDeclaration,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_stylesheet_reference__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlStylesheetReference *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToStylesheetReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToStylesheetReference",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_stylesheet_reference",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlStylesheetReference *)((TiXmlNode const *)arg1)->ToStylesheetReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlStylesheetReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_document__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlDocument *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToDocument",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToDocument",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_document",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlDocument *)(arg1)->ToDocument();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDocument,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_document(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_document__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_document__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_to_document'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::ToDocument() const\n"
    "    TiXmlNode::ToDocument()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_to_element__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToElement",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_element",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlElement *)(arg1)->ToElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_element(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_element__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_element__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_to_element'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::ToElement() const\n"
    "    TiXmlNode::ToElement()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_to_comment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlComment *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToComment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToComment",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_comment",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlComment *)(arg1)->ToComment();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlComment,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_comment(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_comment__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_comment__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_to_comment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::ToComment() const\n"
    "    TiXmlNode::ToComment()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_to_unknown__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlUnknown *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToUnknown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToUnknown",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_unknown",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlUnknown *)(arg1)->ToUnknown();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlUnknown,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_unknown(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_unknown__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_unknown__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_to_unknown'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::ToUnknown() const\n"
    "    TiXmlNode::ToUnknown()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_to_text__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlText *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToText",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_text",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlText *)(arg1)->ToText();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_text(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_text__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_text__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_to_text'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::ToText() const\n"
    "    TiXmlNode::ToText()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_to_declaration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlDeclaration *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToDeclaration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToDeclaration",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_declaration",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlDeclaration *)(arg1)->ToDeclaration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDeclaration,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_declaration(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_declaration__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_declaration__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_to_declaration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::ToDeclaration() const\n"
    "    TiXmlNode::ToDeclaration()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_to_stylesheet_reference__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlStylesheetReference *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::ToStylesheetReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::ToStylesheetReference",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_to_stylesheet_reference",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlStylesheetReference *)(arg1)->ToStylesheetReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlStylesheetReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_to_stylesheet_reference(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_stylesheet_reference__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlNode_to_stylesheet_reference__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlNode_to_stylesheet_reference'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlNode::ToStylesheetReference() const\n"
    "    TiXmlNode::ToStylesheetReference()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlNode_clone(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlNode::Clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::Clone",1,"TiXmlNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_clone",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlNode *)((TiXmlNode const *)arg1)->Clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlNode_accept(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlVisitor *arg2 = (TiXmlVisitor *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlNode::Accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlNode::Accept",1,"TiXmlNode const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlNode::Accept",2,"TiXmlVisitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("TiXmlNode_accept",1,SWIGTYPE_p_TiXmlNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlNode_accept",2,SWIGTYPE_p_TiXmlVisitor);
  }
  
  result = (bool)((TiXmlNode const *)arg1)->Accept(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlNode(void *obj) {
TiXmlNode *arg1 = (TiXmlNode *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlNode_methods[] = {
    {"value", _wrap_TiXmlNode_value}, 
    {"value_str", _wrap_TiXmlNode_value_str}, 
    {"value_tstr", _wrap_TiXmlNode_value_tstr}, 
    {"set_value", _wrap_TiXmlNode_set_value}, 
    {"clear", _wrap_TiXmlNode_clear}, 
    {"parent", _wrap_TiXmlNode_parent}, 
    {"first_child", _wrap_TiXmlNode_first_child}, 
    {"last_child", _wrap_TiXmlNode_last_child}, 
    {"iterate_children", _wrap_TiXmlNode_iterate_children}, 
    {"insert_end_child", _wrap_TiXmlNode_insert_end_child}, 
    {"link_end_child", _wrap_TiXmlNode_link_end_child}, 
    {"insert_before_child", _wrap_TiXmlNode_insert_before_child}, 
    {"insert_after_child", _wrap_TiXmlNode_insert_after_child}, 
    {"replace_child", _wrap_TiXmlNode_replace_child}, 
    {"remove_child", _wrap_TiXmlNode_remove_child}, 
    {"previous_sibling", _wrap_TiXmlNode_previous_sibling}, 
    {"next_sibling", _wrap_TiXmlNode_next_sibling}, 
    {"next_sibling_element", _wrap_TiXmlNode_next_sibling_element}, 
    {"first_child_element", _wrap_TiXmlNode_first_child_element}, 
    {"type", _wrap_TiXmlNode_type}, 
    {"get_document", _wrap_TiXmlNode_get_document}, 
    {"no_children", _wrap_TiXmlNode_no_children}, 
    {"to_document", _wrap_TiXmlNode_to_document}, 
    {"to_element", _wrap_TiXmlNode_to_element}, 
    {"to_comment", _wrap_TiXmlNode_to_comment}, 
    {"to_unknown", _wrap_TiXmlNode_to_unknown}, 
    {"to_text", _wrap_TiXmlNode_to_text}, 
    {"to_declaration", _wrap_TiXmlNode_to_declaration}, 
    {"to_stylesheet_reference", _wrap_TiXmlNode_to_stylesheet_reference}, 
    {"clone", _wrap_TiXmlNode_clone}, 
    {"accept", _wrap_TiXmlNode_accept}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlNode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlNode_bases[] = {0,0};
static const char *swig_TiXmlNode_base_names[] = {"TiXmlBase *",0};
static swig_lua_class _wrap_class_TiXmlNode = { "TiXmlNode", &SWIGTYPE_p_TiXmlNode,0, swig_delete_TiXmlNode, swig_TiXmlNode_methods, swig_TiXmlNode_attributes, swig_TiXmlNode_bases, swig_TiXmlNode_base_names };

static int _wrap_new_TiXmlAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::TiXmlAttribute",0,0)
  result = (TiXmlAttribute *)new TiXmlAttribute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::TiXmlAttribute",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TiXmlAttribute::TiXmlAttribute",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlAttribute::TiXmlAttribute",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlAttribute *)new TiXmlAttribute((std::string const &)*arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlAttribute__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::TiXmlAttribute",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("TiXmlAttribute::TiXmlAttribute",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlAttribute::TiXmlAttribute",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlAttribute *)new TiXmlAttribute((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlAttribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TiXmlAttribute__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TiXmlAttribute__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TiXmlAttribute__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TiXmlAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlAttribute::TiXmlAttribute()\n"
    "    TiXmlAttribute::TiXmlAttribute(std::string const &,std::string const &)\n"
    "    TiXmlAttribute::TiXmlAttribute(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlAttribute_name(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::Name",1,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_name",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (char *)((TiXmlAttribute const *)arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_value(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::Value",1,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_value",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (char *)((TiXmlAttribute const *)arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_value_str(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::ValueStr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::ValueStr",1,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_value_str",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (std::string *) &((TiXmlAttribute const *)arg1)->ValueStr();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_int_value(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlAttribute::IntValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::IntValue",1,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_int_value",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (int)((TiXmlAttribute const *)arg1)->IntValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_double_value(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  double result;
  
  SWIG_check_num_args("TiXmlAttribute::DoubleValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::DoubleValue",1,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_double_value",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (double)((TiXmlAttribute const *)arg1)->DoubleValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_name_tstr(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::NameTStr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::NameTStr",1,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_name_tstr",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (std::string *) &((TiXmlAttribute const *)arg1)->NameTStr();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_query_int_value(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlAttribute::QueryIntValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::QueryIntValue",1,"TiXmlAttribute const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlAttribute::QueryIntValue",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_query_int_value",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TiXmlAttribute_query_int_value",2,SWIGTYPE_p_int);
  }
  
  result = (int)((TiXmlAttribute const *)arg1)->QueryIntValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_query_double_value(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  double *arg2 = (double *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlAttribute::QueryDoubleValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::QueryDoubleValue",1,"TiXmlAttribute const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlAttribute::QueryDoubleValue",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_query_double_value",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("TiXmlAttribute_query_double_value",2,SWIGTYPE_p_double);
  }
  
  result = (int)((TiXmlAttribute const *)arg1)->QueryDoubleValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_set_name__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::SetName",1,"TiXmlAttribute *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlAttribute::SetName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_set_name",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_set_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::SetValue",1,"TiXmlAttribute *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlAttribute::SetValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_set_value",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetValue((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_set_int_value(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TiXmlAttribute::SetIntValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::SetIntValue",1,"TiXmlAttribute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TiXmlAttribute::SetIntValue",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_set_int_value",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetIntValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_set_double_value(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("TiXmlAttribute::SetDoubleValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::SetDoubleValue",1,"TiXmlAttribute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TiXmlAttribute::SetDoubleValue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_set_double_value",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetDoubleValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_set_name__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TiXmlAttribute::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::SetName",1,"TiXmlAttribute *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlAttribute::SetName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_set_name",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->SetName((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_set_name(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlAttribute_set_name__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlAttribute_set_name__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlAttribute_set_name'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlAttribute::SetName(char const *)\n"
    "    TiXmlAttribute::SetName(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlAttribute_set_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TiXmlAttribute::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::SetValue",1,"TiXmlAttribute *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlAttribute::SetValue",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_set_value",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->SetValue((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_set_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlAttribute_set_value__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlAttribute_set_value__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlAttribute_set_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlAttribute::SetValue(char const *)\n"
    "    TiXmlAttribute::SetValue(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlAttribute_next__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::Next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::Next",1,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_next",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (TiXmlAttribute *)((TiXmlAttribute const *)arg1)->Next();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_next__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::Next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::Next",1,"TiXmlAttribute *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_next",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (TiXmlAttribute *)(arg1)->Next();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_next(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlAttribute_next__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlAttribute_next__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlAttribute_next'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlAttribute::Next() const\n"
    "    TiXmlAttribute::Next()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlAttribute_previous__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::Previous",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::Previous",1,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_previous",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (TiXmlAttribute *)((TiXmlAttribute const *)arg1)->Previous();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_previous__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::Previous",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::Previous",1,"TiXmlAttribute *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_previous",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (TiXmlAttribute *)(arg1)->Previous();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_previous(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlAttribute_previous__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlAttribute_previous__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlAttribute_previous'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlAttribute::Previous() const\n"
    "    TiXmlAttribute::Previous()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlAttribute___eq(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  TiXmlAttribute *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlAttribute::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::operator ==",1,"TiXmlAttribute const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlAttribute::operator ==",2,"TiXmlAttribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute___eq",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute___eq",2,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (bool)((TiXmlAttribute const *)arg1)->operator ==((TiXmlAttribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute___lt(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  TiXmlAttribute *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlAttribute::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::operator <",1,"TiXmlAttribute const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlAttribute::operator <",2,"TiXmlAttribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute___lt",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute___lt",2,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (bool)((TiXmlAttribute const *)arg1)->operator <((TiXmlAttribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_parse(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlParsingData *arg3 = (TiXmlParsingData *) 0 ;
  TiXmlEncoding arg4 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::Parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::Parse",1,"TiXmlAttribute *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlAttribute::Parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlAttribute::Parse",3,"TiXmlParsingData *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TiXmlAttribute::Parse",4,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_parse",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlAttribute_parse",3,SWIGTYPE_p_TiXmlParsingData);
  }
  
  arg4 = (TiXmlEncoding)(int)lua_tonumber(L, 4);
  result = (char *)(arg1)->Parse((char const *)arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("TiXmlAttribute::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::Print",1,"TiXmlAttribute const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlAttribute::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlAttribute::Print",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_print",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlAttribute_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((TiXmlAttribute const *)arg1)->Print(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  std::string *arg4 = (std::string *) 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::Print",1,"TiXmlAttribute const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlAttribute::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlAttribute::Print",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TiXmlAttribute::Print",4,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_print",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlAttribute_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TiXmlAttribute_print",4,SWIGTYPE_p_std__string);
  }
  
  ((TiXmlAttribute const *)arg1)->Print(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttribute_print(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlAttribute_print__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_TiXmlAttribute_print__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlAttribute_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlAttribute::Print(FILE *,int) const\n"
    "    TiXmlAttribute::Print(FILE *,int,std::string *) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlAttribute_set_document(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  TiXmlDocument *arg2 = (TiXmlDocument *) 0 ;
  
  SWIG_check_num_args("TiXmlAttribute::SetDocument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttribute::SetDocument",1,"TiXmlAttribute *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlAttribute::SetDocument",2,"TiXmlDocument *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttribute_set_document",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlAttribute_set_document",2,SWIGTYPE_p_TiXmlDocument);
  }
  
  (arg1)->SetDocument(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlAttribute(void *obj) {
TiXmlAttribute *arg1 = (TiXmlAttribute *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlAttribute_methods[] = {
    {"name", _wrap_TiXmlAttribute_name}, 
    {"value", _wrap_TiXmlAttribute_value}, 
    {"value_str", _wrap_TiXmlAttribute_value_str}, 
    {"int_value", _wrap_TiXmlAttribute_int_value}, 
    {"double_value", _wrap_TiXmlAttribute_double_value}, 
    {"name_tstr", _wrap_TiXmlAttribute_name_tstr}, 
    {"query_int_value", _wrap_TiXmlAttribute_query_int_value}, 
    {"query_double_value", _wrap_TiXmlAttribute_query_double_value}, 
    {"set_int_value", _wrap_TiXmlAttribute_set_int_value}, 
    {"set_double_value", _wrap_TiXmlAttribute_set_double_value}, 
    {"set_name", _wrap_TiXmlAttribute_set_name}, 
    {"set_value", _wrap_TiXmlAttribute_set_value}, 
    {"next", _wrap_TiXmlAttribute_next}, 
    {"previous", _wrap_TiXmlAttribute_previous}, 
    {"__eq", _wrap_TiXmlAttribute___eq}, 
    {"__lt", _wrap_TiXmlAttribute___lt}, 
    {"parse", _wrap_TiXmlAttribute_parse}, 
    {"print", _wrap_TiXmlAttribute_print}, 
    {"set_document", _wrap_TiXmlAttribute_set_document}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlAttribute_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlAttribute_bases[] = {0,0};
static const char *swig_TiXmlAttribute_base_names[] = {"TiXmlBase *",0};
static swig_lua_class _wrap_class_TiXmlAttribute = { "TiXmlAttribute", &SWIGTYPE_p_TiXmlAttribute,_wrap_new_TiXmlAttribute, swig_delete_TiXmlAttribute, swig_TiXmlAttribute_methods, swig_TiXmlAttribute_attributes, swig_TiXmlAttribute_bases, swig_TiXmlAttribute_base_names };

static int _wrap_new_TiXmlAttributeSet(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::TiXmlAttributeSet",0,0)
  result = (TiXmlAttributeSet *)new TiXmlAttributeSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttributeSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_add(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) 0 ;
  TiXmlAttribute *arg2 = (TiXmlAttribute *) 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::Add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttributeSet::Add",1,"TiXmlAttributeSet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlAttributeSet::Add",2,"TiXmlAttribute *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttributeSet,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_add",1,SWIGTYPE_p_TiXmlAttributeSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_add",2,SWIGTYPE_p_TiXmlAttribute);
  }
  
  (arg1)->Add(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_remove(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) 0 ;
  TiXmlAttribute *arg2 = (TiXmlAttribute *) 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::Remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttributeSet::Remove",1,"TiXmlAttributeSet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlAttributeSet::Remove",2,"TiXmlAttribute *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttributeSet,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_remove",1,SWIGTYPE_p_TiXmlAttributeSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_remove",2,SWIGTYPE_p_TiXmlAttribute);
  }
  
  (arg1)->Remove(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_first__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::First",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttributeSet::First",1,"TiXmlAttributeSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttributeSet,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_first",1,SWIGTYPE_p_TiXmlAttributeSet);
  }
  
  result = (TiXmlAttribute *)((TiXmlAttributeSet const *)arg1)->First();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_first__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::First",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttributeSet::First",1,"TiXmlAttributeSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttributeSet,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_first",1,SWIGTYPE_p_TiXmlAttributeSet);
  }
  
  result = (TiXmlAttribute *)(arg1)->First();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_first(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttributeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlAttributeSet_first__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttributeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlAttributeSet_first__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlAttributeSet_first'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlAttributeSet::First() const\n"
    "    TiXmlAttributeSet::First()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlAttributeSet_last__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::Last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttributeSet::Last",1,"TiXmlAttributeSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttributeSet,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_last",1,SWIGTYPE_p_TiXmlAttributeSet);
  }
  
  result = (TiXmlAttribute *)((TiXmlAttributeSet const *)arg1)->Last();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_last__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::Last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttributeSet::Last",1,"TiXmlAttributeSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttributeSet,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_last",1,SWIGTYPE_p_TiXmlAttributeSet);
  }
  
  result = (TiXmlAttribute *)(arg1)->Last();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_last(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttributeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlAttributeSet_last__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttributeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlAttributeSet_last__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlAttributeSet_last'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlAttributeSet::Last() const\n"
    "    TiXmlAttributeSet::Last()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlAttributeSet_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttributeSet::Find",1,"TiXmlAttributeSet const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlAttributeSet::Find",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttributeSet,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_find",1,SWIGTYPE_p_TiXmlAttributeSet);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlAttribute *)((TiXmlAttributeSet const *)arg1)->Find((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttributeSet::Find",1,"TiXmlAttributeSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlAttributeSet::Find",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttributeSet,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_find",1,SWIGTYPE_p_TiXmlAttributeSet);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlAttribute *)(arg1)->Find((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_find__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttributeSet::Find",1,"TiXmlAttributeSet const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlAttributeSet::Find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttributeSet,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_find",1,SWIGTYPE_p_TiXmlAttributeSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlAttribute *)((TiXmlAttributeSet const *)arg1)->Find((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_find__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlAttributeSet::Find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlAttributeSet::Find",1,"TiXmlAttributeSet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlAttributeSet::Find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttributeSet,0))){
    SWIG_fail_ptr("TiXmlAttributeSet_find",1,SWIGTYPE_p_TiXmlAttributeSet);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlAttribute *)(arg1)->Find((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlAttributeSet_find(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttributeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlAttributeSet_find__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttributeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlAttributeSet_find__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttributeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlAttributeSet_find__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttributeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlAttributeSet_find__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlAttributeSet_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlAttributeSet::Find(char const *) const\n"
    "    TiXmlAttributeSet::Find(char const *)\n"
    "    TiXmlAttributeSet::Find(std::string const &) const\n"
    "    TiXmlAttributeSet::Find(std::string const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_TiXmlAttributeSet(void *obj) {
TiXmlAttributeSet *arg1 = (TiXmlAttributeSet *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlAttributeSet_methods[] = {
    {"add", _wrap_TiXmlAttributeSet_add}, 
    {"remove", _wrap_TiXmlAttributeSet_remove}, 
    {"first", _wrap_TiXmlAttributeSet_first}, 
    {"last", _wrap_TiXmlAttributeSet_last}, 
    {"find", _wrap_TiXmlAttributeSet_find}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlAttributeSet_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlAttributeSet_bases[] = {0};
static const char *swig_TiXmlAttributeSet_base_names[] = {0};
static swig_lua_class _wrap_class_TiXmlAttributeSet = { "TiXmlAttributeSet", &SWIGTYPE_p_TiXmlAttributeSet,_wrap_new_TiXmlAttributeSet, swig_delete_TiXmlAttributeSet, swig_TiXmlAttributeSet_methods, swig_TiXmlAttributeSet_attributes, swig_TiXmlAttributeSet_bases, swig_TiXmlAttributeSet_base_names };

static int _wrap_new_TiXmlElement__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::TiXmlElement",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("TiXmlElement::TiXmlElement",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (TiXmlElement *)new TiXmlElement((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlElement__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::TiXmlElement",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TiXmlElement::TiXmlElement",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (TiXmlElement *)new TiXmlElement((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlElement__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::TiXmlElement",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TiXmlElement::TiXmlElement",1,"TiXmlElement const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("new_TiXmlElement",1,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (TiXmlElement *)new TiXmlElement((TiXmlElement const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlElement(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TiXmlElement__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TiXmlElement__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TiXmlElement__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TiXmlElement'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlElement::TiXmlElement(char const *)\n"
    "    TiXmlElement::TiXmlElement(std::string const &)\n"
    "    TiXmlElement::TiXmlElement(TiXmlElement const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlElement_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::Attribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::Attribute",1,"TiXmlElement const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::Attribute",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)((TiXmlElement const *)arg1)->Attribute((char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::Attribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::Attribute",1,"TiXmlElement const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::Attribute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlElement::Attribute",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TiXmlElement_attribute",3,SWIGTYPE_p_int);
  }
  
  result = (char *)((TiXmlElement const *)arg1)->Attribute((char const *)arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_attribute__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::Attribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::Attribute",1,"TiXmlElement const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::Attribute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlElement::Attribute",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("TiXmlElement_attribute",3,SWIGTYPE_p_double);
  }
  
  result = (char *)((TiXmlElement const *)arg1)->Attribute((char const *)arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_query_int_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlElement::QueryIntAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::QueryIntAttribute",1,"TiXmlElement const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::QueryIntAttribute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlElement::QueryIntAttribute",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_query_int_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TiXmlElement_query_int_attribute",3,SWIGTYPE_p_int);
  }
  
  result = (int)((TiXmlElement const *)arg1)->QueryIntAttribute((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_query_double_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlElement::QueryDoubleAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::QueryDoubleAttribute",1,"TiXmlElement const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::QueryDoubleAttribute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlElement::QueryDoubleAttribute",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_query_double_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("TiXmlElement_query_double_attribute",3,SWIGTYPE_p_double);
  }
  
  result = (int)((TiXmlElement const *)arg1)->QueryDoubleAttribute((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_query_float_attribute(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlElement::QueryFloatAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::QueryFloatAttribute",1,"TiXmlElement const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::QueryFloatAttribute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlElement::QueryFloatAttribute",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_query_float_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TiXmlElement_query_float_attribute",3,SWIGTYPE_p_float);
  }
  
  result = (int)((TiXmlElement const *)arg1)->QueryFloatAttribute((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_set_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("TiXmlElement::SetAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::SetAttribute",1,"TiXmlElement *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::SetAttribute",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("TiXmlElement::SetAttribute",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_set_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->SetAttribute((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_attribute__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::Attribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::Attribute",1,"TiXmlElement const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlElement::Attribute",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (std::string *)((TiXmlElement const *)arg1)->Attribute((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_attribute__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  std::string temp2 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::Attribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::Attribute",1,"TiXmlElement const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlElement::Attribute",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlElement::Attribute",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TiXmlElement_attribute",3,SWIGTYPE_p_int);
  }
  
  result = (std::string *)((TiXmlElement const *)arg1)->Attribute((std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_attribute__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  std::string *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  std::string temp2 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::Attribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::Attribute",1,"TiXmlElement const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlElement::Attribute",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlElement::Attribute",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("TiXmlElement_attribute",3,SWIGTYPE_p_double);
  }
  
  result = (std::string *)((TiXmlElement const *)arg1)->Attribute((std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_attribute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlElement_attribute__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlElement_attribute__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlElement_attribute__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlElement_attribute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlElement_attribute__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlElement_attribute__SWIG_5(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlElement_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlElement::Attribute(char const *) const\n"
    "    TiXmlElement::Attribute(char const *,int *) const\n"
    "    TiXmlElement::Attribute(char const *,double *) const\n"
    "    TiXmlElement::Attribute(std::string const &) const\n"
    "    TiXmlElement::Attribute(std::string const &,int *) const\n"
    "    TiXmlElement::Attribute(std::string const &,double *) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlElement_query_int_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("TiXmlElement::QueryIntAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::QueryIntAttribute",1,"TiXmlElement const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlElement::QueryIntAttribute",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlElement::QueryIntAttribute",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_query_int_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TiXmlElement_query_int_attribute",3,SWIGTYPE_p_int);
  }
  
  result = (int)((TiXmlElement const *)arg1)->QueryIntAttribute((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_query_int_attribute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlElement_query_int_attribute__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlElement_query_int_attribute__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlElement_query_int_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlElement::QueryIntAttribute(char const *,int *) const\n"
    "    TiXmlElement::QueryIntAttribute(std::string const &,int *) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlElement_query_double_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  std::string *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("TiXmlElement::QueryDoubleAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::QueryDoubleAttribute",1,"TiXmlElement const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlElement::QueryDoubleAttribute",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlElement::QueryDoubleAttribute",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_query_double_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("TiXmlElement_query_double_attribute",3,SWIGTYPE_p_double);
  }
  
  result = (int)((TiXmlElement const *)arg1)->QueryDoubleAttribute((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_query_double_attribute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlElement_query_double_attribute__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlElement_query_double_attribute__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlElement_query_double_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlElement::QueryDoubleAttribute(char const *,double *) const\n"
    "    TiXmlElement::QueryDoubleAttribute(std::string const &,double *) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlElement_set_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("TiXmlElement::SetAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::SetAttribute",1,"TiXmlElement *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlElement::SetAttribute",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TiXmlElement::SetAttribute",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_set_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  (arg1)->SetAttribute((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_set_attribute__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TiXmlElement::SetAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::SetAttribute",1,"TiXmlElement *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlElement::SetAttribute",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlElement::SetAttribute",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_set_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetAttribute((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_set_attribute__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("TiXmlElement::SetAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::SetAttribute",1,"TiXmlElement *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::SetAttribute",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlElement::SetAttribute",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_set_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetAttribute((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_set_attribute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlElement_set_attribute__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlElement_set_attribute__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlElement_set_attribute__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlElement_set_attribute__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlElement_set_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlElement::SetAttribute(char const *,char const *)\n"
    "    TiXmlElement::SetAttribute(std::string const &,std::string const &)\n"
    "    TiXmlElement::SetAttribute(std::string const &,int)\n"
    "    TiXmlElement::SetAttribute(char const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlElement_set_double_attribute(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  SWIG_check_num_args("TiXmlElement::SetDoubleAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::SetDoubleAttribute",1,"TiXmlElement *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::SetDoubleAttribute",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlElement::SetDoubleAttribute",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_set_double_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->SetDoubleAttribute((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_remove_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("TiXmlElement::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::RemoveAttribute",1,"TiXmlElement *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::RemoveAttribute",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_remove_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->RemoveAttribute((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_remove_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TiXmlElement::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::RemoveAttribute",1,"TiXmlElement *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlElement::RemoveAttribute",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_remove_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->RemoveAttribute((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_remove_attribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlElement_remove_attribute__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlElement_remove_attribute__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlElement_remove_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlElement::RemoveAttribute(char const *)\n"
    "    TiXmlElement::RemoveAttribute(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlElement_first_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::FirstAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::FirstAttribute",1,"TiXmlElement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_first_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (TiXmlAttribute *)((TiXmlElement const *)arg1)->FirstAttribute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_first_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::FirstAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::FirstAttribute",1,"TiXmlElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_first_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (TiXmlAttribute *)(arg1)->FirstAttribute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_first_attribute(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlElement_first_attribute__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlElement_first_attribute__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlElement_first_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlElement::FirstAttribute() const\n"
    "    TiXmlElement::FirstAttribute()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlElement_last_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::LastAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::LastAttribute",1,"TiXmlElement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_last_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (TiXmlAttribute *)((TiXmlElement const *)arg1)->LastAttribute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_last_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  TiXmlAttribute *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::LastAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::LastAttribute",1,"TiXmlElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_last_attribute",1,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (TiXmlAttribute *)(arg1)->LastAttribute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlAttribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_last_attribute(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlElement_last_attribute__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlElement_last_attribute__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlElement_last_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlElement::LastAttribute() const\n"
    "    TiXmlElement::LastAttribute()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlElement_get_text(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::GetText",1,"TiXmlElement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_get_text",1,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (char *)((TiXmlElement const *)arg1)->GetText();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_clone(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::Clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::Clone",1,"TiXmlElement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_clone",1,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (TiXmlNode *)((TiXmlElement const *)arg1)->Clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_print(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("TiXmlElement::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::Print",1,"TiXmlElement const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlElement::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlElement::Print",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_print",1,SWIGTYPE_p_TiXmlElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlElement_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((TiXmlElement const *)arg1)->Print(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_parse(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlParsingData *arg3 = (TiXmlParsingData *) 0 ;
  TiXmlEncoding arg4 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::Parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::Parse",1,"TiXmlElement *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlElement::Parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlElement::Parse",3,"TiXmlParsingData *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TiXmlElement::Parse",4,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_parse",1,SWIGTYPE_p_TiXmlElement);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlElement_parse",3,SWIGTYPE_p_TiXmlParsingData);
  }
  
  arg4 = (TiXmlEncoding)(int)lua_tonumber(L, 4);
  result = (char *)(arg1)->Parse((char const *)arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_to_element__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::ToElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::ToElement",1,"TiXmlElement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_to_element",1,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (TiXmlElement *)((TiXmlElement const *)arg1)->ToElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_to_element__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlElement::ToElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::ToElement",1,"TiXmlElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_to_element",1,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (TiXmlElement *)(arg1)->ToElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlElement_to_element(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlElement_to_element__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlElement_to_element__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlElement_to_element'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlElement::ToElement() const\n"
    "    TiXmlElement::ToElement()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlElement_accept(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  TiXmlVisitor *arg2 = (TiXmlVisitor *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlElement::Accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlElement::Accept",1,"TiXmlElement const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlElement::Accept",2,"TiXmlVisitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlElement_accept",1,SWIGTYPE_p_TiXmlElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlElement_accept",2,SWIGTYPE_p_TiXmlVisitor);
  }
  
  result = (bool)((TiXmlElement const *)arg1)->Accept(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlElement(void *obj) {
TiXmlElement *arg1 = (TiXmlElement *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlElement_methods[] = {
    {"query_float_attribute", _wrap_TiXmlElement_query_float_attribute}, 
    {"attribute", _wrap_TiXmlElement_attribute}, 
    {"query_int_attribute", _wrap_TiXmlElement_query_int_attribute}, 
    {"query_double_attribute", _wrap_TiXmlElement_query_double_attribute}, 
    {"set_attribute", _wrap_TiXmlElement_set_attribute}, 
    {"set_double_attribute", _wrap_TiXmlElement_set_double_attribute}, 
    {"remove_attribute", _wrap_TiXmlElement_remove_attribute}, 
    {"first_attribute", _wrap_TiXmlElement_first_attribute}, 
    {"last_attribute", _wrap_TiXmlElement_last_attribute}, 
    {"get_text", _wrap_TiXmlElement_get_text}, 
    {"clone", _wrap_TiXmlElement_clone}, 
    {"print", _wrap_TiXmlElement_print}, 
    {"parse", _wrap_TiXmlElement_parse}, 
    {"to_element", _wrap_TiXmlElement_to_element}, 
    {"accept", _wrap_TiXmlElement_accept}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlElement_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlElement_bases[] = {0,0};
static const char *swig_TiXmlElement_base_names[] = {"TiXmlNode *",0};
static swig_lua_class _wrap_class_TiXmlElement = { "TiXmlElement", &SWIGTYPE_p_TiXmlElement,_wrap_new_TiXmlElement, swig_delete_TiXmlElement, swig_TiXmlElement_methods, swig_TiXmlElement_attributes, swig_TiXmlElement_bases, swig_TiXmlElement_base_names };

static int _wrap_new_TiXmlComment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlComment *result = 0 ;
  
  SWIG_check_num_args("TiXmlComment::TiXmlComment",0,0)
  result = (TiXmlComment *)new TiXmlComment();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlComment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlComment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  TiXmlComment *result = 0 ;
  
  SWIG_check_num_args("TiXmlComment::TiXmlComment",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("TiXmlComment::TiXmlComment",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (TiXmlComment *)new TiXmlComment((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlComment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlComment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlComment *arg1 = 0 ;
  TiXmlComment *result = 0 ;
  
  SWIG_check_num_args("TiXmlComment::TiXmlComment",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TiXmlComment::TiXmlComment",1,"TiXmlComment const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("new_TiXmlComment",1,SWIGTYPE_p_TiXmlComment);
  }
  
  result = (TiXmlComment *)new TiXmlComment((TiXmlComment const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlComment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlComment(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TiXmlComment__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlComment, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TiXmlComment__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TiXmlComment__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TiXmlComment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlComment::TiXmlComment()\n"
    "    TiXmlComment::TiXmlComment(char const *)\n"
    "    TiXmlComment::TiXmlComment(TiXmlComment const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlComment_clone(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlComment *arg1 = (TiXmlComment *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlComment::Clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlComment::Clone",1,"TiXmlComment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("TiXmlComment_clone",1,SWIGTYPE_p_TiXmlComment);
  }
  
  result = (TiXmlNode *)((TiXmlComment const *)arg1)->Clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlComment_print(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlComment *arg1 = (TiXmlComment *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("TiXmlComment::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlComment::Print",1,"TiXmlComment const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlComment::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlComment::Print",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("TiXmlComment_print",1,SWIGTYPE_p_TiXmlComment);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlComment_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((TiXmlComment const *)arg1)->Print(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlComment_parse(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlComment *arg1 = (TiXmlComment *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlParsingData *arg3 = (TiXmlParsingData *) 0 ;
  TiXmlEncoding arg4 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlComment::Parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlComment::Parse",1,"TiXmlComment *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlComment::Parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlComment::Parse",3,"TiXmlParsingData *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TiXmlComment::Parse",4,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("TiXmlComment_parse",1,SWIGTYPE_p_TiXmlComment);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlComment_parse",3,SWIGTYPE_p_TiXmlParsingData);
  }
  
  arg4 = (TiXmlEncoding)(int)lua_tonumber(L, 4);
  result = (char *)(arg1)->Parse((char const *)arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlComment_to_comment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlComment *arg1 = (TiXmlComment *) 0 ;
  TiXmlComment *result = 0 ;
  
  SWIG_check_num_args("TiXmlComment::ToComment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlComment::ToComment",1,"TiXmlComment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("TiXmlComment_to_comment",1,SWIGTYPE_p_TiXmlComment);
  }
  
  result = (TiXmlComment *)((TiXmlComment const *)arg1)->ToComment();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlComment,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlComment_to_comment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlComment *arg1 = (TiXmlComment *) 0 ;
  TiXmlComment *result = 0 ;
  
  SWIG_check_num_args("TiXmlComment::ToComment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlComment::ToComment",1,"TiXmlComment *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("TiXmlComment_to_comment",1,SWIGTYPE_p_TiXmlComment);
  }
  
  result = (TiXmlComment *)(arg1)->ToComment();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlComment,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlComment_to_comment(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlComment, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlComment_to_comment__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlComment, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlComment_to_comment__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlComment_to_comment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlComment::ToComment() const\n"
    "    TiXmlComment::ToComment()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlComment_accept(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlComment *arg1 = (TiXmlComment *) 0 ;
  TiXmlVisitor *arg2 = (TiXmlVisitor *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlComment::Accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlComment::Accept",1,"TiXmlComment const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlComment::Accept",2,"TiXmlVisitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("TiXmlComment_accept",1,SWIGTYPE_p_TiXmlComment);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlComment_accept",2,SWIGTYPE_p_TiXmlVisitor);
  }
  
  result = (bool)((TiXmlComment const *)arg1)->Accept(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlComment(void *obj) {
TiXmlComment *arg1 = (TiXmlComment *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlComment_methods[] = {
    {"clone", _wrap_TiXmlComment_clone}, 
    {"print", _wrap_TiXmlComment_print}, 
    {"parse", _wrap_TiXmlComment_parse}, 
    {"to_comment", _wrap_TiXmlComment_to_comment}, 
    {"accept", _wrap_TiXmlComment_accept}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlComment_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlComment_bases[] = {0,0};
static const char *swig_TiXmlComment_base_names[] = {"TiXmlNode *",0};
static swig_lua_class _wrap_class_TiXmlComment = { "TiXmlComment", &SWIGTYPE_p_TiXmlComment,_wrap_new_TiXmlComment, swig_delete_TiXmlComment, swig_TiXmlComment_methods, swig_TiXmlComment_attributes, swig_TiXmlComment_bases, swig_TiXmlComment_base_names };

static int _wrap_new_TiXmlText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  TiXmlText *result = 0 ;
  
  SWIG_check_num_args("TiXmlText::TiXmlText",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("TiXmlText::TiXmlText",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (TiXmlText *)new TiXmlText((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlText,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TiXmlText *result = 0 ;
  
  SWIG_check_num_args("TiXmlText::TiXmlText",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TiXmlText::TiXmlText",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (TiXmlText *)new TiXmlText((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlText,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlText__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlText *arg1 = 0 ;
  TiXmlText *result = 0 ;
  
  SWIG_check_num_args("TiXmlText::TiXmlText",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TiXmlText::TiXmlText",1,"TiXmlText const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("new_TiXmlText",1,SWIGTYPE_p_TiXmlText);
  }
  
  result = (TiXmlText *)new TiXmlText((TiXmlText const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlText,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlText(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TiXmlText__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TiXmlText__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TiXmlText__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TiXmlText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlText::TiXmlText(char const *)\n"
    "    TiXmlText::TiXmlText(std::string const &)\n"
    "    TiXmlText::TiXmlText(TiXmlText const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlText_print(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlText *arg1 = (TiXmlText *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("TiXmlText::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlText::Print",1,"TiXmlText const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlText::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlText::Print",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("TiXmlText_print",1,SWIGTYPE_p_TiXmlText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlText_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((TiXmlText const *)arg1)->Print(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlText_cdata(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlText *arg1 = (TiXmlText *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlText::CDATA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlText::CDATA",1,"TiXmlText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("TiXmlText_cdata",1,SWIGTYPE_p_TiXmlText);
  }
  
  result = (bool)((TiXmlText const *)arg1)->CDATA();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlText_set_cdata(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlText *arg1 = (TiXmlText *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("TiXmlText::SetCDATA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlText::SetCDATA",1,"TiXmlText *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("TiXmlText::SetCDATA",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("TiXmlText_set_cdata",1,SWIGTYPE_p_TiXmlText);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetCDATA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlText_parse(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlText *arg1 = (TiXmlText *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlParsingData *arg3 = (TiXmlParsingData *) 0 ;
  TiXmlEncoding arg4 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlText::Parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlText::Parse",1,"TiXmlText *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlText::Parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlText::Parse",3,"TiXmlParsingData *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TiXmlText::Parse",4,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("TiXmlText_parse",1,SWIGTYPE_p_TiXmlText);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlText_parse",3,SWIGTYPE_p_TiXmlParsingData);
  }
  
  arg4 = (TiXmlEncoding)(int)lua_tonumber(L, 4);
  result = (char *)(arg1)->Parse((char const *)arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlText_to_text__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlText *arg1 = (TiXmlText *) 0 ;
  TiXmlText *result = 0 ;
  
  SWIG_check_num_args("TiXmlText::ToText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlText::ToText",1,"TiXmlText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("TiXmlText_to_text",1,SWIGTYPE_p_TiXmlText);
  }
  
  result = (TiXmlText *)((TiXmlText const *)arg1)->ToText();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlText_to_text__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlText *arg1 = (TiXmlText *) 0 ;
  TiXmlText *result = 0 ;
  
  SWIG_check_num_args("TiXmlText::ToText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlText::ToText",1,"TiXmlText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("TiXmlText_to_text",1,SWIGTYPE_p_TiXmlText);
  }
  
  result = (TiXmlText *)(arg1)->ToText();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlText_to_text(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlText_to_text__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlText_to_text__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlText_to_text'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlText::ToText() const\n"
    "    TiXmlText::ToText()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlText_accept(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlText *arg1 = (TiXmlText *) 0 ;
  TiXmlVisitor *arg2 = (TiXmlVisitor *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlText::Accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlText::Accept",1,"TiXmlText const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlText::Accept",2,"TiXmlVisitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("TiXmlText_accept",1,SWIGTYPE_p_TiXmlText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlText_accept",2,SWIGTYPE_p_TiXmlVisitor);
  }
  
  result = (bool)((TiXmlText const *)arg1)->Accept(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlText(void *obj) {
TiXmlText *arg1 = (TiXmlText *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlText_methods[] = {
    {"print", _wrap_TiXmlText_print}, 
    {"cdata", _wrap_TiXmlText_cdata}, 
    {"set_cdata", _wrap_TiXmlText_set_cdata}, 
    {"parse", _wrap_TiXmlText_parse}, 
    {"to_text", _wrap_TiXmlText_to_text}, 
    {"accept", _wrap_TiXmlText_accept}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlText_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlText_bases[] = {0,0};
static const char *swig_TiXmlText_base_names[] = {"TiXmlNode *",0};
static swig_lua_class _wrap_class_TiXmlText = { "TiXmlText", &SWIGTYPE_p_TiXmlText,_wrap_new_TiXmlText, swig_delete_TiXmlText, swig_TiXmlText_methods, swig_TiXmlText_attributes, swig_TiXmlText_bases, swig_TiXmlText_base_names };

static int _wrap_new_TiXmlDeclaration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::TiXmlDeclaration",0,0)
  result = (TiXmlDeclaration *)new TiXmlDeclaration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDeclaration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlDeclaration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  TiXmlDeclaration *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::TiXmlDeclaration",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TiXmlDeclaration::TiXmlDeclaration",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlDeclaration::TiXmlDeclaration",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TiXmlDeclaration::TiXmlDeclaration",3,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (TiXmlDeclaration *)new TiXmlDeclaration((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDeclaration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlDeclaration__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  TiXmlDeclaration *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::TiXmlDeclaration",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("TiXmlDeclaration::TiXmlDeclaration",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlDeclaration::TiXmlDeclaration",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("TiXmlDeclaration::TiXmlDeclaration",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (TiXmlDeclaration *)new TiXmlDeclaration((char const *)arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDeclaration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlDeclaration__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = 0 ;
  TiXmlDeclaration *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::TiXmlDeclaration",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TiXmlDeclaration::TiXmlDeclaration",1,"TiXmlDeclaration const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("new_TiXmlDeclaration",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (TiXmlDeclaration *)new TiXmlDeclaration((TiXmlDeclaration const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDeclaration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlDeclaration(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TiXmlDeclaration__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDeclaration, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TiXmlDeclaration__SWIG_3(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TiXmlDeclaration__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TiXmlDeclaration__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TiXmlDeclaration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlDeclaration::TiXmlDeclaration()\n"
    "    TiXmlDeclaration::TiXmlDeclaration(std::string const &,std::string const &,std::string const &)\n"
    "    TiXmlDeclaration::TiXmlDeclaration(char const *,char const *,char const *)\n"
    "    TiXmlDeclaration::TiXmlDeclaration(TiXmlDeclaration const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlDeclaration_version(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::Version",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDeclaration::Version",1,"TiXmlDeclaration const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlDeclaration_version",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (char *)((TiXmlDeclaration const *)arg1)->Version();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDeclaration_encoding(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::Encoding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDeclaration::Encoding",1,"TiXmlDeclaration const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlDeclaration_encoding",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (char *)((TiXmlDeclaration const *)arg1)->Encoding();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDeclaration_standalone(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::Standalone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDeclaration::Standalone",1,"TiXmlDeclaration const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlDeclaration_standalone",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (char *)((TiXmlDeclaration const *)arg1)->Standalone();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDeclaration_clone(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::Clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDeclaration::Clone",1,"TiXmlDeclaration const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlDeclaration_clone",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (TiXmlNode *)((TiXmlDeclaration const *)arg1)->Clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDeclaration_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  std::string *arg4 = (std::string *) 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDeclaration::Print",1,"TiXmlDeclaration const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlDeclaration::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlDeclaration::Print",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TiXmlDeclaration::Print",4,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlDeclaration_print",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlDeclaration_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TiXmlDeclaration_print",4,SWIGTYPE_p_std__string);
  }
  
  ((TiXmlDeclaration const *)arg1)->Print(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDeclaration_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("TiXmlDeclaration::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDeclaration::Print",1,"TiXmlDeclaration const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlDeclaration::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlDeclaration::Print",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlDeclaration_print",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlDeclaration_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((TiXmlDeclaration const *)arg1)->Print(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDeclaration_print(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDeclaration, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlDeclaration_print__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDeclaration, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_TiXmlDeclaration_print__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlDeclaration_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlDeclaration::Print(FILE *,int,std::string *) const\n"
    "    TiXmlDeclaration::Print(FILE *,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlDeclaration_parse(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlParsingData *arg3 = (TiXmlParsingData *) 0 ;
  TiXmlEncoding arg4 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::Parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDeclaration::Parse",1,"TiXmlDeclaration *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlDeclaration::Parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlDeclaration::Parse",3,"TiXmlParsingData *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TiXmlDeclaration::Parse",4,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlDeclaration_parse",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlDeclaration_parse",3,SWIGTYPE_p_TiXmlParsingData);
  }
  
  arg4 = (TiXmlEncoding)(int)lua_tonumber(L, 4);
  result = (char *)(arg1)->Parse((char const *)arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDeclaration_to_declaration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  TiXmlDeclaration *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::ToDeclaration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDeclaration::ToDeclaration",1,"TiXmlDeclaration const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlDeclaration_to_declaration",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (TiXmlDeclaration *)((TiXmlDeclaration const *)arg1)->ToDeclaration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDeclaration,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDeclaration_to_declaration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  TiXmlDeclaration *result = 0 ;
  
  SWIG_check_num_args("TiXmlDeclaration::ToDeclaration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDeclaration::ToDeclaration",1,"TiXmlDeclaration *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlDeclaration_to_declaration",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (TiXmlDeclaration *)(arg1)->ToDeclaration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDeclaration,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDeclaration_to_declaration(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDeclaration, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlDeclaration_to_declaration__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDeclaration, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlDeclaration_to_declaration__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlDeclaration_to_declaration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlDeclaration::ToDeclaration() const\n"
    "    TiXmlDeclaration::ToDeclaration()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlDeclaration_accept(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  TiXmlVisitor *arg2 = (TiXmlVisitor *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDeclaration::Accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDeclaration::Accept",1,"TiXmlDeclaration const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlDeclaration::Accept",2,"TiXmlVisitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlDeclaration_accept",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlDeclaration_accept",2,SWIGTYPE_p_TiXmlVisitor);
  }
  
  result = (bool)((TiXmlDeclaration const *)arg1)->Accept(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlDeclaration(void *obj) {
TiXmlDeclaration *arg1 = (TiXmlDeclaration *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlDeclaration_methods[] = {
    {"version", _wrap_TiXmlDeclaration_version}, 
    {"encoding", _wrap_TiXmlDeclaration_encoding}, 
    {"standalone", _wrap_TiXmlDeclaration_standalone}, 
    {"clone", _wrap_TiXmlDeclaration_clone}, 
    {"print", _wrap_TiXmlDeclaration_print}, 
    {"parse", _wrap_TiXmlDeclaration_parse}, 
    {"to_declaration", _wrap_TiXmlDeclaration_to_declaration}, 
    {"accept", _wrap_TiXmlDeclaration_accept}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlDeclaration_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlDeclaration_bases[] = {0,0};
static const char *swig_TiXmlDeclaration_base_names[] = {"TiXmlNode *",0};
static swig_lua_class _wrap_class_TiXmlDeclaration = { "TiXmlDeclaration", &SWIGTYPE_p_TiXmlDeclaration,_wrap_new_TiXmlDeclaration, swig_delete_TiXmlDeclaration, swig_TiXmlDeclaration_methods, swig_TiXmlDeclaration_attributes, swig_TiXmlDeclaration_bases, swig_TiXmlDeclaration_base_names };

static int _wrap_new_TiXmlStylesheetReference__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *result = 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::TiXmlStylesheetReference",0,0)
  result = (TiXmlStylesheetReference *)new TiXmlStylesheetReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlStylesheetReference,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlStylesheetReference__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  TiXmlStylesheetReference *result = 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::TiXmlStylesheetReference",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::TiXmlStylesheetReference",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlStylesheetReference::TiXmlStylesheetReference",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (TiXmlStylesheetReference *)new TiXmlStylesheetReference((std::string const &)*arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlStylesheetReference,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlStylesheetReference__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlStylesheetReference *result = 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::TiXmlStylesheetReference",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::TiXmlStylesheetReference",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlStylesheetReference::TiXmlStylesheetReference",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (TiXmlStylesheetReference *)new TiXmlStylesheetReference((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlStylesheetReference,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlStylesheetReference__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = 0 ;
  TiXmlStylesheetReference *result = 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::TiXmlStylesheetReference",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::TiXmlStylesheetReference",1,"TiXmlStylesheetReference const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("new_TiXmlStylesheetReference",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  result = (TiXmlStylesheetReference *)new TiXmlStylesheetReference((TiXmlStylesheetReference const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlStylesheetReference,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlStylesheetReference(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TiXmlStylesheetReference__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlStylesheetReference, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TiXmlStylesheetReference__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TiXmlStylesheetReference__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TiXmlStylesheetReference__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TiXmlStylesheetReference'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlStylesheetReference::TiXmlStylesheetReference()\n"
    "    TiXmlStylesheetReference::TiXmlStylesheetReference(std::string const &,std::string const &)\n"
    "    TiXmlStylesheetReference::TiXmlStylesheetReference(char const *,char const *)\n"
    "    TiXmlStylesheetReference::TiXmlStylesheetReference(TiXmlStylesheetReference const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlStylesheetReference_type(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::Type",1,"TiXmlStylesheetReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_type",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  result = (char *)((TiXmlStylesheetReference const *)arg1)->Type();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlStylesheetReference_href(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::Href",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::Href",1,"TiXmlStylesheetReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_href",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  result = (char *)((TiXmlStylesheetReference const *)arg1)->Href();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlStylesheetReference_clone(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::Clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::Clone",1,"TiXmlStylesheetReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_clone",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  result = (TiXmlNode *)((TiXmlStylesheetReference const *)arg1)->Clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlStylesheetReference_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  std::string *arg4 = (std::string *) 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::Print",1,"TiXmlStylesheetReference const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlStylesheetReference::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlStylesheetReference::Print",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TiXmlStylesheetReference::Print",4,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_print",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_print",4,SWIGTYPE_p_std__string);
  }
  
  ((TiXmlStylesheetReference const *)arg1)->Print(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlStylesheetReference_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::Print",1,"TiXmlStylesheetReference const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlStylesheetReference::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlStylesheetReference::Print",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_print",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((TiXmlStylesheetReference const *)arg1)->Print(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlStylesheetReference_print(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlStylesheetReference, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlStylesheetReference_print__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlStylesheetReference, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_TiXmlStylesheetReference_print__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlStylesheetReference_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlStylesheetReference::Print(FILE *,int,std::string *) const\n"
    "    TiXmlStylesheetReference::Print(FILE *,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlStylesheetReference_parse(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlParsingData *arg3 = (TiXmlParsingData *) 0 ;
  TiXmlEncoding arg4 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::Parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::Parse",1,"TiXmlStylesheetReference *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlStylesheetReference::Parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlStylesheetReference::Parse",3,"TiXmlParsingData *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TiXmlStylesheetReference::Parse",4,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_parse",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_parse",3,SWIGTYPE_p_TiXmlParsingData);
  }
  
  arg4 = (TiXmlEncoding)(int)lua_tonumber(L, 4);
  result = (char *)(arg1)->Parse((char const *)arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlStylesheetReference_to_stylesheet_reference__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) 0 ;
  TiXmlStylesheetReference *result = 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::ToStylesheetReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::ToStylesheetReference",1,"TiXmlStylesheetReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_to_stylesheet_reference",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  result = (TiXmlStylesheetReference *)((TiXmlStylesheetReference const *)arg1)->ToStylesheetReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlStylesheetReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlStylesheetReference_to_stylesheet_reference__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) 0 ;
  TiXmlStylesheetReference *result = 0 ;
  
  SWIG_check_num_args("TiXmlStylesheetReference::ToStylesheetReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::ToStylesheetReference",1,"TiXmlStylesheetReference *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_to_stylesheet_reference",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  result = (TiXmlStylesheetReference *)(arg1)->ToStylesheetReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlStylesheetReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlStylesheetReference_to_stylesheet_reference(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlStylesheetReference, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlStylesheetReference_to_stylesheet_reference__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlStylesheetReference, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlStylesheetReference_to_stylesheet_reference__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlStylesheetReference_to_stylesheet_reference'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlStylesheetReference::ToStylesheetReference() const\n"
    "    TiXmlStylesheetReference::ToStylesheetReference()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlStylesheetReference_accept(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) 0 ;
  TiXmlVisitor *arg2 = (TiXmlVisitor *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlStylesheetReference::Accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlStylesheetReference::Accept",1,"TiXmlStylesheetReference const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlStylesheetReference::Accept",2,"TiXmlVisitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_accept",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlStylesheetReference_accept",2,SWIGTYPE_p_TiXmlVisitor);
  }
  
  result = (bool)((TiXmlStylesheetReference const *)arg1)->Accept(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlStylesheetReference(void *obj) {
TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlStylesheetReference_methods[] = {
    {"type", _wrap_TiXmlStylesheetReference_type}, 
    {"href", _wrap_TiXmlStylesheetReference_href}, 
    {"clone", _wrap_TiXmlStylesheetReference_clone}, 
    {"print", _wrap_TiXmlStylesheetReference_print}, 
    {"parse", _wrap_TiXmlStylesheetReference_parse}, 
    {"to_stylesheet_reference", _wrap_TiXmlStylesheetReference_to_stylesheet_reference}, 
    {"accept", _wrap_TiXmlStylesheetReference_accept}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlStylesheetReference_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlStylesheetReference_bases[] = {0,0};
static const char *swig_TiXmlStylesheetReference_base_names[] = {"TiXmlNode *",0};
static swig_lua_class _wrap_class_TiXmlStylesheetReference = { "TiXmlStylesheetReference", &SWIGTYPE_p_TiXmlStylesheetReference,_wrap_new_TiXmlStylesheetReference, swig_delete_TiXmlStylesheetReference, swig_TiXmlStylesheetReference_methods, swig_TiXmlStylesheetReference_attributes, swig_TiXmlStylesheetReference_bases, swig_TiXmlStylesheetReference_base_names };

static int _wrap_new_TiXmlUnknown__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlUnknown *result = 0 ;
  
  SWIG_check_num_args("TiXmlUnknown::TiXmlUnknown",0,0)
  result = (TiXmlUnknown *)new TiXmlUnknown();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlUnknown,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlUnknown__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlUnknown *arg1 = 0 ;
  TiXmlUnknown *result = 0 ;
  
  SWIG_check_num_args("TiXmlUnknown::TiXmlUnknown",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TiXmlUnknown::TiXmlUnknown",1,"TiXmlUnknown const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlUnknown,0))){
    SWIG_fail_ptr("new_TiXmlUnknown",1,SWIGTYPE_p_TiXmlUnknown);
  }
  
  result = (TiXmlUnknown *)new TiXmlUnknown((TiXmlUnknown const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlUnknown,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlUnknown(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TiXmlUnknown__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlUnknown, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TiXmlUnknown__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TiXmlUnknown'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlUnknown::TiXmlUnknown()\n"
    "    TiXmlUnknown::TiXmlUnknown(TiXmlUnknown const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlUnknown_clone(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlUnknown *arg1 = (TiXmlUnknown *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlUnknown::Clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlUnknown::Clone",1,"TiXmlUnknown const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlUnknown,0))){
    SWIG_fail_ptr("TiXmlUnknown_clone",1,SWIGTYPE_p_TiXmlUnknown);
  }
  
  result = (TiXmlNode *)((TiXmlUnknown const *)arg1)->Clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlUnknown_print(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlUnknown *arg1 = (TiXmlUnknown *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("TiXmlUnknown::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlUnknown::Print",1,"TiXmlUnknown const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlUnknown::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlUnknown::Print",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlUnknown,0))){
    SWIG_fail_ptr("TiXmlUnknown_print",1,SWIGTYPE_p_TiXmlUnknown);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlUnknown_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((TiXmlUnknown const *)arg1)->Print(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlUnknown_parse(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlUnknown *arg1 = (TiXmlUnknown *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlParsingData *arg3 = (TiXmlParsingData *) 0 ;
  TiXmlEncoding arg4 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlUnknown::Parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlUnknown::Parse",1,"TiXmlUnknown *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlUnknown::Parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlUnknown::Parse",3,"TiXmlParsingData *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TiXmlUnknown::Parse",4,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlUnknown,0))){
    SWIG_fail_ptr("TiXmlUnknown_parse",1,SWIGTYPE_p_TiXmlUnknown);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlUnknown_parse",3,SWIGTYPE_p_TiXmlParsingData);
  }
  
  arg4 = (TiXmlEncoding)(int)lua_tonumber(L, 4);
  result = (char *)(arg1)->Parse((char const *)arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlUnknown_to_unknown__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlUnknown *arg1 = (TiXmlUnknown *) 0 ;
  TiXmlUnknown *result = 0 ;
  
  SWIG_check_num_args("TiXmlUnknown::ToUnknown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlUnknown::ToUnknown",1,"TiXmlUnknown const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlUnknown,0))){
    SWIG_fail_ptr("TiXmlUnknown_to_unknown",1,SWIGTYPE_p_TiXmlUnknown);
  }
  
  result = (TiXmlUnknown *)((TiXmlUnknown const *)arg1)->ToUnknown();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlUnknown,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlUnknown_to_unknown__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlUnknown *arg1 = (TiXmlUnknown *) 0 ;
  TiXmlUnknown *result = 0 ;
  
  SWIG_check_num_args("TiXmlUnknown::ToUnknown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlUnknown::ToUnknown",1,"TiXmlUnknown *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlUnknown,0))){
    SWIG_fail_ptr("TiXmlUnknown_to_unknown",1,SWIGTYPE_p_TiXmlUnknown);
  }
  
  result = (TiXmlUnknown *)(arg1)->ToUnknown();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlUnknown,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlUnknown_to_unknown(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlUnknown, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlUnknown_to_unknown__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlUnknown, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlUnknown_to_unknown__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlUnknown_to_unknown'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlUnknown::ToUnknown() const\n"
    "    TiXmlUnknown::ToUnknown()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlUnknown_accept(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlUnknown *arg1 = (TiXmlUnknown *) 0 ;
  TiXmlVisitor *arg2 = (TiXmlVisitor *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlUnknown::Accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlUnknown::Accept",1,"TiXmlUnknown const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlUnknown::Accept",2,"TiXmlVisitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlUnknown,0))){
    SWIG_fail_ptr("TiXmlUnknown_accept",1,SWIGTYPE_p_TiXmlUnknown);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlUnknown_accept",2,SWIGTYPE_p_TiXmlVisitor);
  }
  
  result = (bool)((TiXmlUnknown const *)arg1)->Accept(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlUnknown(void *obj) {
TiXmlUnknown *arg1 = (TiXmlUnknown *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlUnknown_methods[] = {
    {"clone", _wrap_TiXmlUnknown_clone}, 
    {"print", _wrap_TiXmlUnknown_print}, 
    {"parse", _wrap_TiXmlUnknown_parse}, 
    {"to_unknown", _wrap_TiXmlUnknown_to_unknown}, 
    {"accept", _wrap_TiXmlUnknown_accept}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlUnknown_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlUnknown_bases[] = {0,0};
static const char *swig_TiXmlUnknown_base_names[] = {"TiXmlNode *",0};
static swig_lua_class _wrap_class_TiXmlUnknown = { "TiXmlUnknown", &SWIGTYPE_p_TiXmlUnknown,_wrap_new_TiXmlUnknown, swig_delete_TiXmlUnknown, swig_TiXmlUnknown_methods, swig_TiXmlUnknown_attributes, swig_TiXmlUnknown_bases, swig_TiXmlUnknown_base_names };

static int _wrap_new_TiXmlDocument__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::TiXmlDocument",0,0)
  result = (TiXmlDocument *)new TiXmlDocument();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDocument,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlDocument__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  TiXmlDocument *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::TiXmlDocument",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("TiXmlDocument::TiXmlDocument",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (TiXmlDocument *)new TiXmlDocument((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDocument,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlDocument__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  TiXmlDocument *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::TiXmlDocument",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TiXmlDocument::TiXmlDocument",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (TiXmlDocument *)new TiXmlDocument((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDocument,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlDocument__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = 0 ;
  TiXmlDocument *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::TiXmlDocument",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TiXmlDocument::TiXmlDocument",1,"TiXmlDocument const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("new_TiXmlDocument",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (TiXmlDocument *)new TiXmlDocument((TiXmlDocument const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDocument,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlDocument(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TiXmlDocument__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TiXmlDocument__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TiXmlDocument__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TiXmlDocument__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TiXmlDocument'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlDocument::TiXmlDocument()\n"
    "    TiXmlDocument::TiXmlDocument(char const *)\n"
    "    TiXmlDocument::TiXmlDocument(std::string const &)\n"
    "    TiXmlDocument::TiXmlDocument(TiXmlDocument const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlDocument_load_file__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  TiXmlEncoding arg2 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::LoadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::LoadFile",1,"TiXmlDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TiXmlDocument::LoadFile",2,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_load_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  arg2 = (TiXmlEncoding)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->LoadFile(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_load_file__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::LoadFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::LoadFile",1,"TiXmlDocument *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_load_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (bool)(arg1)->LoadFile();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_save_file__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::SaveFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::SaveFile",1,"TiXmlDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_save_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (bool)((TiXmlDocument const *)arg1)->SaveFile();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_load_file__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlEncoding arg3 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::LoadFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::LoadFile",1,"TiXmlDocument *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlDocument::LoadFile",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlDocument::LoadFile",3,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_load_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (TiXmlEncoding)(int)lua_tonumber(L, 3);
  result = (bool)(arg1)->LoadFile((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_load_file__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::LoadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::LoadFile",1,"TiXmlDocument *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlDocument::LoadFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_load_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->LoadFile((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_save_file__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::SaveFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::SaveFile",1,"TiXmlDocument const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlDocument::SaveFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_save_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((TiXmlDocument const *)arg1)->SaveFile((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_load_file__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  TiXmlEncoding arg3 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::LoadFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::LoadFile",1,"TiXmlDocument *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlDocument::LoadFile",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlDocument::LoadFile",3,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_load_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlDocument_load_file",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (TiXmlEncoding)(int)lua_tonumber(L, 3);
  result = (bool)(arg1)->LoadFile(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_load_file__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::LoadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::LoadFile",1,"TiXmlDocument *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlDocument::LoadFile",2,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_load_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlDocument_load_file",2,SWIGTYPE_p_FILE);
  }
  
  result = (bool)(arg1)->LoadFile(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_save_file__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::SaveFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::SaveFile",1,"TiXmlDocument const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlDocument::SaveFile",2,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_save_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlDocument_save_file",2,SWIGTYPE_p_FILE);
  }
  
  result = (bool)((TiXmlDocument const *)arg1)->SaveFile(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_load_file__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  TiXmlEncoding arg3 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::LoadFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::LoadFile",1,"TiXmlDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlDocument::LoadFile",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlDocument::LoadFile",3,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_load_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (TiXmlEncoding)(int)lua_tonumber(L, 3);
  result = (bool)(arg1)->LoadFile((std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_load_file__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::LoadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::LoadFile",1,"TiXmlDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlDocument::LoadFile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_load_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->LoadFile((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_load_file(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlDocument_load_file__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlDocument_load_file__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlDocument_load_file__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlDocument_load_file__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlDocument_load_file__SWIG_7(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlDocument_load_file__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlDocument_load_file__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlDocument_load_file__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlDocument_load_file'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlDocument::LoadFile(TiXmlEncoding)\n"
    "    TiXmlDocument::LoadFile()\n"
    "    TiXmlDocument::LoadFile(char const *,TiXmlEncoding)\n"
    "    TiXmlDocument::LoadFile(char const *)\n"
    "    TiXmlDocument::LoadFile(FILE *,TiXmlEncoding)\n"
    "    TiXmlDocument::LoadFile(FILE *)\n"
    "    TiXmlDocument::LoadFile(std::string const &,TiXmlEncoding)\n"
    "    TiXmlDocument::LoadFile(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlDocument_save_file__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::SaveFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::SaveFile",1,"TiXmlDocument const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlDocument::SaveFile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_save_file",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((TiXmlDocument const *)arg1)->SaveFile((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_save_file(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlDocument_save_file__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlDocument_save_file__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlDocument_save_file__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlDocument_save_file__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlDocument_save_file'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlDocument::SaveFile() const\n"
    "    TiXmlDocument::SaveFile(char const *) const\n"
    "    TiXmlDocument::SaveFile(FILE *) const\n"
    "    TiXmlDocument::SaveFile(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlDocument_parse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlParsingData *arg3 = (TiXmlParsingData *) 0 ;
  TiXmlEncoding arg4 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::Parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::Parse",1,"TiXmlDocument *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlDocument::Parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlDocument::Parse",3,"TiXmlParsingData *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TiXmlDocument::Parse",4,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_parse",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlDocument_parse",3,SWIGTYPE_p_TiXmlParsingData);
  }
  
  arg4 = (TiXmlEncoding)(int)lua_tonumber(L, 4);
  result = (char *)(arg1)->Parse((char const *)arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_parse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlParsingData *arg3 = (TiXmlParsingData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::Parse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::Parse",1,"TiXmlDocument *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlDocument::Parse",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlDocument::Parse",3,"TiXmlParsingData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_parse",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlDocument_parse",3,SWIGTYPE_p_TiXmlParsingData);
  }
  
  result = (char *)(arg1)->Parse((char const *)arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_parse__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::Parse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::Parse",1,"TiXmlDocument *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlDocument::Parse",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_parse",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)(arg1)->Parse((char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_parse(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlDocument_parse__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TiXmlParsingData, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlDocument_parse__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TiXmlParsingData, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TiXmlDocument_parse__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlDocument_parse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlDocument::Parse(char const *,TiXmlParsingData *,TiXmlEncoding)\n"
    "    TiXmlDocument::Parse(char const *,TiXmlParsingData *)\n"
    "    TiXmlDocument::Parse(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlDocument_root_element__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::RootElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::RootElement",1,"TiXmlDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_root_element",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (TiXmlElement *)((TiXmlDocument const *)arg1)->RootElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_root_element__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::RootElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::RootElement",1,"TiXmlDocument *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_root_element",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (TiXmlElement *)(arg1)->RootElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_root_element(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlDocument_root_element__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlDocument_root_element__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlDocument_root_element'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlDocument::RootElement() const\n"
    "    TiXmlDocument::RootElement()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlDocument_error(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::Error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::Error",1,"TiXmlDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_error",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (bool)((TiXmlDocument const *)arg1)->Error();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_error_desc(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::ErrorDesc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::ErrorDesc",1,"TiXmlDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_error_desc",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (char *)((TiXmlDocument const *)arg1)->ErrorDesc();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_error_id(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlDocument::ErrorId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::ErrorId",1,"TiXmlDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_error_id",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (int)((TiXmlDocument const *)arg1)->ErrorId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_error_row(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlDocument::ErrorRow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::ErrorRow",1,"TiXmlDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_error_row",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (int)((TiXmlDocument const *)arg1)->ErrorRow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_error_col(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlDocument::ErrorCol",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::ErrorCol",1,"TiXmlDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_error_col",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (int)((TiXmlDocument const *)arg1)->ErrorCol();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_set_tab_size(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TiXmlDocument::SetTabSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::SetTabSize",1,"TiXmlDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TiXmlDocument::SetTabSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_set_tab_size",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetTabSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_tab_size(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  int result;
  
  SWIG_check_num_args("TiXmlDocument::TabSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::TabSize",1,"TiXmlDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_tab_size",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (int)((TiXmlDocument const *)arg1)->TabSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_clear_error(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  
  SWIG_check_num_args("TiXmlDocument::ClearError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::ClearError",1,"TiXmlDocument *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_clear_error",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  (arg1)->ClearError();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  
  SWIG_check_num_args("TiXmlDocument::Print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::Print",1,"TiXmlDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_print",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  ((TiXmlDocument const *)arg1)->Print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("TiXmlDocument::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::Print",1,"TiXmlDocument const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlDocument::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlDocument::Print",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_print",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlDocument_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((TiXmlDocument const *)arg1)->Print(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_print__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  SWIG_check_num_args("TiXmlDocument::Print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::Print",1,"TiXmlDocument const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlDocument::Print",2,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_print",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("TiXmlDocument_print",2,SWIGTYPE_p_FILE);
  }
  
  ((TiXmlDocument const *)arg1)->Print(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_print(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlDocument_print__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlDocument_print__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlDocument_print__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlDocument_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlDocument::Print() const\n"
    "    TiXmlDocument::Print(FILE *,int) const\n"
    "    TiXmlDocument::Print(FILE *) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlDocument_set_error(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  TiXmlParsingData *arg4 = (TiXmlParsingData *) 0 ;
  TiXmlEncoding arg5 ;
  
  SWIG_check_num_args("TiXmlDocument::SetError",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::SetError",1,"TiXmlDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TiXmlDocument::SetError",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("TiXmlDocument::SetError",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TiXmlDocument::SetError",4,"TiXmlParsingData *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TiXmlDocument::SetError",5,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_set_error",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_TiXmlParsingData,0))){
    SWIG_fail_ptr("TiXmlDocument_set_error",4,SWIGTYPE_p_TiXmlParsingData);
  }
  
  arg5 = (TiXmlEncoding)(int)lua_tonumber(L, 5);
  (arg1)->SetError(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_to_document__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  TiXmlDocument *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::ToDocument",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::ToDocument",1,"TiXmlDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_to_document",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (TiXmlDocument *)((TiXmlDocument const *)arg1)->ToDocument();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDocument,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_to_document__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  TiXmlDocument *result = 0 ;
  
  SWIG_check_num_args("TiXmlDocument::ToDocument",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::ToDocument",1,"TiXmlDocument *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_to_document",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (TiXmlDocument *)(arg1)->ToDocument();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlDocument,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlDocument_to_document(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlDocument_to_document__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlDocument_to_document__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlDocument_to_document'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlDocument::ToDocument() const\n"
    "    TiXmlDocument::ToDocument()\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlDocument_accept(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  TiXmlVisitor *arg2 = (TiXmlVisitor *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlDocument::Accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlDocument::Accept",1,"TiXmlDocument const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TiXmlDocument::Accept",2,"TiXmlVisitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlDocument_accept",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlVisitor,0))){
    SWIG_fail_ptr("TiXmlDocument_accept",2,SWIGTYPE_p_TiXmlVisitor);
  }
  
  result = (bool)((TiXmlDocument const *)arg1)->Accept(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlDocument(void *obj) {
TiXmlDocument *arg1 = (TiXmlDocument *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlDocument_methods[] = {
    {"load_file", _wrap_TiXmlDocument_load_file}, 
    {"save_file", _wrap_TiXmlDocument_save_file}, 
    {"parse", _wrap_TiXmlDocument_parse}, 
    {"root_element", _wrap_TiXmlDocument_root_element}, 
    {"error", _wrap_TiXmlDocument_error}, 
    {"error_desc", _wrap_TiXmlDocument_error_desc}, 
    {"error_id", _wrap_TiXmlDocument_error_id}, 
    {"error_row", _wrap_TiXmlDocument_error_row}, 
    {"error_col", _wrap_TiXmlDocument_error_col}, 
    {"set_tab_size", _wrap_TiXmlDocument_set_tab_size}, 
    {"tab_size", _wrap_TiXmlDocument_tab_size}, 
    {"clear_error", _wrap_TiXmlDocument_clear_error}, 
    {"print", _wrap_TiXmlDocument_print}, 
    {"set_error", _wrap_TiXmlDocument_set_error}, 
    {"to_document", _wrap_TiXmlDocument_to_document}, 
    {"accept", _wrap_TiXmlDocument_accept}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlDocument_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlDocument_bases[] = {0,0};
static const char *swig_TiXmlDocument_base_names[] = {"TiXmlNode *",0};
static swig_lua_class _wrap_class_TiXmlDocument = { "TiXmlDocument", &SWIGTYPE_p_TiXmlDocument,_wrap_new_TiXmlDocument, swig_delete_TiXmlDocument, swig_TiXmlDocument_methods, swig_TiXmlDocument_attributes, swig_TiXmlDocument_bases, swig_TiXmlDocument_base_names };

static int _wrap_new_TiXmlHandle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlNode *arg1 = (TiXmlNode *) 0 ;
  TiXmlHandle *result = 0 ;
  
  SWIG_check_num_args("TiXmlHandle::TiXmlHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::TiXmlHandle",1,"TiXmlNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlNode,0))){
    SWIG_fail_ptr("new_TiXmlHandle",1,SWIGTYPE_p_TiXmlNode);
  }
  
  result = (TiXmlHandle *)new TiXmlHandle(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlHandle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = 0 ;
  TiXmlHandle *result = 0 ;
  
  SWIG_check_num_args("TiXmlHandle::TiXmlHandle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TiXmlHandle::TiXmlHandle",1,"TiXmlHandle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("new_TiXmlHandle",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = (TiXmlHandle *)new TiXmlHandle((TiXmlHandle const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TiXmlHandle(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TiXmlHandle__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TiXmlHandle__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TiXmlHandle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlHandle::TiXmlHandle(TiXmlNode *)\n"
    "    TiXmlHandle::TiXmlHandle(TiXmlHandle const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlHandle_first_child__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::FirstChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::FirstChild",1,"TiXmlHandle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_first_child",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = ((TiXmlHandle const *)arg1)->FirstChild();
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_first_child__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::FirstChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::FirstChild",1,"TiXmlHandle const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlHandle::FirstChild",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_first_child",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((TiXmlHandle const *)arg1)->FirstChild((char const *)arg2);
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_first_child_element__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::FirstChildElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::FirstChildElement",1,"TiXmlHandle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_first_child_element",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = ((TiXmlHandle const *)arg1)->FirstChildElement();
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_first_child_element__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::FirstChildElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::FirstChildElement",1,"TiXmlHandle const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlHandle::FirstChildElement",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_first_child_element",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((TiXmlHandle const *)arg1)->FirstChildElement((char const *)arg2);
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_child__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::Child",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::Child",1,"TiXmlHandle const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlHandle::Child",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlHandle::Child",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_child",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((TiXmlHandle const *)arg1)->Child((char const *)arg2,arg3);
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_child__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  int arg2 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::Child",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::Child",1,"TiXmlHandle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TiXmlHandle::Child",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_child",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((TiXmlHandle const *)arg1)->Child(arg2);
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_child_element__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::ChildElement",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::ChildElement",1,"TiXmlHandle const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlHandle::ChildElement",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlHandle::ChildElement",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_child_element",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((TiXmlHandle const *)arg1)->ChildElement((char const *)arg2,arg3);
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_child_element__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  int arg2 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::ChildElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::ChildElement",1,"TiXmlHandle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TiXmlHandle::ChildElement",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_child_element",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((TiXmlHandle const *)arg1)->ChildElement(arg2);
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_first_child__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::FirstChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::FirstChild",1,"TiXmlHandle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlHandle::FirstChild",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_first_child",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = ((TiXmlHandle const *)arg1)->FirstChild((std::string const &)*arg2);
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_first_child(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlHandle_first_child__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlHandle_first_child__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlHandle_first_child__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlHandle_first_child'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlHandle::FirstChild() const\n"
    "    TiXmlHandle::FirstChild(char const *) const\n"
    "    TiXmlHandle::FirstChild(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlHandle_first_child_element__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::FirstChildElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::FirstChildElement",1,"TiXmlHandle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlHandle::FirstChildElement",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_first_child_element",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = ((TiXmlHandle const *)arg1)->FirstChildElement((std::string const &)*arg2);
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_first_child_element(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TiXmlHandle_first_child_element__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlHandle_first_child_element__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlHandle_first_child_element__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlHandle_first_child_element'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlHandle::FirstChildElement() const\n"
    "    TiXmlHandle::FirstChildElement(char const *) const\n"
    "    TiXmlHandle::FirstChildElement(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlHandle_child__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string temp2 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::Child",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::Child",1,"TiXmlHandle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlHandle::Child",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlHandle::Child",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_child",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = ((TiXmlHandle const *)arg1)->Child((std::string const &)*arg2,arg3);
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_child(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlHandle_child__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlHandle_child__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlHandle_child__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlHandle_child'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlHandle::Child(char const *,int) const\n"
    "    TiXmlHandle::Child(int) const\n"
    "    TiXmlHandle::Child(std::string const &,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlHandle_child_element__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string temp2 ;
  SwigValueWrapper< TiXmlHandle > result;
  
  SWIG_check_num_args("TiXmlHandle::ChildElement",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::ChildElement",1,"TiXmlHandle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TiXmlHandle::ChildElement",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TiXmlHandle::ChildElement",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_child_element",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = ((TiXmlHandle const *)arg1)->ChildElement((std::string const &)*arg2,arg3);
  {
    TiXmlHandle * resultptr = new TiXmlHandle((const TiXmlHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlHandle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_child_element(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TiXmlHandle_child_element__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlHandle_child_element__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlHandle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TiXmlHandle_child_element__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlHandle_child_element'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlHandle::ChildElement(char const *,int) const\n"
    "    TiXmlHandle::ChildElement(int) const\n"
    "    TiXmlHandle::ChildElement(std::string const &,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlHandle_to_node(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlHandle::ToNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::ToNode",1,"TiXmlHandle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_to_node",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = (TiXmlNode *)((TiXmlHandle const *)arg1)->ToNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_to_element(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlHandle::ToElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::ToElement",1,"TiXmlHandle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_to_element",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = (TiXmlElement *)((TiXmlHandle const *)arg1)->ToElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_to_text(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  TiXmlText *result = 0 ;
  
  SWIG_check_num_args("TiXmlHandle::ToText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::ToText",1,"TiXmlHandle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_to_text",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = (TiXmlText *)((TiXmlHandle const *)arg1)->ToText();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_to_unknown(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  TiXmlUnknown *result = 0 ;
  
  SWIG_check_num_args("TiXmlHandle::ToUnknown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::ToUnknown",1,"TiXmlHandle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_to_unknown",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = (TiXmlUnknown *)((TiXmlHandle const *)arg1)->ToUnknown();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlUnknown,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_node(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  TiXmlNode *result = 0 ;
  
  SWIG_check_num_args("TiXmlHandle::Node",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::Node",1,"TiXmlHandle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_node",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = (TiXmlNode *)((TiXmlHandle const *)arg1)->Node();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_element(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  TiXmlElement *result = 0 ;
  
  SWIG_check_num_args("TiXmlHandle::Element",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::Element",1,"TiXmlHandle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_element",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = (TiXmlElement *)((TiXmlHandle const *)arg1)->Element();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_text(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  TiXmlText *result = 0 ;
  
  SWIG_check_num_args("TiXmlHandle::Text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::Text",1,"TiXmlHandle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_text",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = (TiXmlText *)((TiXmlHandle const *)arg1)->Text();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlHandle_unknown(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlHandle *arg1 = (TiXmlHandle *) 0 ;
  TiXmlUnknown *result = 0 ;
  
  SWIG_check_num_args("TiXmlHandle::Unknown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlHandle::Unknown",1,"TiXmlHandle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlHandle,0))){
    SWIG_fail_ptr("TiXmlHandle_unknown",1,SWIGTYPE_p_TiXmlHandle);
  }
  
  result = (TiXmlUnknown *)((TiXmlHandle const *)arg1)->Unknown();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlUnknown,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlHandle(void *obj) {
TiXmlHandle *arg1 = (TiXmlHandle *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlHandle_methods[] = {
    {"first_child", _wrap_TiXmlHandle_first_child}, 
    {"first_child_element", _wrap_TiXmlHandle_first_child_element}, 
    {"child", _wrap_TiXmlHandle_child}, 
    {"child_element", _wrap_TiXmlHandle_child_element}, 
    {"to_node", _wrap_TiXmlHandle_to_node}, 
    {"to_element", _wrap_TiXmlHandle_to_element}, 
    {"to_text", _wrap_TiXmlHandle_to_text}, 
    {"to_unknown", _wrap_TiXmlHandle_to_unknown}, 
    {"node", _wrap_TiXmlHandle_node}, 
    {"element", _wrap_TiXmlHandle_element}, 
    {"text", _wrap_TiXmlHandle_text}, 
    {"unknown", _wrap_TiXmlHandle_unknown}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlHandle_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlHandle_bases[] = {0};
static const char *swig_TiXmlHandle_base_names[] = {0};
static swig_lua_class _wrap_class_TiXmlHandle = { "TiXmlHandle", &SWIGTYPE_p_TiXmlHandle,_wrap_new_TiXmlHandle, swig_delete_TiXmlHandle, swig_TiXmlHandle_methods, swig_TiXmlHandle_attributes, swig_TiXmlHandle_bases, swig_TiXmlHandle_base_names };

static int _wrap_new_TiXmlPrinter(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *result = 0 ;
  
  SWIG_check_num_args("TiXmlPrinter::TiXmlPrinter",0,0)
  result = (TiXmlPrinter *)new TiXmlPrinter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TiXmlPrinter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_visit_enter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  TiXmlDocument *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlPrinter::VisitEnter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::VisitEnter",1,"TiXmlPrinter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlPrinter::VisitEnter",2,"TiXmlDocument const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit_enter",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit_enter",2,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (bool)(arg1)->VisitEnter((TiXmlDocument const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_visit_exit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  TiXmlDocument *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlPrinter::VisitExit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::VisitExit",1,"TiXmlPrinter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlPrinter::VisitExit",2,"TiXmlDocument const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit_exit",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit_exit",2,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (bool)(arg1)->VisitExit((TiXmlDocument const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_visit_enter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  TiXmlElement *arg2 = 0 ;
  TiXmlAttribute *arg3 = (TiXmlAttribute *) 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlPrinter::VisitEnter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::VisitEnter",1,"TiXmlPrinter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlPrinter::VisitEnter",2,"TiXmlElement const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TiXmlPrinter::VisitEnter",3,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit_enter",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit_enter",2,SWIGTYPE_p_TiXmlElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit_enter",3,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (bool)(arg1)->VisitEnter((TiXmlElement const &)*arg2,(TiXmlAttribute const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_visit_enter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlPrinter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlPrinter_visit_enter__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlPrinter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TiXmlPrinter_visit_enter__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlPrinter_visit_enter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlPrinter::VisitEnter(TiXmlDocument const &)\n"
    "    TiXmlPrinter::VisitEnter(TiXmlElement const &,TiXmlAttribute const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlPrinter_visit_exit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  TiXmlElement *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlPrinter::VisitExit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::VisitExit",1,"TiXmlPrinter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlPrinter::VisitExit",2,"TiXmlElement const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit_exit",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit_exit",2,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (bool)(arg1)->VisitExit((TiXmlElement const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_visit_exit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlPrinter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlPrinter_visit_exit__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlPrinter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlPrinter_visit_exit__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlPrinter_visit_exit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlPrinter::VisitExit(TiXmlDocument const &)\n"
    "    TiXmlPrinter::VisitExit(TiXmlElement const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlPrinter_visit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  TiXmlDeclaration *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlPrinter::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::Visit",1,"TiXmlPrinter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlPrinter::Visit",2,"TiXmlDeclaration const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit",2,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (bool)(arg1)->Visit((TiXmlDeclaration const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_visit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  TiXmlText *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlPrinter::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::Visit",1,"TiXmlPrinter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlPrinter::Visit",2,"TiXmlText const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit",2,SWIGTYPE_p_TiXmlText);
  }
  
  result = (bool)(arg1)->Visit((TiXmlText const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_visit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  TiXmlComment *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlPrinter::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::Visit",1,"TiXmlPrinter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlPrinter::Visit",2,"TiXmlComment const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit",2,SWIGTYPE_p_TiXmlComment);
  }
  
  result = (bool)(arg1)->Visit((TiXmlComment const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_visit__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  TiXmlUnknown *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlPrinter::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::Visit",1,"TiXmlPrinter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlPrinter::Visit",2,"TiXmlUnknown const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlUnknown,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit",2,SWIGTYPE_p_TiXmlUnknown);
  }
  
  result = (bool)(arg1)->Visit((TiXmlUnknown const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_visit__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  TiXmlStylesheetReference *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TiXmlPrinter::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::Visit",1,"TiXmlPrinter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TiXmlPrinter::Visit",2,"TiXmlStylesheetReference const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("TiXmlPrinter_visit",2,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  result = (bool)(arg1)->Visit((TiXmlStylesheetReference const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_visit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlPrinter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlDeclaration, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlPrinter_visit__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlPrinter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlText, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlPrinter_visit__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlPrinter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlComment, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlPrinter_visit__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlPrinter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlUnknown, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlPrinter_visit__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlPrinter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlStylesheetReference, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TiXmlPrinter_visit__SWIG_4(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TiXmlPrinter_visit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TiXmlPrinter::Visit(TiXmlDeclaration const &)\n"
    "    TiXmlPrinter::Visit(TiXmlText const &)\n"
    "    TiXmlPrinter::Visit(TiXmlComment const &)\n"
    "    TiXmlPrinter::Visit(TiXmlUnknown const &)\n"
    "    TiXmlPrinter::Visit(TiXmlStylesheetReference const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TiXmlPrinter_set_indent(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("TiXmlPrinter::SetIndent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::SetIndent",1,"TiXmlPrinter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlPrinter::SetIndent",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_set_indent",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetIndent((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_indent(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlPrinter::Indent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::Indent",1,"TiXmlPrinter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_indent",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  result = (char *)(arg1)->Indent();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_set_line_break(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("TiXmlPrinter::SetLineBreak",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::SetLineBreak",1,"TiXmlPrinter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TiXmlPrinter::SetLineBreak",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_set_line_break",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetLineBreak((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_line_break(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlPrinter::LineBreak",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::LineBreak",1,"TiXmlPrinter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_line_break",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  result = (char *)(arg1)->LineBreak();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_set_stream_printing(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  
  SWIG_check_num_args("TiXmlPrinter::SetStreamPrinting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::SetStreamPrinting",1,"TiXmlPrinter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_set_stream_printing",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  (arg1)->SetStreamPrinting();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_cstr(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TiXmlPrinter::CStr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::CStr",1,"TiXmlPrinter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_cstr",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  result = (char *)(arg1)->CStr();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_size(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("TiXmlPrinter::Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::Size",1,"TiXmlPrinter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_size",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  result = (arg1)->Size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TiXmlPrinter_str(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlPrinter *arg1 = (TiXmlPrinter *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TiXmlPrinter::Str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TiXmlPrinter::Str",1,"TiXmlPrinter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlPrinter,0))){
    SWIG_fail_ptr("TiXmlPrinter_str",1,SWIGTYPE_p_TiXmlPrinter);
  }
  
  result = (std::string *) &(arg1)->Str();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TiXmlPrinter(void *obj) {
TiXmlPrinter *arg1 = (TiXmlPrinter *) obj;
delete arg1;
}
static swig_lua_method swig_TiXmlPrinter_methods[] = {
    {"visit_enter", _wrap_TiXmlPrinter_visit_enter}, 
    {"visit_exit", _wrap_TiXmlPrinter_visit_exit}, 
    {"visit", _wrap_TiXmlPrinter_visit}, 
    {"set_indent", _wrap_TiXmlPrinter_set_indent}, 
    {"indent", _wrap_TiXmlPrinter_indent}, 
    {"set_line_break", _wrap_TiXmlPrinter_set_line_break}, 
    {"line_break", _wrap_TiXmlPrinter_line_break}, 
    {"set_stream_printing", _wrap_TiXmlPrinter_set_stream_printing}, 
    {"cstr", _wrap_TiXmlPrinter_cstr}, 
    {"size", _wrap_TiXmlPrinter_size}, 
    {"str", _wrap_TiXmlPrinter_str}, 
    {0,0}
};
static swig_lua_attribute swig_TiXmlPrinter_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TiXmlPrinter_bases[] = {0,0};
static const char *swig_TiXmlPrinter_base_names[] = {"TiXmlVisitor *",0};
static swig_lua_class _wrap_class_TiXmlPrinter = { "TiXmlPrinter", &SWIGTYPE_p_TiXmlPrinter,_wrap_new_TiXmlPrinter, swig_delete_TiXmlPrinter, swig_TiXmlPrinter_methods, swig_TiXmlPrinter_attributes, swig_TiXmlPrinter_bases, swig_TiXmlPrinter_base_names };

static int _wrap_Base_to_string(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Base *arg1 = (ticpp::Base *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Base::ToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Base::ToString",1,"ticpp::Base const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Base::ToString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Base,0))){
    SWIG_fail_ptr("Base_to_string",1,SWIGTYPE_p_ticpp__Base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = ((ticpp::Base const *)arg1)->ToString((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base_from_string(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Base *arg1 = (ticpp::Base *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = (std::string *) 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Base::FromString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Base::FromString",1,"ticpp::Base const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Base::FromString",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ticpp::Base::FromString",3,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Base,0))){
    SWIG_fail_ptr("Base_from_string",1,SWIGTYPE_p_ticpp__Base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Base_from_string",3,SWIGTYPE_p_std__string);
  }
  
  ((ticpp::Base const *)arg1)->FromString((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base_row(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Base *arg1 = (ticpp::Base *) 0 ;
  int result;
  
  SWIG_check_num_args("ticpp::Base::Row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Base::Row",1,"ticpp::Base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Base,0))){
    SWIG_fail_ptr("Base_row",1,SWIGTYPE_p_ticpp__Base);
  }
  
  result = (int)((ticpp::Base const *)arg1)->Row();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base_column(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Base *arg1 = (ticpp::Base *) 0 ;
  int result;
  
  SWIG_check_num_args("ticpp::Base::Column",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Base::Column",1,"ticpp::Base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Base,0))){
    SWIG_fail_ptr("Base_column",1,SWIGTYPE_p_ticpp__Base);
  }
  
  result = (int)((ticpp::Base const *)arg1)->Column();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base___eq(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Base *arg1 = (ticpp::Base *) 0 ;
  ticpp::Base *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Base::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Base::operator ==",1,"ticpp::Base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Base::operator ==",2,"ticpp::Base const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Base,0))){
    SWIG_fail_ptr("Base___eq",1,SWIGTYPE_p_ticpp__Base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Base,0))){
    SWIG_fail_ptr("Base___eq",2,SWIGTYPE_p_ticpp__Base);
  }
  
  result = (bool)((ticpp::Base const *)arg1)->operator ==((ticpp::Base const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base_build_detailed_error_string(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Base *arg1 = (ticpp::Base *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Base::BuildDetailedErrorString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Base::BuildDetailedErrorString",1,"ticpp::Base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Base,0))){
    SWIG_fail_ptr("Base_build_detailed_error_string",1,SWIGTYPE_p_ticpp__Base);
  }
  
  result = ((ticpp::Base const *)arg1)->BuildDetailedErrorString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Base(void *obj) {
ticpp::Base *arg1 = (ticpp::Base *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_Base_methods[] = {
    {"to_string", _wrap_Base_to_string}, 
    {"from_string", _wrap_Base_from_string}, 
    {"row", _wrap_Base_row}, 
    {"column", _wrap_Base_column}, 
    {"__eq", _wrap_Base___eq}, 
    {"build_detailed_error_string", _wrap_Base_build_detailed_error_string}, 
    {0,0}
};
static swig_lua_attribute swig_ticpp_Base_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_Base_bases[] = {0};
static const char *swig_ticpp_Base_base_names[] = {0};
static swig_lua_class _wrap_class_ticpp_Base = { "Base", &SWIGTYPE_p_ticpp__Base,0, swig_delete_Base, swig_ticpp_Base_methods, swig_ticpp_Base_attributes, swig_ticpp_Base_bases, swig_ticpp_Base_base_names };

static int _wrap_new_Attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Attribute::Attribute",0,0)
  result = (ticpp::Attribute *)new ticpp::Attribute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Attribute::Attribute",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ticpp::Attribute::Attribute",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Attribute::Attribute",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (ticpp::Attribute *)new ticpp::Attribute((std::string const &)*arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Attribute__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlAttribute *arg1 = (TiXmlAttribute *) 0 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Attribute::Attribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Attribute::Attribute",1,"TiXmlAttribute *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("new_Attribute",1,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (ticpp::Attribute *)new ticpp::Attribute(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_value(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *arg1 = (ticpp::Attribute *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Attribute::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Attribute::Value",1,"ticpp::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_value",1,SWIGTYPE_p_ticpp__Attribute);
  }
  
  result = ((ticpp::Attribute const *)arg1)->Value();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_name(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *arg1 = (ticpp::Attribute *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Attribute::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Attribute::Name",1,"ticpp::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_name",1,SWIGTYPE_p_ticpp__Attribute);
  }
  
  result = ((ticpp::Attribute const *)arg1)->Name();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Attribute__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *arg1 = 0 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Attribute::Attribute",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ticpp::Attribute::Attribute",1,"ticpp::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("new_Attribute",1,SWIGTYPE_p_ticpp__Attribute);
  }
  
  result = (ticpp::Attribute *)new ticpp::Attribute((ticpp::Attribute const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Attribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Attribute__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Attribute__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Attribute__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Attribute__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Attribute::Attribute()\n"
    "    ticpp::Attribute::Attribute(std::string const &,std::string const &)\n"
    "    ticpp::Attribute::Attribute(TiXmlAttribute *)\n"
    "    ticpp::Attribute::Attribute(ticpp::Attribute const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_next__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *arg1 = (ticpp::Attribute *) 0 ;
  bool arg2 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Attribute::Next",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Attribute::Next",1,"ticpp::Attribute const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Attribute::Next",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_next",1,SWIGTYPE_p_ticpp__Attribute);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Attribute *)((ticpp::Attribute const *)arg1)->Next(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_next__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *arg1 = (ticpp::Attribute *) 0 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Attribute::Next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Attribute::Next",1,"ticpp::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_next",1,SWIGTYPE_p_ticpp__Attribute);
  }
  
  result = (ticpp::Attribute *)((ticpp::Attribute const *)arg1)->Next();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_next(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_next__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_next__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_next'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Attribute::Next(bool) const\n"
    "    ticpp::Attribute::Next() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_previous__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *arg1 = (ticpp::Attribute *) 0 ;
  bool arg2 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Attribute::Previous",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Attribute::Previous",1,"ticpp::Attribute const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Attribute::Previous",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_previous",1,SWIGTYPE_p_ticpp__Attribute);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Attribute *)((ticpp::Attribute const *)arg1)->Previous(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_previous__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *arg1 = (ticpp::Attribute *) 0 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Attribute::Previous",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Attribute::Previous",1,"ticpp::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_previous",1,SWIGTYPE_p_ticpp__Attribute);
  }
  
  result = (ticpp::Attribute *)((ticpp::Attribute const *)arg1)->Previous();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_previous(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_previous__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_previous__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_previous'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Attribute::Previous(bool) const\n"
    "    ticpp::Attribute::Previous() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_iterate_next(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *arg1 = (ticpp::Attribute *) 0 ;
  std::string *arg2 = 0 ;
  ticpp::Attribute **arg3 = (ticpp::Attribute **) 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Attribute::IterateNext",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Attribute::IterateNext",1,"ticpp::Attribute const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Attribute::IterateNext",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ticpp::Attribute::IterateNext",3,"ticpp::Attribute **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_iterate_next",1,SWIGTYPE_p_ticpp__Attribute);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_iterate_next",3,SWIGTYPE_p_p_ticpp__Attribute);
  }
  
  ((ticpp::Attribute const *)arg1)->IterateNext((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_iterate_previous(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *arg1 = (ticpp::Attribute *) 0 ;
  std::string *arg2 = 0 ;
  ticpp::Attribute **arg3 = (ticpp::Attribute **) 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Attribute::IteratePrevious",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Attribute::IteratePrevious",1,"ticpp::Attribute const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Attribute::IteratePrevious",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ticpp::Attribute::IteratePrevious",3,"ticpp::Attribute **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_iterate_previous",1,SWIGTYPE_p_ticpp__Attribute);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_iterate_previous",3,SWIGTYPE_p_p_ticpp__Attribute);
  }
  
  ((ticpp::Attribute const *)arg1)->IteratePrevious((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_print(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Attribute *arg1 = (ticpp::Attribute *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ticpp::Attribute::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Attribute::Print",1,"ticpp::Attribute const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ticpp::Attribute::Print",2,"FILE *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ticpp::Attribute::Print",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Attribute_print",1,SWIGTYPE_p_ticpp__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("Attribute_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((ticpp::Attribute const *)arg1)->Print(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Attribute(void *obj) {
ticpp::Attribute *arg1 = (ticpp::Attribute *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_Attribute_methods[] = {
    {"value", _wrap_Attribute_value}, 
    {"name", _wrap_Attribute_name}, 
    {"next", _wrap_Attribute_next}, 
    {"previous", _wrap_Attribute_previous}, 
    {"iterate_next", _wrap_Attribute_iterate_next}, 
    {"iterate_previous", _wrap_Attribute_iterate_previous}, 
    {"print", _wrap_Attribute_print}, 
    {0,0}
};
static swig_lua_attribute swig_ticpp_Attribute_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_Attribute_bases[] = {0,0};
static const char *swig_ticpp_Attribute_base_names[] = {"ticpp::Base *",0};
static swig_lua_class _wrap_class_ticpp_Attribute = { "Attribute", &SWIGTYPE_p_ticpp__Attribute,_wrap_new_Attribute, swig_delete_Attribute, swig_ticpp_Attribute_methods, swig_ticpp_Attribute_attributes, swig_ticpp_Attribute_bases, swig_ticpp_Attribute_base_names };

static int _wrap_Node_value(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Node::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::Value",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_value",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = ((ticpp::Node const *)arg1)->Value();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_clear(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  
  SWIG_check_num_args("ticpp::Node::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::Clear",1,"ticpp::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_clear",1,SWIGTYPE_p_ticpp__Node);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_parent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  bool arg2 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::Parent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::Parent",1,"ticpp::Node const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Node::Parent",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_parent",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->Parent(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_parent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::Parent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::Parent",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_parent",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->Parent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_parent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_parent__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_parent__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_parent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Node::Parent(bool) const\n"
    "    ticpp::Node::Parent() const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_first_child__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  bool arg2 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::FirstChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::FirstChild",1,"ticpp::Node const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Node::FirstChild",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_first_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->FirstChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_first_child__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::FirstChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::FirstChild",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_first_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->FirstChild();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_first_child__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::FirstChild",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::FirstChild",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::FirstChild",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ticpp::Node::FirstChild",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_first_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->FirstChild((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_first_child__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::FirstChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::FirstChild",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::FirstChild",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_first_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->FirstChild((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_first_child(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_first_child__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_first_child__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_first_child__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_first_child__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_first_child'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Node::FirstChild(bool) const\n"
    "    ticpp::Node::FirstChild() const\n"
    "    ticpp::Node::FirstChild(char const *,bool) const\n"
    "    ticpp::Node::FirstChild(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_last_child__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  bool arg2 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::LastChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::LastChild",1,"ticpp::Node const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Node::LastChild",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_last_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->LastChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_last_child__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::LastChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::LastChild",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_last_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->LastChild();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_last_child__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::LastChild",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::LastChild",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::LastChild",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ticpp::Node::LastChild",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_last_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->LastChild((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_last_child__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::LastChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::LastChild",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::LastChild",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_last_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->LastChild((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_last_child(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_last_child__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_last_child__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_last_child__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_last_child__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_last_child'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Node::LastChild(bool) const\n"
    "    ticpp::Node::LastChild() const\n"
    "    ticpp::Node::LastChild(char const *,bool) const\n"
    "    ticpp::Node::LastChild(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_iterate_children__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *arg2 = (ticpp::Node *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::IterateChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::IterateChildren",1,"ticpp::Node const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ticpp::Node::IterateChildren",2,"ticpp::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_iterate_children",1,SWIGTYPE_p_ticpp__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_iterate_children",2,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->IterateChildren(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_iterate_children__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  std::string *arg2 = 0 ;
  ticpp::Node *arg3 = (ticpp::Node *) 0 ;
  std::string temp2 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::IterateChildren",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::IterateChildren",1,"ticpp::Node const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Node::IterateChildren",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ticpp::Node::IterateChildren",3,"ticpp::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_iterate_children",1,SWIGTYPE_p_ticpp__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_iterate_children",3,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->IterateChildren((std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_iterate_children(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_iterate_children__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_iterate_children__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_iterate_children'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Node::IterateChildren(ticpp::Node *) const\n"
    "    ticpp::Node::IterateChildren(std::string const &,ticpp::Node *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_insert_end_child(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *arg2 = 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::InsertEndChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::InsertEndChild",1,"ticpp::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Node::InsertEndChild",2,"ticpp::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_insert_end_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_insert_end_child",2,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)(arg1)->InsertEndChild(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_link_end_child(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *arg2 = (ticpp::Node *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::LinkEndChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::LinkEndChild",1,"ticpp::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ticpp::Node::LinkEndChild",2,"ticpp::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_link_end_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_link_end_child",2,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)(arg1)->LinkEndChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_insert_before_child(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *arg2 = (ticpp::Node *) 0 ;
  ticpp::Node *arg3 = 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::InsertBeforeChild",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::InsertBeforeChild",1,"ticpp::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ticpp::Node::InsertBeforeChild",2,"ticpp::Node *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ticpp::Node::InsertBeforeChild",3,"ticpp::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_insert_before_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_insert_before_child",2,SWIGTYPE_p_ticpp__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_insert_before_child",3,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)(arg1)->InsertBeforeChild(arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_insert_after_child(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *arg2 = (ticpp::Node *) 0 ;
  ticpp::Node *arg3 = 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::InsertAfterChild",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::InsertAfterChild",1,"ticpp::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ticpp::Node::InsertAfterChild",2,"ticpp::Node *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ticpp::Node::InsertAfterChild",3,"ticpp::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_insert_after_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_insert_after_child",2,SWIGTYPE_p_ticpp__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_insert_after_child",3,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)(arg1)->InsertAfterChild(arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_replace_child(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *arg2 = (ticpp::Node *) 0 ;
  ticpp::Node *arg3 = 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::ReplaceChild",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::ReplaceChild",1,"ticpp::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ticpp::Node::ReplaceChild",2,"ticpp::Node *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ticpp::Node::ReplaceChild",3,"ticpp::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_replace_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_replace_child",2,SWIGTYPE_p_ticpp__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_replace_child",3,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)(arg1)->ReplaceChild(arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_remove_child(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *arg2 = (ticpp::Node *) 0 ;
  
  SWIG_check_num_args("ticpp::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::RemoveChild",1,"ticpp::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ticpp::Node::RemoveChild",2,"ticpp::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_remove_child",1,SWIGTYPE_p_ticpp__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_remove_child",2,SWIGTYPE_p_ticpp__Node);
  }
  
  (arg1)->RemoveChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_previous_sibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  bool arg2 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::PreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::PreviousSibling",1,"ticpp::Node const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Node::PreviousSibling",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_previous_sibling",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->PreviousSibling(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_previous_sibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::PreviousSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::PreviousSibling",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_previous_sibling",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->PreviousSibling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_previous_sibling__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::PreviousSibling",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::PreviousSibling",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::PreviousSibling",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ticpp::Node::PreviousSibling",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_previous_sibling",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->PreviousSibling((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_previous_sibling__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::PreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::PreviousSibling",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::PreviousSibling",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_previous_sibling",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->PreviousSibling((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_previous_sibling(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_previous_sibling__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_previous_sibling__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_previous_sibling__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_previous_sibling__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_previous_sibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Node::PreviousSibling(bool) const\n"
    "    ticpp::Node::PreviousSibling() const\n"
    "    ticpp::Node::PreviousSibling(char const *,bool) const\n"
    "    ticpp::Node::PreviousSibling(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_next_sibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  bool arg2 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::NextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::NextSibling",1,"ticpp::Node const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Node::NextSibling",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_next_sibling",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->NextSibling(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_next_sibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::NextSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::NextSibling",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_next_sibling",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->NextSibling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_next_sibling__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::NextSibling",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::NextSibling",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::NextSibling",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ticpp::Node::NextSibling",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_next_sibling",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->NextSibling((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_next_sibling__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  ticpp::Node *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::NextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::NextSibling",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::NextSibling",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_next_sibling",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ticpp::Node *)((ticpp::Node const *)arg1)->NextSibling((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_next_sibling(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_next_sibling__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_next_sibling__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_next_sibling__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_next_sibling__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_next_sibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Node::NextSibling(bool) const\n"
    "    ticpp::Node::NextSibling() const\n"
    "    ticpp::Node::NextSibling(char const *,bool) const\n"
    "    ticpp::Node::NextSibling(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_iterate_first(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  std::string *arg2 = 0 ;
  ticpp::Attribute **arg3 = (ticpp::Attribute **) 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Node::IterateFirst",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::IterateFirst",1,"ticpp::Node const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Node::IterateFirst",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ticpp::Node::IterateFirst",3,"ticpp::Attribute **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_iterate_first",1,SWIGTYPE_p_ticpp__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Node_iterate_first",3,SWIGTYPE_p_p_ticpp__Attribute);
  }
  
  ((ticpp::Node const *)arg1)->IterateFirst((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_next_sibling_element__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  bool arg2 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::NextSiblingElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::NextSiblingElement",1,"ticpp::Node const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Node::NextSiblingElement",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_next_sibling_element",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Element *)((ticpp::Node const *)arg1)->NextSiblingElement(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_next_sibling_element__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::NextSiblingElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::NextSiblingElement",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_next_sibling_element",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Element *)((ticpp::Node const *)arg1)->NextSiblingElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_next_sibling_element__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::NextSiblingElement",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::NextSiblingElement",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::NextSiblingElement",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ticpp::Node::NextSiblingElement",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_next_sibling_element",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (ticpp::Element *)((ticpp::Node const *)arg1)->NextSiblingElement((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_next_sibling_element__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::NextSiblingElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::NextSiblingElement",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::NextSiblingElement",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_next_sibling_element",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ticpp::Element *)((ticpp::Node const *)arg1)->NextSiblingElement((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_next_sibling_element(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_next_sibling_element__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_next_sibling_element__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_next_sibling_element__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_next_sibling_element__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_next_sibling_element'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Node::NextSiblingElement(bool) const\n"
    "    ticpp::Node::NextSiblingElement() const\n"
    "    ticpp::Node::NextSiblingElement(char const *,bool) const\n"
    "    ticpp::Node::NextSiblingElement(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_first_child_element__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  bool arg2 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::FirstChildElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::FirstChildElement",1,"ticpp::Node const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Node::FirstChildElement",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_first_child_element",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Element *)((ticpp::Node const *)arg1)->FirstChildElement(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_first_child_element__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::FirstChildElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::FirstChildElement",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_first_child_element",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Element *)((ticpp::Node const *)arg1)->FirstChildElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_first_child_element__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::FirstChildElement",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::FirstChildElement",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::FirstChildElement",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ticpp::Node::FirstChildElement",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_first_child_element",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (ticpp::Element *)((ticpp::Node const *)arg1)->FirstChildElement((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_first_child_element__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::FirstChildElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::FirstChildElement",1,"ticpp::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Node::FirstChildElement",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_first_child_element",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ticpp::Element *)((ticpp::Node const *)arg1)->FirstChildElement((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_first_child_element(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_first_child_element__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_first_child_element__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_first_child_element__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_first_child_element__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_first_child_element'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Node::FirstChildElement(bool) const\n"
    "    ticpp::Node::FirstChildElement() const\n"
    "    ticpp::Node::FirstChildElement(char const *,bool) const\n"
    "    ticpp::Node::FirstChildElement(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_get_document__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  bool arg2 ;
  ticpp::Document *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::GetDocument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::GetDocument",1,"ticpp::Node const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Node::GetDocument",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_get_document",1,SWIGTYPE_p_ticpp__Node);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Document *)((ticpp::Node const *)arg1)->GetDocument(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Document,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_get_document__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Document *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::GetDocument",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::GetDocument",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_get_document",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Document *)((ticpp::Node const *)arg1)->GetDocument();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Document,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_get_document(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_get_document__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_get_document__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_get_document'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Node::GetDocument(bool) const\n"
    "    ticpp::Node::GetDocument() const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_to_document(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Document *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::ToDocument",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::ToDocument",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_to_document",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Document *)((ticpp::Node const *)arg1)->ToDocument();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Document,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_to_element(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::ToElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::ToElement",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_to_element",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Element *)((ticpp::Node const *)arg1)->ToElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_to_comment(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Comment *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::ToComment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::ToComment",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_to_comment",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Comment *)((ticpp::Node const *)arg1)->ToComment();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Comment,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_to_text(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Text *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::ToText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::ToText",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_to_text",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Text *)((ticpp::Node const *)arg1)->ToText();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Text,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_to_declaration(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::Declaration *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::ToDeclaration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::ToDeclaration",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_to_declaration",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::Declaration *)((ticpp::Node const *)arg1)->ToDeclaration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Declaration,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_to_stylesheet_reference(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Node *arg1 = (ticpp::Node *) 0 ;
  ticpp::StylesheetReference *result = 0 ;
  
  SWIG_check_num_args("ticpp::Node::ToStylesheetReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Node::ToStylesheetReference",1,"ticpp::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Node,0))){
    SWIG_fail_ptr("Node_to_stylesheet_reference",1,SWIGTYPE_p_ticpp__Node);
  }
  
  result = (ticpp::StylesheetReference *)((ticpp::Node const *)arg1)->ToStylesheetReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__StylesheetReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Node(void *obj) {
ticpp::Node *arg1 = (ticpp::Node *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_Node_methods[] = {
    {"value", _wrap_Node_value}, 
    {"clear", _wrap_Node_clear}, 
    {"parent", _wrap_Node_parent}, 
    {"first_child", _wrap_Node_first_child}, 
    {"last_child", _wrap_Node_last_child}, 
    {"iterate_children", _wrap_Node_iterate_children}, 
    {"insert_end_child", _wrap_Node_insert_end_child}, 
    {"link_end_child", _wrap_Node_link_end_child}, 
    {"insert_before_child", _wrap_Node_insert_before_child}, 
    {"insert_after_child", _wrap_Node_insert_after_child}, 
    {"replace_child", _wrap_Node_replace_child}, 
    {"remove_child", _wrap_Node_remove_child}, 
    {"previous_sibling", _wrap_Node_previous_sibling}, 
    {"next_sibling", _wrap_Node_next_sibling}, 
    {"iterate_first", _wrap_Node_iterate_first}, 
    {"next_sibling_element", _wrap_Node_next_sibling_element}, 
    {"first_child_element", _wrap_Node_first_child_element}, 
    {"get_document", _wrap_Node_get_document}, 
    {"to_document", _wrap_Node_to_document}, 
    {"to_element", _wrap_Node_to_element}, 
    {"to_comment", _wrap_Node_to_comment}, 
    {"to_text", _wrap_Node_to_text}, 
    {"to_declaration", _wrap_Node_to_declaration}, 
    {"to_stylesheet_reference", _wrap_Node_to_stylesheet_reference}, 
    {0,0}
};
static swig_lua_attribute swig_ticpp_Node_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_Node_bases[] = {0,0};
static const char *swig_ticpp_Node_base_names[] = {"ticpp::Base *",0};
static swig_lua_class _wrap_class_ticpp_Node = { "Node", &SWIGTYPE_p_ticpp__Node,0, swig_delete_Node, swig_ticpp_Node_methods, swig_ticpp_Node_attributes, swig_ticpp_Node_bases, swig_ticpp_Node_base_names };

static void swig_delete_NodeImpComment(void *obj) {
ticpp::NodeImp< TiXmlComment > *arg1 = (ticpp::NodeImp< TiXmlComment > *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_NodeImp_Sl_TiXmlComment_Sg__methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ticpp_NodeImp_Sl_TiXmlComment_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_NodeImp_Sl_TiXmlComment_Sg__bases[] = {0,0};
static const char *swig_ticpp_NodeImp_Sl_TiXmlComment_Sg__base_names[] = {"ticpp::Node *",0};
static swig_lua_class _wrap_class_ticpp_NodeImp_Sl_TiXmlComment_Sg_ = { "NodeImpComment", &SWIGTYPE_p_ticpp__NodeImpT_TiXmlComment_t,0, swig_delete_NodeImpComment, swig_ticpp_NodeImp_Sl_TiXmlComment_Sg__methods, swig_ticpp_NodeImp_Sl_TiXmlComment_Sg__attributes, swig_ticpp_NodeImp_Sl_TiXmlComment_Sg__bases, swig_ticpp_NodeImp_Sl_TiXmlComment_Sg__base_names };

static void swig_delete_NodeImpText(void *obj) {
ticpp::NodeImp< TiXmlText > *arg1 = (ticpp::NodeImp< TiXmlText > *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_NodeImp_Sl_TiXmlText_Sg__methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ticpp_NodeImp_Sl_TiXmlText_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_NodeImp_Sl_TiXmlText_Sg__bases[] = {0,0};
static const char *swig_ticpp_NodeImp_Sl_TiXmlText_Sg__base_names[] = {"ticpp::Node *",0};
static swig_lua_class _wrap_class_ticpp_NodeImp_Sl_TiXmlText_Sg_ = { "NodeImpText", &SWIGTYPE_p_ticpp__NodeImpT_TiXmlText_t,0, swig_delete_NodeImpText, swig_ticpp_NodeImp_Sl_TiXmlText_Sg__methods, swig_ticpp_NodeImp_Sl_TiXmlText_Sg__attributes, swig_ticpp_NodeImp_Sl_TiXmlText_Sg__bases, swig_ticpp_NodeImp_Sl_TiXmlText_Sg__base_names };

static void swig_delete_NodeImpDocument(void *obj) {
ticpp::NodeImp< TiXmlDocument > *arg1 = (ticpp::NodeImp< TiXmlDocument > *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_NodeImp_Sl_TiXmlDocument_Sg__methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ticpp_NodeImp_Sl_TiXmlDocument_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_NodeImp_Sl_TiXmlDocument_Sg__bases[] = {0,0};
static const char *swig_ticpp_NodeImp_Sl_TiXmlDocument_Sg__base_names[] = {"ticpp::Node *",0};
static swig_lua_class _wrap_class_ticpp_NodeImp_Sl_TiXmlDocument_Sg_ = { "NodeImpDocument", &SWIGTYPE_p_ticpp__NodeImpT_TiXmlDocument_t,0, swig_delete_NodeImpDocument, swig_ticpp_NodeImp_Sl_TiXmlDocument_Sg__methods, swig_ticpp_NodeImp_Sl_TiXmlDocument_Sg__attributes, swig_ticpp_NodeImp_Sl_TiXmlDocument_Sg__bases, swig_ticpp_NodeImp_Sl_TiXmlDocument_Sg__base_names };

static void swig_delete_NodeImpElement(void *obj) {
ticpp::NodeImp< TiXmlElement > *arg1 = (ticpp::NodeImp< TiXmlElement > *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_NodeImp_Sl_TiXmlElement_Sg__methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ticpp_NodeImp_Sl_TiXmlElement_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_NodeImp_Sl_TiXmlElement_Sg__bases[] = {0,0};
static const char *swig_ticpp_NodeImp_Sl_TiXmlElement_Sg__base_names[] = {"ticpp::Node *",0};
static swig_lua_class _wrap_class_ticpp_NodeImp_Sl_TiXmlElement_Sg_ = { "NodeImpElement", &SWIGTYPE_p_ticpp__NodeImpT_TiXmlElement_t,0, swig_delete_NodeImpElement, swig_ticpp_NodeImp_Sl_TiXmlElement_Sg__methods, swig_ticpp_NodeImp_Sl_TiXmlElement_Sg__attributes, swig_ticpp_NodeImp_Sl_TiXmlElement_Sg__bases, swig_ticpp_NodeImp_Sl_TiXmlElement_Sg__base_names };

static void swig_delete_NodeImpDeclaration(void *obj) {
ticpp::NodeImp< TiXmlDeclaration > *arg1 = (ticpp::NodeImp< TiXmlDeclaration > *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_NodeImp_Sl_TiXmlDeclaration_Sg__methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ticpp_NodeImp_Sl_TiXmlDeclaration_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_NodeImp_Sl_TiXmlDeclaration_Sg__bases[] = {0,0};
static const char *swig_ticpp_NodeImp_Sl_TiXmlDeclaration_Sg__base_names[] = {"ticpp::Node *",0};
static swig_lua_class _wrap_class_ticpp_NodeImp_Sl_TiXmlDeclaration_Sg_ = { "NodeImpDeclaration", &SWIGTYPE_p_ticpp__NodeImpT_TiXmlDeclaration_t,0, swig_delete_NodeImpDeclaration, swig_ticpp_NodeImp_Sl_TiXmlDeclaration_Sg__methods, swig_ticpp_NodeImp_Sl_TiXmlDeclaration_Sg__attributes, swig_ticpp_NodeImp_Sl_TiXmlDeclaration_Sg__bases, swig_ticpp_NodeImp_Sl_TiXmlDeclaration_Sg__base_names };

static void swig_delete_NodeImpStylesheetReference(void *obj) {
ticpp::NodeImp< TiXmlStylesheetReference > *arg1 = (ticpp::NodeImp< TiXmlStylesheetReference > *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_NodeImp_Sl_TiXmlStylesheetReference_Sg__methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ticpp_NodeImp_Sl_TiXmlStylesheetReference_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_NodeImp_Sl_TiXmlStylesheetReference_Sg__bases[] = {0,0};
static const char *swig_ticpp_NodeImp_Sl_TiXmlStylesheetReference_Sg__base_names[] = {"ticpp::Node *",0};
static swig_lua_class _wrap_class_ticpp_NodeImp_Sl_TiXmlStylesheetReference_Sg_ = { "NodeImpStylesheetReference", &SWIGTYPE_p_ticpp__NodeImpT_TiXmlStylesheetReference_t,0, swig_delete_NodeImpStylesheetReference, swig_ticpp_NodeImp_Sl_TiXmlStylesheetReference_Sg__methods, swig_ticpp_NodeImp_Sl_TiXmlStylesheetReference_Sg__attributes, swig_ticpp_NodeImp_Sl_TiXmlStylesheetReference_Sg__bases, swig_ticpp_NodeImp_Sl_TiXmlStylesheetReference_Sg__base_names };

static int _wrap_new_Exception(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  ticpp::Exception *result = 0 ;
  
  SWIG_check_num_args("ticpp::Exception::Exception",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ticpp::Exception::Exception",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (ticpp::Exception *)new ticpp::Exception((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Exception,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exception_what(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Exception *arg1 = (ticpp::Exception *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ticpp::Exception::what",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Exception::what",1,"ticpp::Exception const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Exception,0))){
    SWIG_fail_ptr("Exception_what",1,SWIGTYPE_p_ticpp__Exception);
  }
  
  result = (char *)((ticpp::Exception const *)arg1)->what();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exception_m_details_set(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Exception *arg1 = (ticpp::Exception *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Exception::m_details",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Exception::m_details",1,"ticpp::Exception *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Exception::m_details",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Exception,0))){
    SWIG_fail_ptr("Exception_m_details_set",1,SWIGTYPE_p_ticpp__Exception);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->m_details = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exception_m_details_get(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Exception *arg1 = (ticpp::Exception *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("ticpp::Exception::m_details",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Exception::m_details",1,"ticpp::Exception *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Exception,0))){
    SWIG_fail_ptr("Exception_m_details_get",1,SWIGTYPE_p_ticpp__Exception);
  }
  
  result = (std::string *) & ((arg1)->m_details);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Exception(void *obj) {
ticpp::Exception *arg1 = (ticpp::Exception *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_Exception_methods[] = {
    {"what", _wrap_Exception_what}, 
    {0,0}
};
static swig_lua_attribute swig_ticpp_Exception_attributes[] = {
    { "m_details", _wrap_Exception_m_details_get, _wrap_Exception_m_details_set},
    {0,0,0}
};
static swig_lua_class *swig_ticpp_Exception_bases[] = {0};
static const char *swig_ticpp_Exception_base_names[] = {0};
static swig_lua_class _wrap_class_ticpp_Exception = { "Exception", &SWIGTYPE_p_ticpp__Exception,_wrap_new_Exception, swig_delete_Exception, swig_ticpp_Exception_methods, swig_ticpp_Exception_attributes, swig_ticpp_Exception_bases, swig_ticpp_Exception_base_names };

static int _wrap_Visitor_visit_enter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  TiXmlDocument *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::VisitEnter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::VisitEnter",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::VisitEnter",2,"TiXmlDocument const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit_enter",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("Visitor_visit_enter",2,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (bool)(arg1)->VisitEnter((TiXmlDocument const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit_exit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  TiXmlDocument *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::VisitExit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::VisitExit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::VisitExit",2,"TiXmlDocument const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit_exit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("Visitor_visit_exit",2,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (bool)(arg1)->VisitExit((TiXmlDocument const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit_enter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  TiXmlElement *arg2 = 0 ;
  TiXmlAttribute *arg3 = (TiXmlAttribute *) 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::VisitEnter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::VisitEnter",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::VisitEnter",2,"TiXmlElement const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ticpp::Visitor::VisitEnter",3,"TiXmlAttribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit_enter",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("Visitor_visit_enter",2,SWIGTYPE_p_TiXmlElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlAttribute,0))){
    SWIG_fail_ptr("Visitor_visit_enter",3,SWIGTYPE_p_TiXmlAttribute);
  }
  
  result = (bool)(arg1)->VisitEnter((TiXmlElement const &)*arg2,(TiXmlAttribute const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit_exit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  TiXmlElement *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::VisitExit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::VisitExit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::VisitExit",2,"TiXmlElement const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit_exit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("Visitor_visit_exit",2,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (bool)(arg1)->VisitExit((TiXmlElement const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  TiXmlDeclaration *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::Visit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::Visit",2,"TiXmlDeclaration const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("Visitor_visit",2,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (bool)(arg1)->Visit((TiXmlDeclaration const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  TiXmlStylesheetReference *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::Visit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::Visit",2,"TiXmlStylesheetReference const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("Visitor_visit",2,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  result = (bool)(arg1)->Visit((TiXmlStylesheetReference const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  TiXmlText *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::Visit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::Visit",2,"TiXmlText const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("Visitor_visit",2,SWIGTYPE_p_TiXmlText);
  }
  
  result = (bool)(arg1)->Visit((TiXmlText const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  TiXmlComment *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::Visit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::Visit",2,"TiXmlComment const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("Visitor_visit",2,SWIGTYPE_p_TiXmlComment);
  }
  
  result = (bool)(arg1)->Visit((TiXmlComment const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit_enter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  ticpp::Document *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::VisitEnter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::VisitEnter",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::VisitEnter",2,"ticpp::Document const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit_enter",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Visitor_visit_enter",2,SWIGTYPE_p_ticpp__Document);
  }
  
  result = (bool)(arg1)->VisitEnter((ticpp::Document const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit_exit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  ticpp::Document *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::VisitExit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::VisitExit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::VisitExit",2,"ticpp::Document const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit_exit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Visitor_visit_exit",2,SWIGTYPE_p_ticpp__Document);
  }
  
  result = (bool)(arg1)->VisitExit((ticpp::Document const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit_enter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  ticpp::Element *arg2 = 0 ;
  ticpp::Attribute *arg3 = (ticpp::Attribute *) 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::VisitEnter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::VisitEnter",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::VisitEnter",2,"ticpp::Element const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ticpp::Visitor::VisitEnter",3,"ticpp::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit_enter",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Visitor_visit_enter",2,SWIGTYPE_p_ticpp__Element);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Visitor_visit_enter",3,SWIGTYPE_p_ticpp__Attribute);
  }
  
  result = (bool)(arg1)->VisitEnter((ticpp::Element const &)*arg2,(ticpp::Attribute const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit_enter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit_enter__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit_enter__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TiXmlAttribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Visitor_visit_enter__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ticpp__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Visitor_visit_enter__SWIG_3(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Visitor_visit_enter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Visitor::VisitEnter(TiXmlDocument const &)\n"
    "    ticpp::Visitor::VisitEnter(TiXmlElement const &,TiXmlAttribute const *)\n"
    "    ticpp::Visitor::VisitEnter(ticpp::Document const &)\n"
    "    ticpp::Visitor::VisitEnter(ticpp::Element const &,ticpp::Attribute const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Visitor_visit_exit__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  ticpp::Element *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::VisitExit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::VisitExit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::VisitExit",2,"ticpp::Element const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit_exit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Visitor_visit_exit",2,SWIGTYPE_p_ticpp__Element);
  }
  
  result = (bool)(arg1)->VisitExit((ticpp::Element const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit_exit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit_exit__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit_exit__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit_exit__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit_exit__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Visitor_visit_exit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Visitor::VisitExit(TiXmlDocument const &)\n"
    "    ticpp::Visitor::VisitExit(TiXmlElement const &)\n"
    "    ticpp::Visitor::VisitExit(ticpp::Document const &)\n"
    "    ticpp::Visitor::VisitExit(ticpp::Element const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Visitor_visit__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  ticpp::Declaration *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::Visit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::Visit",2,"ticpp::Declaration const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Declaration,0))){
    SWIG_fail_ptr("Visitor_visit",2,SWIGTYPE_p_ticpp__Declaration);
  }
  
  result = (bool)(arg1)->Visit((ticpp::Declaration const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  ticpp::StylesheetReference *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::Visit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::Visit",2,"ticpp::StylesheetReference const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__StylesheetReference,0))){
    SWIG_fail_ptr("Visitor_visit",2,SWIGTYPE_p_ticpp__StylesheetReference);
  }
  
  result = (bool)(arg1)->Visit((ticpp::StylesheetReference const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  ticpp::Text *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::Visit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::Visit",2,"ticpp::Text const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Text,0))){
    SWIG_fail_ptr("Visitor_visit",2,SWIGTYPE_p_ticpp__Text);
  }
  
  result = (bool)(arg1)->Visit((ticpp::Text const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *arg1 = (ticpp::Visitor *) 0 ;
  ticpp::Comment *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Visitor::Visit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Visitor::Visit",1,"ticpp::Visitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ticpp::Visitor::Visit",2,"ticpp::Comment const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Visitor,0))){
    SWIG_fail_ptr("Visitor_visit",1,SWIGTYPE_p_ticpp__Visitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Comment,0))){
    SWIG_fail_ptr("Visitor_visit",2,SWIGTYPE_p_ticpp__Comment);
  }
  
  result = (bool)(arg1)->Visit((ticpp::Comment const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Visitor_visit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlDeclaration, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlStylesheetReference, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlText, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TiXmlComment, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ticpp__Declaration, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ticpp__StylesheetReference, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ticpp__Text, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Visitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ticpp__Comment, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Visitor_visit__SWIG_7(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Visitor_visit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Visitor::Visit(TiXmlDeclaration const &)\n"
    "    ticpp::Visitor::Visit(TiXmlStylesheetReference const &)\n"
    "    ticpp::Visitor::Visit(TiXmlText const &)\n"
    "    ticpp::Visitor::Visit(TiXmlComment const &)\n"
    "    ticpp::Visitor::Visit(ticpp::Declaration const &)\n"
    "    ticpp::Visitor::Visit(ticpp::StylesheetReference const &)\n"
    "    ticpp::Visitor::Visit(ticpp::Text const &)\n"
    "    ticpp::Visitor::Visit(ticpp::Comment const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Visitor(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Visitor *result = 0 ;
  
  SWIG_check_num_args("ticpp::Visitor::Visitor",0,0)
  result = (ticpp::Visitor *)new ticpp::Visitor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Visitor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Visitor(void *obj) {
ticpp::Visitor *arg1 = (ticpp::Visitor *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_Visitor_methods[] = {
    {"visit_enter", _wrap_Visitor_visit_enter}, 
    {"visit_exit", _wrap_Visitor_visit_exit}, 
    {"visit", _wrap_Visitor_visit}, 
    {0,0}
};
static swig_lua_attribute swig_ticpp_Visitor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_Visitor_bases[] = {0,0};
static const char *swig_ticpp_Visitor_base_names[] = {"TiXmlVisitor *",0};
static swig_lua_class _wrap_class_ticpp_Visitor = { "Visitor", &SWIGTYPE_p_ticpp__Visitor,_wrap_new_Visitor, swig_delete_Visitor, swig_ticpp_Visitor_methods, swig_ticpp_Visitor_attributes, swig_ticpp_Visitor_bases, swig_ticpp_Visitor_base_names };

static int _wrap_new_Comment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Comment *result = 0 ;
  
  SWIG_check_num_args("ticpp::Comment::Comment",0,0)
  result = (ticpp::Comment *)new ticpp::Comment();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Comment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlComment *arg1 = (TiXmlComment *) 0 ;
  ticpp::Comment *result = 0 ;
  
  SWIG_check_num_args("ticpp::Comment::Comment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Comment::Comment",1,"TiXmlComment *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlComment,0))){
    SWIG_fail_ptr("new_Comment",1,SWIGTYPE_p_TiXmlComment);
  }
  
  result = (ticpp::Comment *)new ticpp::Comment(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Comment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  ticpp::Comment *result = 0 ;
  
  SWIG_check_num_args("ticpp::Comment::Comment",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ticpp::Comment::Comment",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (ticpp::Comment *)new ticpp::Comment((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Comment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comment(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Comment__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlComment, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Comment__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Comment__SWIG_2(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Comment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Comment::Comment()\n"
    "    ticpp::Comment::Comment(TiXmlComment *)\n"
    "    ticpp::Comment::Comment(std::string const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Comment(void *obj) {
ticpp::Comment *arg1 = (ticpp::Comment *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_Comment_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ticpp_Comment_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_Comment_bases[] = {0,0};
static const char *swig_ticpp_Comment_base_names[] = {"ticpp::NodeImp< TiXmlComment > *",0};
static swig_lua_class _wrap_class_ticpp_Comment = { "Comment", &SWIGTYPE_p_ticpp__Comment,_wrap_new_Comment, swig_delete_Comment, swig_ticpp_Comment_methods, swig_ticpp_Comment_attributes, swig_ticpp_Comment_bases, swig_ticpp_Comment_base_names };

static int _wrap_new_Text__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Text *result = 0 ;
  
  SWIG_check_num_args("ticpp::Text::Text",0,0)
  result = (ticpp::Text *)new ticpp::Text();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Text,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Text__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlText *arg1 = (TiXmlText *) 0 ;
  ticpp::Text *result = 0 ;
  
  SWIG_check_num_args("ticpp::Text::Text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Text::Text",1,"TiXmlText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlText,0))){
    SWIG_fail_ptr("new_Text",1,SWIGTYPE_p_TiXmlText);
  }
  
  result = (ticpp::Text *)new ticpp::Text(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Text,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Text__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  ticpp::Text *result = 0 ;
  
  SWIG_check_num_args("ticpp::Text::Text",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ticpp::Text::Text",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (ticpp::Text *)new ticpp::Text((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Text,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Text(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Text__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Text__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Text__SWIG_2(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Text'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Text::Text()\n"
    "    ticpp::Text::Text(TiXmlText *)\n"
    "    ticpp::Text::Text(std::string const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Text(void *obj) {
ticpp::Text *arg1 = (ticpp::Text *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_Text_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ticpp_Text_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_Text_bases[] = {0,0};
static const char *swig_ticpp_Text_base_names[] = {"ticpp::NodeImp< TiXmlText > *",0};
static swig_lua_class _wrap_class_ticpp_Text = { "Text", &SWIGTYPE_p_ticpp__Text,_wrap_new_Text, swig_delete_Text, swig_ticpp_Text_methods, swig_ticpp_Text_attributes, swig_ticpp_Text_bases, swig_ticpp_Text_base_names };

static int _wrap_new_Document__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *result = 0 ;
  
  SWIG_check_num_args("ticpp::Document::Document",0,0)
  result = (ticpp::Document *)new ticpp::Document();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Document,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Document__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDocument *arg1 = (TiXmlDocument *) 0 ;
  ticpp::Document *result = 0 ;
  
  SWIG_check_num_args("ticpp::Document::Document",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::Document",1,"TiXmlDocument *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("new_Document",1,SWIGTYPE_p_TiXmlDocument);
  }
  
  result = (ticpp::Document *)new ticpp::Document(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Document,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Document__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ticpp::Document *result = 0 ;
  
  SWIG_check_num_args("ticpp::Document::Document",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ticpp::Document::Document",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ticpp::Document *)new ticpp::Document((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Document,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Document__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  ticpp::Document *result = 0 ;
  
  SWIG_check_num_args("ticpp::Document::Document",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ticpp::Document::Document",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (ticpp::Document *)new ticpp::Document((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Document,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Document(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Document__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Document__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Document__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Document__SWIG_3(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Document'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Document::Document()\n"
    "    ticpp::Document::Document(TiXmlDocument *)\n"
    "    ticpp::Document::Document(char const *)\n"
    "    ticpp::Document::Document(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_load_file__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  TiXmlEncoding arg2 ;
  
  SWIG_check_num_args("ticpp::Document::LoadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::LoadFile",1,"ticpp::Document *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ticpp::Document::LoadFile",2,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_load_file",1,SWIGTYPE_p_ticpp__Document);
  }
  
  arg2 = (TiXmlEncoding)(int)lua_tonumber(L, 2);
  (arg1)->LoadFile(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_load_file__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  
  SWIG_check_num_args("ticpp::Document::LoadFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::LoadFile",1,"ticpp::Document *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_load_file",1,SWIGTYPE_p_ticpp__Document);
  }
  
  (arg1)->LoadFile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_save_file__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  
  SWIG_check_num_args("ticpp::Document::SaveFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::SaveFile",1,"ticpp::Document const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_save_file",1,SWIGTYPE_p_ticpp__Document);
  }
  
  ((ticpp::Document const *)arg1)->SaveFile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_load_file__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  std::string *arg2 = 0 ;
  TiXmlEncoding arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Document::LoadFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::LoadFile",1,"ticpp::Document *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Document::LoadFile",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ticpp::Document::LoadFile",3,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_load_file",1,SWIGTYPE_p_ticpp__Document);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (TiXmlEncoding)(int)lua_tonumber(L, 3);
  (arg1)->LoadFile((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_load_file__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Document::LoadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::LoadFile",1,"ticpp::Document *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Document::LoadFile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_load_file",1,SWIGTYPE_p_ticpp__Document);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->LoadFile((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_load_file__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  TiXmlEncoding arg3 ;
  
  SWIG_check_num_args("ticpp::Document::LoadFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::LoadFile",1,"ticpp::Document *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Document::LoadFile",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ticpp::Document::LoadFile",3,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_load_file",1,SWIGTYPE_p_ticpp__Document);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (TiXmlEncoding)(int)lua_tonumber(L, 3);
  (arg1)->LoadFile((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_load_file__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ticpp::Document::LoadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::LoadFile",1,"ticpp::Document *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ticpp::Document::LoadFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_load_file",1,SWIGTYPE_p_ticpp__Document);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->LoadFile((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_load_file(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Document_load_file__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Document_load_file__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Document_load_file__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Document_load_file__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_load_file__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_load_file__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Document_load_file'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Document::LoadFile(TiXmlEncoding)\n"
    "    ticpp::Document::LoadFile()\n"
    "    ticpp::Document::LoadFile(std::string const &,TiXmlEncoding)\n"
    "    ticpp::Document::LoadFile(std::string const &)\n"
    "    ticpp::Document::LoadFile(char const *,TiXmlEncoding)\n"
    "    ticpp::Document::LoadFile(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_save_file__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Document::SaveFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::SaveFile",1,"ticpp::Document const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Document::SaveFile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_save_file",1,SWIGTYPE_p_ticpp__Document);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  ((ticpp::Document const *)arg1)->SaveFile((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_save_file(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Document_save_file__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Document_save_file__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Document_save_file'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Document::SaveFile() const\n"
    "    ticpp::Document::SaveFile(std::string const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Document_parse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  TiXmlEncoding arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Document::Parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::Parse",1,"ticpp::Document *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Document::Parse",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ticpp::Document::Parse",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ticpp::Document::Parse",4,"TiXmlEncoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_parse",1,SWIGTYPE_p_ticpp__Document);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (TiXmlEncoding)(int)lua_tonumber(L, 4);
  (arg1)->Parse((std::string const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_parse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Document::Parse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::Parse",1,"ticpp::Document *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Document::Parse",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ticpp::Document::Parse",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_parse",1,SWIGTYPE_p_ticpp__Document);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->Parse((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_parse__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Document *arg1 = (ticpp::Document *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Document::Parse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Document::Parse",1,"ticpp::Document *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Document::Parse",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Document,0))){
    SWIG_fail_ptr("Document_parse",1,SWIGTYPE_p_ticpp__Document);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->Parse((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_parse(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Document_parse__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_parse__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_parse__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Document_parse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Document::Parse(std::string const &,bool,TiXmlEncoding)\n"
    "    ticpp::Document::Parse(std::string const &,bool)\n"
    "    ticpp::Document::Parse(std::string const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Document(void *obj) {
ticpp::Document *arg1 = (ticpp::Document *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_Document_methods[] = {
    {"load_file", _wrap_Document_load_file}, 
    {"save_file", _wrap_Document_save_file}, 
    {"parse", _wrap_Document_parse}, 
    {0,0}
};
static swig_lua_attribute swig_ticpp_Document_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_Document_bases[] = {0,0};
static const char *swig_ticpp_Document_base_names[] = {"ticpp::NodeImp< TiXmlDocument > *",0};
static swig_lua_class _wrap_class_ticpp_Document = { "Document", &SWIGTYPE_p_ticpp__Document,_wrap_new_Document, swig_delete_Document, swig_ticpp_Document_methods, swig_ticpp_Document_attributes, swig_ticpp_Document_bases, swig_ticpp_Document_base_names };

static int _wrap_new_Element__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Element::Element",0,0)
  result = (ticpp::Element *)new ticpp::Element();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Element__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Element::Element",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ticpp::Element::Element",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (ticpp::Element *)new ticpp::Element((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Element__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Element::Element",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ticpp::Element::Element",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ticpp::Element *)new ticpp::Element((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Element__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlElement *arg1 = (TiXmlElement *) 0 ;
  ticpp::Element *result = 0 ;
  
  SWIG_check_num_args("ticpp::Element::Element",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::Element",1,"TiXmlElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("new_Element",1,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (ticpp::Element *)new ticpp::Element(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Element(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Element__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlElement, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Element__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Element__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Element__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Element'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Element::Element()\n"
    "    ticpp::Element::Element(std::string const &)\n"
    "    ticpp::Element::Element(char const *)\n"
    "    ticpp::Element::Element(TiXmlElement *)\n");
  lua_error(L);return 0;
}


static int _wrap_Element_first_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  bool arg2 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Element::FirstAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::FirstAttribute",1,"ticpp::Element const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Element::FirstAttribute",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_first_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Attribute *)((ticpp::Element const *)arg1)->FirstAttribute(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_first_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Element::FirstAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::FirstAttribute",1,"ticpp::Element const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_first_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  result = (ticpp::Attribute *)((ticpp::Element const *)arg1)->FirstAttribute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_first_attribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Element_first_attribute__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Element_first_attribute__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Element_first_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Element::FirstAttribute(bool) const\n"
    "    ticpp::Element::FirstAttribute() const\n");
  lua_error(L);return 0;
}


static int _wrap_Element_last_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  bool arg2 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Element::LastAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::LastAttribute",1,"ticpp::Element const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Element::LastAttribute",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_last_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ticpp::Attribute *)((ticpp::Element const *)arg1)->LastAttribute(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_last_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  ticpp::Attribute *result = 0 ;
  
  SWIG_check_num_args("ticpp::Element::LastAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::LastAttribute",1,"ticpp::Element const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_last_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  result = (ticpp::Attribute *)((ticpp::Element const *)arg1)->LastAttribute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Attribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_last_attribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Element_last_attribute__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Element_last_attribute__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Element_last_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Element::LastAttribute(bool) const\n"
    "    ticpp::Element::LastAttribute() const\n");
  lua_error(L);return 0;
}


static int _wrap_Element_iterate_first(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  std::string *arg2 = 0 ;
  ticpp::Attribute **arg3 = (ticpp::Attribute **) 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Element::IterateFirst",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::IterateFirst",1,"ticpp::Element const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Element::IterateFirst",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ticpp::Element::IterateFirst",3,"ticpp::Attribute **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_iterate_first",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_ticpp__Attribute,0))){
    SWIG_fail_ptr("Element_iterate_first",3,SWIGTYPE_p_p_ticpp__Attribute);
  }
  
  ((ticpp::Element const *)arg1)->IterateFirst((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_get_text__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  bool arg2 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Element::GetText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::GetText",1,"ticpp::Element const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ticpp::Element::GetText",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_get_text",1,SWIGTYPE_p_ticpp__Element);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((ticpp::Element const *)arg1)->GetText(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_get_text__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Element::GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::GetText",1,"ticpp::Element const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_get_text",1,SWIGTYPE_p_ticpp__Element);
  }
  
  result = ((ticpp::Element const *)arg1)->GetText();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_get_text(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Element_get_text__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Element_get_text__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Element_get_text'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Element::GetText(bool) const\n"
    "    ticpp::Element::GetText() const\n");
  lua_error(L);return 0;
}


static int _wrap_Element_get_text_or_default(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Element::GetTextOrDefault",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::GetTextOrDefault",1,"ticpp::Element const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Element::GetTextOrDefault",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_get_text_or_default",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = ((ticpp::Element const *)arg1)->GetTextOrDefault((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_get_attribute_or_default(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Element::GetAttributeOrDefault",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::GetAttributeOrDefault",1,"ticpp::Element const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Element::GetAttributeOrDefault",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ticpp::Element::GetAttributeOrDefault",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_get_attribute_or_default",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = ((ticpp::Element const *)arg1)->GetAttributeOrDefault((std::string const &)*arg2,(std::string const &)*arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_get_attribute(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Element::GetAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::GetAttribute",1,"ticpp::Element const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Element::GetAttribute",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_get_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = ((ticpp::Element const *)arg1)->GetAttribute((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_has_attribute(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("ticpp::Element::HasAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::HasAttribute",1,"ticpp::Element const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Element::HasAttribute",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_has_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((ticpp::Element const *)arg1)->HasAttribute((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Element_remove_attribute(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Element *arg1 = (ticpp::Element *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ticpp::Element::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Element::RemoveAttribute",1,"ticpp::Element *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Element::RemoveAttribute",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Element_remove_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->RemoveAttribute((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Element(void *obj) {
ticpp::Element *arg1 = (ticpp::Element *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_Element_methods[] = {
    {"first_attribute", _wrap_Element_first_attribute}, 
    {"last_attribute", _wrap_Element_last_attribute}, 
    {"iterate_first", _wrap_Element_iterate_first}, 
    {"get_text", _wrap_Element_get_text}, 
    {"get_text_or_default", _wrap_Element_get_text_or_default}, 
    {"get_attribute_or_default", _wrap_Element_get_attribute_or_default}, 
    {"get_attribute", _wrap_Element_get_attribute}, 
    {"has_attribute", _wrap_Element_has_attribute}, 
    {"remove_attribute", _wrap_Element_remove_attribute}, 
    {0,0}
};
static swig_lua_attribute swig_ticpp_Element_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_Element_bases[] = {0,0};
static const char *swig_ticpp_Element_base_names[] = {"ticpp::NodeImp< TiXmlElement > *",0};
static swig_lua_class _wrap_class_ticpp_Element = { "Element", &SWIGTYPE_p_ticpp__Element,_wrap_new_Element, swig_delete_Element, swig_ticpp_Element_methods, swig_ticpp_Element_attributes, swig_ticpp_Element_bases, swig_ticpp_Element_base_names };

static int _wrap_new_Declaration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Declaration *result = 0 ;
  
  SWIG_check_num_args("ticpp::Declaration::Declaration",0,0)
  result = (ticpp::Declaration *)new ticpp::Declaration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Declaration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Declaration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlDeclaration *arg1 = (TiXmlDeclaration *) 0 ;
  ticpp::Declaration *result = 0 ;
  
  SWIG_check_num_args("ticpp::Declaration::Declaration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Declaration::Declaration",1,"TiXmlDeclaration *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlDeclaration,0))){
    SWIG_fail_ptr("new_Declaration",1,SWIGTYPE_p_TiXmlDeclaration);
  }
  
  result = (ticpp::Declaration *)new ticpp::Declaration(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Declaration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Declaration__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  ticpp::Declaration *result = 0 ;
  
  SWIG_check_num_args("ticpp::Declaration::Declaration",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ticpp::Declaration::Declaration",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::Declaration::Declaration",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ticpp::Declaration::Declaration",3,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (ticpp::Declaration *)new ticpp::Declaration((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Declaration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Declaration(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Declaration__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlDeclaration, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Declaration__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Declaration__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Declaration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::Declaration::Declaration()\n"
    "    ticpp::Declaration::Declaration(TiXmlDeclaration *)\n"
    "    ticpp::Declaration::Declaration(std::string const &,std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Declaration_version(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Declaration *arg1 = (ticpp::Declaration *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Declaration::Version",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Declaration::Version",1,"ticpp::Declaration const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Declaration,0))){
    SWIG_fail_ptr("Declaration_version",1,SWIGTYPE_p_ticpp__Declaration);
  }
  
  result = ((ticpp::Declaration const *)arg1)->Version();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Declaration_encoding(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Declaration *arg1 = (ticpp::Declaration *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Declaration::Encoding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Declaration::Encoding",1,"ticpp::Declaration const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Declaration,0))){
    SWIG_fail_ptr("Declaration_encoding",1,SWIGTYPE_p_ticpp__Declaration);
  }
  
  result = ((ticpp::Declaration const *)arg1)->Encoding();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Declaration_standalone(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::Declaration *arg1 = (ticpp::Declaration *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::Declaration::Standalone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::Declaration::Standalone",1,"ticpp::Declaration const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Declaration,0))){
    SWIG_fail_ptr("Declaration_standalone",1,SWIGTYPE_p_ticpp__Declaration);
  }
  
  result = ((ticpp::Declaration const *)arg1)->Standalone();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Declaration(void *obj) {
ticpp::Declaration *arg1 = (ticpp::Declaration *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_Declaration_methods[] = {
    {"version", _wrap_Declaration_version}, 
    {"encoding", _wrap_Declaration_encoding}, 
    {"standalone", _wrap_Declaration_standalone}, 
    {0,0}
};
static swig_lua_attribute swig_ticpp_Declaration_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_Declaration_bases[] = {0,0};
static const char *swig_ticpp_Declaration_base_names[] = {"ticpp::NodeImp< TiXmlDeclaration > *",0};
static swig_lua_class _wrap_class_ticpp_Declaration = { "Declaration", &SWIGTYPE_p_ticpp__Declaration,_wrap_new_Declaration, swig_delete_Declaration, swig_ticpp_Declaration_methods, swig_ticpp_Declaration_attributes, swig_ticpp_Declaration_bases, swig_ticpp_Declaration_base_names };

static int _wrap_new_StylesheetReference__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::StylesheetReference *result = 0 ;
  
  SWIG_check_num_args("ticpp::StylesheetReference::StylesheetReference",0,0)
  result = (ticpp::StylesheetReference *)new ticpp::StylesheetReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__StylesheetReference,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StylesheetReference__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TiXmlStylesheetReference *arg1 = (TiXmlStylesheetReference *) 0 ;
  ticpp::StylesheetReference *result = 0 ;
  
  SWIG_check_num_args("ticpp::StylesheetReference::StylesheetReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::StylesheetReference::StylesheetReference",1,"TiXmlStylesheetReference *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TiXmlStylesheetReference,0))){
    SWIG_fail_ptr("new_StylesheetReference",1,SWIGTYPE_p_TiXmlStylesheetReference);
  }
  
  result = (ticpp::StylesheetReference *)new ticpp::StylesheetReference(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__StylesheetReference,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StylesheetReference__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  ticpp::StylesheetReference *result = 0 ;
  
  SWIG_check_num_args("ticpp::StylesheetReference::StylesheetReference",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ticpp::StylesheetReference::StylesheetReference",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ticpp::StylesheetReference::StylesheetReference",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (ticpp::StylesheetReference *)new ticpp::StylesheetReference((std::string const &)*arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__StylesheetReference,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StylesheetReference(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StylesheetReference__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TiXmlStylesheetReference, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StylesheetReference__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StylesheetReference__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_StylesheetReference'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ticpp::StylesheetReference::StylesheetReference()\n"
    "    ticpp::StylesheetReference::StylesheetReference(TiXmlStylesheetReference *)\n"
    "    ticpp::StylesheetReference::StylesheetReference(std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StylesheetReference_type(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::StylesheetReference *arg1 = (ticpp::StylesheetReference *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::StylesheetReference::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::StylesheetReference::Type",1,"ticpp::StylesheetReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__StylesheetReference,0))){
    SWIG_fail_ptr("StylesheetReference_type",1,SWIGTYPE_p_ticpp__StylesheetReference);
  }
  
  result = ((ticpp::StylesheetReference const *)arg1)->Type();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StylesheetReference_href(lua_State* L) {
  int SWIG_arg = 0;
  ticpp::StylesheetReference *arg1 = (ticpp::StylesheetReference *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ticpp::StylesheetReference::Href",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ticpp::StylesheetReference::Href",1,"ticpp::StylesheetReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__StylesheetReference,0))){
    SWIG_fail_ptr("StylesheetReference_href",1,SWIGTYPE_p_ticpp__StylesheetReference);
  }
  
  result = ((ticpp::StylesheetReference const *)arg1)->Href();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StylesheetReference(void *obj) {
ticpp::StylesheetReference *arg1 = (ticpp::StylesheetReference *) obj;
delete arg1;
}
static swig_lua_method swig_ticpp_StylesheetReference_methods[] = {
    {"type", _wrap_StylesheetReference_type}, 
    {"href", _wrap_StylesheetReference_href}, 
    {0,0}
};
static swig_lua_attribute swig_ticpp_StylesheetReference_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ticpp_StylesheetReference_bases[] = {0,0};
static const char *swig_ticpp_StylesheetReference_base_names[] = {"ticpp::NodeImp< TiXmlStylesheetReference > *",0};
static swig_lua_class _wrap_class_ticpp_StylesheetReference = { "StylesheetReference", &SWIGTYPE_p_ticpp__StylesheetReference,_wrap_new_StylesheetReference, swig_delete_StylesheetReference, swig_ticpp_StylesheetReference_methods, swig_ticpp_StylesheetReference_attributes, swig_ticpp_StylesheetReference_bases, swig_ticpp_StylesheetReference_base_names };

static int _wrap_new_ArgosException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::exception *arg2 = (std::exception *) 0 ;
  std::string temp1 ;
  argos::CARGoSException *result = 0 ;
  
  SWIG_check_num_args("argos::CARGoSException::CARGoSException",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::CARGoSException::CARGoSException",1,"std::string const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("argos::CARGoSException::CARGoSException",2,"std::exception *");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__exception,0))){
    SWIG_fail_ptr("new_ArgosException",2,SWIGTYPE_p_std__exception);
  }
  
  result = (argos::CARGoSException *)new argos::CARGoSException((std::string const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CARGoSException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArgosException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  argos::CARGoSException *result = 0 ;
  
  SWIG_check_num_args("argos::CARGoSException::CARGoSException",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::CARGoSException::CARGoSException",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (argos::CARGoSException *)new argos::CARGoSException((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CARGoSException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArgosException(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ArgosException__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__exception, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ArgosException__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ArgosException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CARGoSException::CARGoSException(std::string const &,std::exception *)\n"
    "    argos::CARGoSException::CARGoSException(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ArgosException_what(lua_State* L) {
  int SWIG_arg = 0;
  argos::CARGoSException *arg1 = (argos::CARGoSException *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("argos::CARGoSException::what",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CARGoSException::what",1,"argos::CARGoSException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CARGoSException,0))){
    SWIG_fail_ptr("ArgosException_what",1,SWIGTYPE_p_argos__CARGoSException);
  }
  
  result = (char *)((argos::CARGoSException const *)arg1)->what();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ArgosException(void *obj) {
argos::CARGoSException *arg1 = (argos::CARGoSException *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CARGoSException_methods[] = {
    {"what", _wrap_ArgosException_what}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CARGoSException_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CARGoSException_bases[] = {0};
static const char *swig_argos_CARGoSException_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CARGoSException = { "ArgosException", &SWIGTYPE_p_argos__CARGoSException,_wrap_new_ArgosException, swig_delete_ArgosException, swig_argos_CARGoSException_methods, swig_argos_CARGoSException_attributes, swig_argos_CARGoSException_bases, swig_argos_CARGoSException_base_names };

static int _wrap_node_exists(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("argos::NodeExists",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::NodeExists",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::NodeExists",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("node_exists",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)argos::NodeExists(*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_node(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  argos::TConfigurationNode *result = 0 ;
  
  SWIG_check_num_args("argos::GetNode",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::GetNode",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::GetNode",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("get_node",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (argos::TConfigurationNode *) &argos::GetNode(*arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ticpp__Element,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_add_child_node(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  argos::TConfigurationNode *arg2 = 0 ;
  
  SWIG_check_num_args("argos::AddChildNode",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::AddChildNode",1,"argos::TConfigurationNode &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::AddChildNode",2,"argos::TConfigurationNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("add_child_node",1,SWIGTYPE_p_ticpp__Element);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("add_child_node",2,SWIGTYPE_p_ticpp__Element);
  }
  
  argos::AddChildNode(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_attribute_exists(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("argos::NodeAttributeExists",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::NodeAttributeExists",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::NodeAttributeExists",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("node_attribute_exists",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)argos::NodeAttributeExists(*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_node_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::GetNodeAttribute",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::GetNodeAttribute",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::GetNodeAttribute",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::GetNodeAttribute",3,"bool &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("get_node_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("get_node_attribute",3,SWIGTYPE_p_bool);
  }
  
  argos::GetNodeAttribute(*arg1,(std::string const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_node_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  argos::UInt8 *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::GetNodeAttribute",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::GetNodeAttribute",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::GetNodeAttribute",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::GetNodeAttribute",3,"argos::UInt8 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("get_node_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("get_node_attribute",3,SWIGTYPE_p_unsigned_char);
  }
  
  argos::GetNodeAttribute(*arg1,(std::string const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_node_attribute__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  argos::SInt8 *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::GetNodeAttribute",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::GetNodeAttribute",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::GetNodeAttribute",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::GetNodeAttribute",3,"argos::SInt8 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("get_node_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_signed_char,0))){
    SWIG_fail_ptr("get_node_attribute",3,SWIGTYPE_p_signed_char);
  }
  
  argos::GetNodeAttribute(*arg1,(std::string const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_node_attribute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_get_node_attribute__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_get_node_attribute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_signed_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_get_node_attribute__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'get_node_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::GetNodeAttribute(argos::TConfigurationNode &,std::string const &,bool &)\n"
    "    argos::GetNodeAttribute(argos::TConfigurationNode &,std::string const &,argos::UInt8 &)\n"
    "    argos::GetNodeAttribute(argos::TConfigurationNode &,std::string const &,argos::SInt8 &)\n");
  lua_error(L);return 0;
}


static int _wrap_get_node_attribute_or_default__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::GetNodeAttributeOrDefault",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",3,"bool &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",4,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("get_node_attribute_or_default",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("get_node_attribute_or_default",3,SWIGTYPE_p_bool);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  argos::GetNodeAttributeOrDefault(*arg1,(std::string const &)*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_node_attribute_or_default__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  argos::UInt8 *arg3 = 0 ;
  argos::UInt8 arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::GetNodeAttributeOrDefault",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",3,"argos::UInt8 &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",4,"argos::UInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("get_node_attribute_or_default",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("get_node_attribute_or_default",3,SWIGTYPE_p_unsigned_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (argos::UInt8 const)lua_tonumber(L, 4);
  argos::GetNodeAttributeOrDefault(*arg1,(std::string const &)*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_node_attribute_or_default__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  argos::SInt8 *arg3 = 0 ;
  argos::SInt8 arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::GetNodeAttributeOrDefault",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",3,"argos::SInt8 &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("argos::GetNodeAttributeOrDefault",4,"argos::SInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("get_node_attribute_or_default",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_signed_char,0))){
    SWIG_fail_ptr("get_node_attribute_or_default",3,SWIGTYPE_p_signed_char);
  }
  
  arg4 = (argos::SInt8 const)lua_tonumber(L, 4);
  argos::GetNodeAttributeOrDefault(*arg1,(std::string const &)*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_node_attribute_or_default(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_get_node_attribute_or_default__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_get_node_attribute_or_default__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_signed_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_get_node_attribute_or_default__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'get_node_attribute_or_default'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::GetNodeAttributeOrDefault(argos::TConfigurationNode &,std::string const &,bool &,bool const)\n"
    "    argos::GetNodeAttributeOrDefault(argos::TConfigurationNode &,std::string const &,argos::UInt8 &,argos::UInt8 const)\n"
    "    argos::GetNodeAttributeOrDefault(argos::TConfigurationNode &,std::string const &,argos::SInt8 &,argos::SInt8 const)\n");
  lua_error(L);return 0;
}


static int _wrap_set_node_attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::SetNodeAttribute",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::SetNodeAttribute",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::SetNodeAttribute",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("argos::SetNodeAttribute",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("set_node_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  argos::SetNodeAttribute(*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_set_node_attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::TConfigurationNode *arg1 = 0 ;
  std::string *arg2 = 0 ;
  argos::UInt8 arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::SetNodeAttribute",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::SetNodeAttribute",1,"argos::TConfigurationNode &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::SetNodeAttribute",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::SetNodeAttribute",3,"argos::UInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("set_node_attribute",1,SWIGTYPE_p_ticpp__Element);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (argos::UInt8 const)lua_tonumber(L, 3);
  argos::SetNodeAttribute(*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_set_node_attribute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_set_node_attribute__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ticpp__Element, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_set_node_attribute__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'set_node_attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::SetNodeAttribute(argos::TConfigurationNode &,std::string const &,bool const)\n"
    "    argos::SetNodeAttribute(argos::TConfigurationNode &,std::string const &,argos::UInt8 const)\n");
  lua_error(L);return 0;
}


static int _wrap_BaseConfigurableResource_init(lua_State* L) {
  int SWIG_arg = 0;
  argos::CBaseConfigurableResource *arg1 = (argos::CBaseConfigurableResource *) 0 ;
  argos::TConfigurationNode *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CBaseConfigurableResource::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CBaseConfigurableResource::Init",1,"argos::CBaseConfigurableResource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CBaseConfigurableResource::Init",2,"argos::TConfigurationNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CBaseConfigurableResource,0))){
    SWIG_fail_ptr("BaseConfigurableResource_init",1,SWIGTYPE_p_argos__CBaseConfigurableResource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("BaseConfigurableResource_init",2,SWIGTYPE_p_ticpp__Element);
  }
  
  (arg1)->Init(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseConfigurableResource_destroy(lua_State* L) {
  int SWIG_arg = 0;
  argos::CBaseConfigurableResource *arg1 = (argos::CBaseConfigurableResource *) 0 ;
  
  SWIG_check_num_args("argos::CBaseConfigurableResource::Destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CBaseConfigurableResource::Destroy",1,"argos::CBaseConfigurableResource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CBaseConfigurableResource,0))){
    SWIG_fail_ptr("BaseConfigurableResource_destroy",1,SWIGTYPE_p_argos__CBaseConfigurableResource);
  }
  
  (arg1)->Destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseConfigurableResource(void *obj) {
argos::CBaseConfigurableResource *arg1 = (argos::CBaseConfigurableResource *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CBaseConfigurableResource_methods[] = {
    {"init", _wrap_BaseConfigurableResource_init}, 
    {"destroy", _wrap_BaseConfigurableResource_destroy}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CBaseConfigurableResource_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CBaseConfigurableResource_bases[] = {0};
static const char *swig_argos_CBaseConfigurableResource_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CBaseConfigurableResource = { "BaseConfigurableResource", &SWIGTYPE_p_argos__CBaseConfigurableResource,0, swig_delete_BaseConfigurableResource, swig_argos_CBaseConfigurableResource_methods, swig_argos_CBaseConfigurableResource_attributes, swig_argos_CBaseConfigurableResource_bases, swig_argos_CBaseConfigurableResource_base_names };

static int _wrap_Memento_save_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CMemento *arg1 = (argos::CMemento *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CMemento::SaveState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CMemento::SaveState",1,"argos::CMemento *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CMemento::SaveState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CMemento,0))){
    SWIG_fail_ptr("Memento_save_state",1,SWIGTYPE_p_argos__CMemento);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("Memento_save_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->SaveState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memento_load_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CMemento *arg1 = (argos::CMemento *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CMemento::LoadState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CMemento::LoadState",1,"argos::CMemento *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CMemento::LoadState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CMemento,0))){
    SWIG_fail_ptr("Memento_load_state",1,SWIGTYPE_p_argos__CMemento);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("Memento_load_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->LoadState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Memento(void *obj) {
argos::CMemento *arg1 = (argos::CMemento *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CMemento_methods[] = {
    {"save_state", _wrap_Memento_save_state}, 
    {"load_state", _wrap_Memento_load_state}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CMemento_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CMemento_bases[] = {0};
static const char *swig_argos_CMemento_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CMemento = { "Memento", &SWIGTYPE_p_argos__CMemento,0, swig_delete_Memento, swig_argos_CMemento_methods, swig_argos_CMemento_attributes, swig_argos_CMemento_bases, swig_argos_CMemento_base_names };

static int _wrap_tokenize(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string const &arg3_defvalue = " " ;
  std::string *arg3 = (std::string *) &arg3_defvalue ;
  std::string temp1 ;
  std::string temp3 ;
  
  SWIG_check_num_args("argos::Tokenize",2,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::Tokenize",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::Tokenize",2,"std::vector< std::string > &");
  if(lua_gettop(L)>=3 && !lua_isstring(L,3)) SWIG_fail_arg("argos::Tokenize",3,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("tokenize",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  if(lua_gettop(L)>=3){
    temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  }
  argos::Tokenize((std::string const &)*arg1,*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_upper_case(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("argos::StringToUpperCase",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::StringToUpperCase",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = argos::StringToUpperCase((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_lower_case(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("argos::StringToLowerCase",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::StringToLowerCase",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = argos::StringToLowerCase((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expand_argo_sinstall_dir(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("argos::ExpandARGoSInstallDir",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::ExpandARGoSInstallDir",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = argos::ExpandARGoSInstallDir((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_replace(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("argos::Replace",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::Replace",1,"std::string &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::Replace",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("argos::Replace",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("replace",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  argos::Replace(*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_match_pattern(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  std::string temp1 ;
  bool result;
  
  SWIG_check_num_args("argos::MatchPattern",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::MatchPattern",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::MatchPattern",2,"std::string const");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (bool)argos::MatchPattern((std::string const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_BLACK_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::BLACK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::BLACK",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_BLACK_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::BLACK = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_BLACK_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::BLACK",0,0)
  result = (argos::CColor *)&argos::CColor::BLACK;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_WHITE_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::WHITE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::WHITE",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_WHITE_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::WHITE = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_WHITE_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::WHITE",0,0)
  result = (argos::CColor *)&argos::CColor::WHITE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_RED_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::RED",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::RED",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_RED_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::RED = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_RED_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::RED",0,0)
  result = (argos::CColor *)&argos::CColor::RED;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GREEN_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::GREEN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GREEN",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_GREEN_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::GREEN = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GREEN_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::GREEN",0,0)
  result = (argos::CColor *)&argos::CColor::GREEN;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_BLUE_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::BLUE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::BLUE",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_BLUE_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::BLUE = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_BLUE_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::BLUE",0,0)
  result = (argos::CColor *)&argos::CColor::BLUE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_MAGENTA_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::MAGENTA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::MAGENTA",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_MAGENTA_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::MAGENTA = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_MAGENTA_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::MAGENTA",0,0)
  result = (argos::CColor *)&argos::CColor::MAGENTA;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_CYAN_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::CYAN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::CYAN",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_CYAN_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::CYAN = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_CYAN_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::CYAN",0,0)
  result = (argos::CColor *)&argos::CColor::CYAN;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_YELLOW_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::YELLOW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::YELLOW",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_YELLOW_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::YELLOW = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_YELLOW_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::YELLOW",0,0)
  result = (argos::CColor *)&argos::CColor::YELLOW;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_ORANGE_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::ORANGE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::ORANGE",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_ORANGE_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::ORANGE = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_ORANGE_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::ORANGE",0,0)
  result = (argos::CColor *)&argos::CColor::ORANGE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY10_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GRAY10",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_GRAY10_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::GRAY10 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY10_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY10",0,0)
  result = (argos::CColor *)&argos::CColor::GRAY10;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY20_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY20",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GRAY20",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_GRAY20_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::GRAY20 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY20_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY20",0,0)
  result = (argos::CColor *)&argos::CColor::GRAY20;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY30_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY30",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GRAY30",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_GRAY30_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::GRAY30 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY30_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY30",0,0)
  result = (argos::CColor *)&argos::CColor::GRAY30;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY40_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY40",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GRAY40",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_GRAY40_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::GRAY40 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY40_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY40",0,0)
  result = (argos::CColor *)&argos::CColor::GRAY40;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY50_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY50",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GRAY50",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_GRAY50_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::GRAY50 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY50_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY50",0,0)
  result = (argos::CColor *)&argos::CColor::GRAY50;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY60_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY60",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GRAY60",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_GRAY60_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::GRAY60 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY60_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY60",0,0)
  result = (argos::CColor *)&argos::CColor::GRAY60;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY70_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY70",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GRAY70",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_GRAY70_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::GRAY70 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY70_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY70",0,0)
  result = (argos::CColor *)&argos::CColor::GRAY70;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY80_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY80",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GRAY80",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_GRAY80_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::GRAY80 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY80_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY80",0,0)
  result = (argos::CColor *)&argos::CColor::GRAY80;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY90_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY90",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GRAY90",1,"argos::CColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_GRAY90_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  argos::CColor::GRAY90 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_GRAY90_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::GRAY90",0,0)
  result = (argos::CColor *)&argos::CColor::GRAY90;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::CColor",0,0)
  result = (argos::CColor *)new argos::CColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt8 arg1 ;
  argos::UInt8 arg2 ;
  argos::UInt8 arg3 ;
  argos::UInt8 arg4 ;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::CColor",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CColor::CColor",1,"argos::UInt8 const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CColor::CColor",2,"argos::UInt8 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CColor::CColor",3,"argos::UInt8 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("argos::CColor::CColor",4,"argos::UInt8 const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (argos::UInt8 const)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (argos::UInt8 const)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (argos::UInt8 const)lua_tonumber(L, 4);
  result = (argos::CColor *)new argos::CColor(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt8 arg1 ;
  argos::UInt8 arg2 ;
  argos::UInt8 arg3 ;
  argos::CColor *result = 0 ;
  
  SWIG_check_num_args("argos::CColor::CColor",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CColor::CColor",1,"argos::UInt8 const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CColor::CColor",2,"argos::UInt8 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CColor::CColor",3,"argos::UInt8 const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (argos::UInt8 const)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (argos::UInt8 const)lua_tonumber(L, 3);
  result = (argos::CColor *)new argos::CColor(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Color__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Color__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Color__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Color'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CColor::CColor()\n"
    "    argos::CColor::CColor(argos::UInt8 const,argos::UInt8 const,argos::UInt8 const,argos::UInt8 const)\n"
    "    argos::CColor::CColor(argos::UInt8 const,argos::UInt8 const,argos::UInt8 const)\n");
  lua_error(L);return 0;
}


static int _wrap_Color_to_gray_scale(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CColor::ToGrayScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::ToGrayScale",1,"argos::CColor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_to_gray_scale",1,SWIGTYPE_p_argos__CColor);
  }
  
  result = (argos::Real)((argos::CColor const *)arg1)->ToGrayScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_get_red(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::UInt8 result;
  
  SWIG_check_num_args("argos::CColor::GetRed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GetRed",1,"argos::CColor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_get_red",1,SWIGTYPE_p_argos__CColor);
  }
  
  result = (argos::UInt8)((argos::CColor const *)arg1)->GetRed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_set_red(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::UInt8 arg2 ;
  
  SWIG_check_num_args("argos::CColor::SetRed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::SetRed",1,"argos::CColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CColor::SetRed",2,"argos::UInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_set_red",1,SWIGTYPE_p_argos__CColor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  (arg1)->SetRed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_get_green(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::UInt8 result;
  
  SWIG_check_num_args("argos::CColor::GetGreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GetGreen",1,"argos::CColor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_get_green",1,SWIGTYPE_p_argos__CColor);
  }
  
  result = (argos::UInt8)((argos::CColor const *)arg1)->GetGreen();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_set_green(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::UInt8 arg2 ;
  
  SWIG_check_num_args("argos::CColor::SetGreen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::SetGreen",1,"argos::CColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CColor::SetGreen",2,"argos::UInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_set_green",1,SWIGTYPE_p_argos__CColor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  (arg1)->SetGreen(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_get_blue(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::UInt8 result;
  
  SWIG_check_num_args("argos::CColor::GetBlue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GetBlue",1,"argos::CColor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_get_blue",1,SWIGTYPE_p_argos__CColor);
  }
  
  result = (argos::UInt8)((argos::CColor const *)arg1)->GetBlue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_set_blue(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::UInt8 arg2 ;
  
  SWIG_check_num_args("argos::CColor::SetBlue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::SetBlue",1,"argos::CColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CColor::SetBlue",2,"argos::UInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_set_blue",1,SWIGTYPE_p_argos__CColor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  (arg1)->SetBlue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_get_alpha(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::UInt8 result;
  
  SWIG_check_num_args("argos::CColor::GetAlpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::GetAlpha",1,"argos::CColor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_get_alpha",1,SWIGTYPE_p_argos__CColor);
  }
  
  result = (argos::UInt8)((argos::CColor const *)arg1)->GetAlpha();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_set_alpha(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::UInt8 arg2 ;
  
  SWIG_check_num_args("argos::CColor::SetAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::SetAlpha",1,"argos::CColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CColor::SetAlpha",2,"argos::UInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_set_alpha",1,SWIGTYPE_p_argos__CColor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  (arg1)->SetAlpha(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::UInt8 arg2 ;
  argos::UInt8 arg3 ;
  argos::UInt8 arg4 ;
  argos::UInt8 arg5 ;
  
  SWIG_check_num_args("argos::CColor::Set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::Set",1,"argos::CColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CColor::Set",2,"argos::UInt8 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CColor::Set",3,"argos::UInt8 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("argos::CColor::Set",4,"argos::UInt8 const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("argos::CColor::Set",5,"argos::UInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (argos::UInt8 const)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (argos::UInt8 const)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (argos::UInt8 const)lua_tonumber(L, 5);
  (arg1)->Set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::UInt8 arg2 ;
  argos::UInt8 arg3 ;
  argos::UInt8 arg4 ;
  
  SWIG_check_num_args("argos::CColor::Set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::Set",1,"argos::CColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CColor::Set",2,"argos::UInt8 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CColor::Set",3,"argos::UInt8 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("argos::CColor::Set",4,"argos::UInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color_set",1,SWIGTYPE_p_argos__CColor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (argos::UInt8 const)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (argos::UInt8 const)lua_tonumber(L, 4);
  (arg1)->Set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_set(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Color_set__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Color_set__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CColor::Set(argos::UInt8 const,argos::UInt8 const,argos::UInt8 const,argos::UInt8 const)\n"
    "    argos::CColor::Set(argos::UInt8 const,argos::UInt8 const,argos::UInt8 const)\n");
  lua_error(L);return 0;
}


static int _wrap_Color___eq(lua_State* L) {
  int SWIG_arg = 0;
  argos::CColor *arg1 = (argos::CColor *) 0 ;
  argos::CColor *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CColor::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CColor::operator ==",1,"argos::CColor const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CColor::operator ==",2,"argos::CColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color___eq",1,SWIGTYPE_p_argos__CColor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("Color___eq",2,SWIGTYPE_p_argos__CColor);
  }
  
  result = (bool)((argos::CColor const *)arg1)->operator ==((argos::CColor const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color(void *obj) {
argos::CColor *arg1 = (argos::CColor *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CColor_methods[] = {
    {"to_gray_scale", _wrap_Color_to_gray_scale}, 
    {"get_red", _wrap_Color_get_red}, 
    {"set_red", _wrap_Color_set_red}, 
    {"get_green", _wrap_Color_get_green}, 
    {"set_green", _wrap_Color_set_green}, 
    {"get_blue", _wrap_Color_get_blue}, 
    {"set_blue", _wrap_Color_set_blue}, 
    {"get_alpha", _wrap_Color_get_alpha}, 
    {"set_alpha", _wrap_Color_set_alpha}, 
    {"set", _wrap_Color_set}, 
    {"__eq", _wrap_Color___eq}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CColor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CColor_bases[] = {0};
static const char *swig_argos_CColor_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CColor = { "Color", &SWIGTYPE_p_argos__CColor,_wrap_new_Color, swig_delete_Color, swig_argos_CColor_methods, swig_argos_CColor_attributes, swig_argos_CColor_bases, swig_argos_CColor_base_names };

static int _wrap_abs(lua_State* L) {
  int SWIG_arg = 0;
  argos::SInt32 arg1 ;
  argos::SInt32 result;
  
  SWIG_check_num_args("argos::Abs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::Abs",1,"argos::SInt32");
  arg1 = (argos::SInt32)lua_tonumber(L, 1);
  result = (argos::SInt32)argos::Abs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floor(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::SInt32 result;
  
  SWIG_check_num_args("argos::Floor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::Floor",1,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  result = (argos::SInt32)argos::Floor(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceil(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::SInt32 result;
  
  SWIG_check_num_args("argos::Ceil",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::Ceil",1,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  result = (argos::SInt32)argos::Ceil(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_round_closest_to_zero(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::SInt32 result;
  
  SWIG_check_num_args("argos::RoundClosestToZero",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::RoundClosestToZero",1,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  result = (argos::SInt32)argos::RoundClosestToZero(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_eq_absolute(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::Real arg2 ;
  argos::Real arg3 ;
  bool result;
  
  SWIG_check_num_args("argos::DoubleEqAbsolute",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::DoubleEqAbsolute",1,"argos::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::DoubleEqAbsolute",2,"argos::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::DoubleEqAbsolute",3,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  arg2 = (argos::Real)lua_tonumber(L, 2);
  arg3 = (argos::Real)lua_tonumber(L, 3);
  result = (bool)argos::DoubleEqAbsolute(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_eq(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::Real arg2 ;
  bool result;
  
  SWIG_check_num_args("argos::DoubleEq",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::DoubleEq",1,"argos::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::DoubleEq",2,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = (bool)argos::DoubleEq(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_PI_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::PI",0,0)
  result = (argos::CRadians *)&argos::CRadians::PI;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_TWO_PI_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::TWO_PI",0,0)
  result = (argos::CRadians *)&argos::CRadians::TWO_PI;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_PI_OVER_TWO_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::PI_OVER_TWO",0,0)
  result = (argos::CRadians *)&argos::CRadians::PI_OVER_TWO;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_PI_OVER_THREE_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::PI_OVER_THREE",0,0)
  result = (argos::CRadians *)&argos::CRadians::PI_OVER_THREE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_PI_OVER_FOUR_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::PI_OVER_FOUR",0,0)
  result = (argos::CRadians *)&argos::CRadians::PI_OVER_FOUR;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_PI_OVER_SIX_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::PI_OVER_SIX",0,0)
  result = (argos::CRadians *)&argos::CRadians::PI_OVER_SIX;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_ZERO_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::ZERO",0,0)
  result = (argos::CRadians *)&argos::CRadians::ZERO;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Radians__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::CRadians",0,0)
  result = (argos::CRadians *)new argos::CRadians();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Radians__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::CRadians",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CRadians::CRadians",1,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  result = (argos::CRadians *)new argos::CRadians(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Radians(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Radians__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Radians__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Radians'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CRadians::CRadians()\n"
    "    argos::CRadians::CRadians(argos::Real)\n");
  lua_error(L);return 0;
}


static int _wrap_Radians_from_value_in_degrees(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::CRadians::FromValueInDegrees",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::FromValueInDegrees",1,"argos::CRadians *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CRadians::FromValueInDegrees",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians_from_value_in_degrees",1,SWIGTYPE_p_argos__CRadians);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  (arg1)->FromValueInDegrees(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_from_value_in_aseba(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::SInt16 arg2 ;
  
  SWIG_check_num_args("argos::CRadians::FromValueInAseba",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::FromValueInAseba",1,"argos::CRadians *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CRadians::FromValueInAseba",2,"argos::SInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians_from_value_in_aseba",1,SWIGTYPE_p_argos__CRadians);
  }
  
  arg2 = (argos::SInt16)lua_tonumber(L, 2);
  (arg1)->FromValueInAseba(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_get_value(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CRadians::GetValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::GetValue",1,"argos::CRadians const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians_get_value",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::Real)((argos::CRadians const *)arg1)->GetValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_get_absolute_value(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CRadians::GetAbsoluteValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::GetAbsoluteValue",1,"argos::CRadians const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians_get_absolute_value",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::Real)((argos::CRadians const *)arg1)->GetAbsoluteValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_set_value(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::CRadians::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::SetValue",1,"argos::CRadians *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CRadians::SetValue",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians_set_value",1,SWIGTYPE_p_argos__CRadians);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  (arg1)->SetValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_signed_normalize(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::SignedNormalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::SignedNormalize",1,"argos::CRadians *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians_signed_normalize",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CRadians *) &(arg1)->SignedNormalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_unsigned_normalize(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::UnsignedNormalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::UnsignedNormalize",1,"argos::CRadians *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians_unsigned_normalize",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CRadians *) &(arg1)->UnsignedNormalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_negate(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::Negate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::Negate",1,"argos::CRadians *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians_negate",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CRadians *) &(arg1)->Negate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::operator +",1,"argos::CRadians *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___add",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CRadians *) &(arg1)->operator +();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians___unm(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::CRadians::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::operator -",1,"argos::CRadians const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___unm",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = ((argos::CRadians const *)arg1)->operator -();
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians *arg2 = 0 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::CRadians::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::operator +",1,"argos::CRadians const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRadians::operator +",2,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___add",1,SWIGTYPE_p_argos__CRadians);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___add",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = ((argos::CRadians const *)arg1)->operator +((argos::CRadians const &)*arg2);
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Radians___add__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Radians___add__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Radians___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CRadians::operator +()\n"
    "    argos::CRadians::operator +(argos::CRadians const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Radians___sub(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians *arg2 = 0 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::CRadians::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::operator -",1,"argos::CRadians const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRadians::operator -",2,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___sub",1,SWIGTYPE_p_argos__CRadians);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___sub",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = ((argos::CRadians const *)arg1)->operator -((argos::CRadians const &)*arg2);
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians___mul(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::Real arg2 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::CRadians::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::operator *",1,"argos::CRadians const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CRadians::operator *",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___mul",1,SWIGTYPE_p_argos__CRadians);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = ((argos::CRadians const *)arg1)->operator *(arg2);
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians *arg2 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CRadians::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::operator /",1,"argos::CRadians const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRadians::operator /",2,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___div",1,SWIGTYPE_p_argos__CRadians);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___div",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::Real)((argos::CRadians const *)arg1)->operator /((argos::CRadians const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::Real arg2 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::CRadians::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::operator /",1,"argos::CRadians const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CRadians::operator /",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___div",1,SWIGTYPE_p_argos__CRadians);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = ((argos::CRadians const *)arg1)->operator /(arg2);
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Radians___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Radians___div__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Radians___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CRadians::operator /(argos::CRadians const &) const\n"
    "    argos::CRadians::operator /(argos::Real) const\n");
  lua_error(L);return 0;
}


static int _wrap_Radians___lt(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CRadians::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::operator <",1,"argos::CRadians const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRadians::operator <",2,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___lt",1,SWIGTYPE_p_argos__CRadians);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___lt",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (bool)((argos::CRadians const *)arg1)->operator <((argos::CRadians const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians___le(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CRadians::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::operator <=",1,"argos::CRadians const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRadians::operator <=",2,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___le",1,SWIGTYPE_p_argos__CRadians);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___le",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (bool)((argos::CRadians const *)arg1)->operator <=((argos::CRadians const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians___eq(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = (argos::CRadians *) 0 ;
  argos::CRadians *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CRadians::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRadians::operator ==",1,"argos::CRadians const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRadians::operator ==",2,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___eq",1,SWIGTYPE_p_argos__CRadians);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Radians___eq",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (bool)((argos::CRadians const *)arg1)->operator ==((argos::CRadians const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_SIGNED_RANGE_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRange< argos::CRadians > *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::SIGNED_RANGE",0,0)
  result = (argos::CRange< argos::CRadians > *)&argos::CRadians::SIGNED_RANGE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRangeT_argos__CRadians_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_UNSIGNED_RANGE_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRange< argos::CRadians > *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::UNSIGNED_RANGE",0,0)
  result = (argos::CRange< argos::CRadians > *)&argos::CRadians::UNSIGNED_RANGE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRangeT_argos__CRadians_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_ASEBA_RANGE_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRange< argos::SInt32 > *result = 0 ;
  
  SWIG_check_num_args("argos::CRadians::ASEBA_RANGE",0,0)
  result = (argos::CRange< argos::SInt32 > *)&argos::CRadians::ASEBA_RANGE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRangeT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Radians_RADIANS_TO_DEGREES_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real result;
  
  SWIG_check_num_args("argos::CRadians::RADIANS_TO_DEGREES",0,0)
  result = (argos::Real)(argos::Real)argos::CRadians::RADIANS_TO_DEGREES;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Radians(void *obj) {
argos::CRadians *arg1 = (argos::CRadians *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CRadians_methods[] = {
    {"from_value_in_degrees", _wrap_Radians_from_value_in_degrees}, 
    {"from_value_in_aseba", _wrap_Radians_from_value_in_aseba}, 
    {"get_value", _wrap_Radians_get_value}, 
    {"get_absolute_value", _wrap_Radians_get_absolute_value}, 
    {"set_value", _wrap_Radians_set_value}, 
    {"signed_normalize", _wrap_Radians_signed_normalize}, 
    {"unsigned_normalize", _wrap_Radians_unsigned_normalize}, 
    {"negate", _wrap_Radians_negate}, 
    {"__unm", _wrap_Radians___unm}, 
    {"__add", _wrap_Radians___add}, 
    {"__sub", _wrap_Radians___sub}, 
    {"__mul", _wrap_Radians___mul}, 
    {"__div", _wrap_Radians___div}, 
    {"__lt", _wrap_Radians___lt}, 
    {"__le", _wrap_Radians___le}, 
    {"__eq", _wrap_Radians___eq}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CRadians_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CRadians_bases[] = {0};
static const char *swig_argos_CRadians_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CRadians = { "Radians", &SWIGTYPE_p_argos__CRadians,_wrap_new_Radians, swig_delete_Radians, swig_argos_CRadians_methods, swig_argos_CRadians_attributes, swig_argos_CRadians_bases, swig_argos_CRadians_base_names };

static int _wrap_new_Degrees__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *result = 0 ;
  
  SWIG_check_num_args("argos::CDegrees::CDegrees",0,0)
  result = (argos::CDegrees *)new argos::CDegrees();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CDegrees,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Degrees__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::CDegrees *result = 0 ;
  
  SWIG_check_num_args("argos::CDegrees::CDegrees",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CDegrees::CDegrees",1,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  result = (argos::CDegrees *)new argos::CDegrees(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CDegrees,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Degrees(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Degrees__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Degrees__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Degrees'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CDegrees::CDegrees()\n"
    "    argos::CDegrees::CDegrees(argos::Real)\n");
  lua_error(L);return 0;
}


static int _wrap_Degrees_from_value_in_radians(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::CDegrees::FromValueInRadians",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::FromValueInRadians",1,"argos::CDegrees *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CDegrees::FromValueInRadians",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees_from_value_in_radians",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  (arg1)->FromValueInRadians(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees_from_value_in_aseba(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::SInt16 arg2 ;
  
  SWIG_check_num_args("argos::CDegrees::FromValueInAseba",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::FromValueInAseba",1,"argos::CDegrees *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CDegrees::FromValueInAseba",2,"argos::SInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees_from_value_in_aseba",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  arg2 = (argos::SInt16)lua_tonumber(L, 2);
  (arg1)->FromValueInAseba(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees_get_value(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CDegrees::GetValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::GetValue",1,"argos::CDegrees const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees_get_value",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = (argos::Real)((argos::CDegrees const *)arg1)->GetValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees_set_value(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::CDegrees::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::SetValue",1,"argos::CDegrees *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CDegrees::SetValue",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees_set_value",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  (arg1)->SetValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees_signed_normalize(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::CDegrees *result = 0 ;
  
  SWIG_check_num_args("argos::CDegrees::SignedNormalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::SignedNormalize",1,"argos::CDegrees *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees_signed_normalize",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = (argos::CDegrees *) &(arg1)->SignedNormalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CDegrees,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees_unsigned_normalize(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::CDegrees *result = 0 ;
  
  SWIG_check_num_args("argos::CDegrees::UnsignedNormalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::UnsignedNormalize",1,"argos::CDegrees *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees_unsigned_normalize",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = (argos::CDegrees *) &(arg1)->UnsignedNormalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CDegrees,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::CDegrees *result = 0 ;
  
  SWIG_check_num_args("argos::CDegrees::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::operator +",1,"argos::CDegrees *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___add",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = (argos::CDegrees *) &(arg1)->operator +();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CDegrees,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees___unm(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::CDegrees result;
  
  SWIG_check_num_args("argos::CDegrees::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::operator -",1,"argos::CDegrees const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___unm",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = ((argos::CDegrees const *)arg1)->operator -();
  {
    argos::CDegrees * resultptr = new argos::CDegrees((const argos::CDegrees &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CDegrees,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::CDegrees *arg2 = 0 ;
  argos::CDegrees result;
  
  SWIG_check_num_args("argos::CDegrees::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::operator +",1,"argos::CDegrees const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CDegrees::operator +",2,"argos::CDegrees const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___add",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___add",2,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = ((argos::CDegrees const *)arg1)->operator +((argos::CDegrees const &)*arg2);
  {
    argos::CDegrees * resultptr = new argos::CDegrees((const argos::CDegrees &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CDegrees,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CDegrees, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Degrees___add__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CDegrees, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CDegrees, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Degrees___add__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Degrees___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CDegrees::operator +()\n"
    "    argos::CDegrees::operator +(argos::CDegrees const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Degrees___sub(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::CDegrees *arg2 = 0 ;
  argos::CDegrees result;
  
  SWIG_check_num_args("argos::CDegrees::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::operator -",1,"argos::CDegrees const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CDegrees::operator -",2,"argos::CDegrees const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___sub",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___sub",2,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = ((argos::CDegrees const *)arg1)->operator -((argos::CDegrees const &)*arg2);
  {
    argos::CDegrees * resultptr = new argos::CDegrees((const argos::CDegrees &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CDegrees,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees___mul(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::Real arg2 ;
  argos::CDegrees result;
  
  SWIG_check_num_args("argos::CDegrees::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::operator *",1,"argos::CDegrees const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CDegrees::operator *",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___mul",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = ((argos::CDegrees const *)arg1)->operator *(arg2);
  {
    argos::CDegrees * resultptr = new argos::CDegrees((const argos::CDegrees &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CDegrees,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::CDegrees *arg2 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CDegrees::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::operator /",1,"argos::CDegrees const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CDegrees::operator /",2,"argos::CDegrees const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___div",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___div",2,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = (argos::Real)((argos::CDegrees const *)arg1)->operator /((argos::CDegrees const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::Real arg2 ;
  argos::CDegrees result;
  
  SWIG_check_num_args("argos::CDegrees::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::operator /",1,"argos::CDegrees const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CDegrees::operator /",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___div",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = ((argos::CDegrees const *)arg1)->operator /(arg2);
  {
    argos::CDegrees * resultptr = new argos::CDegrees((const argos::CDegrees &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CDegrees,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CDegrees, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CDegrees, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Degrees___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CDegrees, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Degrees___div__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Degrees___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CDegrees::operator /(argos::CDegrees const &) const\n"
    "    argos::CDegrees::operator /(argos::Real) const\n");
  lua_error(L);return 0;
}


static int _wrap_Degrees___lt(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::CDegrees *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CDegrees::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::operator <",1,"argos::CDegrees const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CDegrees::operator <",2,"argos::CDegrees const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___lt",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___lt",2,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = (bool)((argos::CDegrees const *)arg1)->operator <((argos::CDegrees const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees___le(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::CDegrees *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CDegrees::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::operator <=",1,"argos::CDegrees const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CDegrees::operator <=",2,"argos::CDegrees const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___le",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___le",2,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = (bool)((argos::CDegrees const *)arg1)->operator <=((argos::CDegrees const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Degrees___eq(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = (argos::CDegrees *) 0 ;
  argos::CDegrees *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CDegrees::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CDegrees::operator ==",1,"argos::CDegrees const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CDegrees::operator ==",2,"argos::CDegrees const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___eq",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("Degrees___eq",2,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = (bool)((argos::CDegrees const *)arg1)->operator ==((argos::CDegrees const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Degrees(void *obj) {
argos::CDegrees *arg1 = (argos::CDegrees *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CDegrees_methods[] = {
    {"from_value_in_radians", _wrap_Degrees_from_value_in_radians}, 
    {"from_value_in_aseba", _wrap_Degrees_from_value_in_aseba}, 
    {"get_value", _wrap_Degrees_get_value}, 
    {"set_value", _wrap_Degrees_set_value}, 
    {"signed_normalize", _wrap_Degrees_signed_normalize}, 
    {"unsigned_normalize", _wrap_Degrees_unsigned_normalize}, 
    {"__unm", _wrap_Degrees___unm}, 
    {"__add", _wrap_Degrees___add}, 
    {"__sub", _wrap_Degrees___sub}, 
    {"__mul", _wrap_Degrees___mul}, 
    {"__div", _wrap_Degrees___div}, 
    {"__lt", _wrap_Degrees___lt}, 
    {"__le", _wrap_Degrees___le}, 
    {"__eq", _wrap_Degrees___eq}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CDegrees_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CDegrees_bases[] = {0};
static const char *swig_argos_CDegrees_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CDegrees = { "Degrees", &SWIGTYPE_p_argos__CDegrees,_wrap_new_Degrees, swig_delete_Degrees, swig_argos_CDegrees_methods, swig_argos_CDegrees_attributes, swig_argos_CDegrees_bases, swig_argos_CDegrees_base_names };

static int _wrap_to_degrees(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = 0 ;
  argos::CDegrees result;
  
  SWIG_check_num_args("argos::ToDegrees",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::ToDegrees",1,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("to_degrees",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = argos::ToDegrees((argos::CRadians const &)*arg1);
  {
    argos::CDegrees * resultptr = new argos::CDegrees((const argos::CDegrees &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CDegrees,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_to_radians(lua_State* L) {
  int SWIG_arg = 0;
  argos::CDegrees *arg1 = 0 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::ToRadians",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::ToRadians",1,"argos::CDegrees const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CDegrees,0))){
    SWIG_fail_ptr("to_radians",1,SWIGTYPE_p_argos__CDegrees);
  }
  
  result = argos::ToRadians((argos::CDegrees const &)*arg1);
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::Sin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::Sin",1,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("sin",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::Real)argos::Sin((argos::CRadians const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::Cos",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::Cos",1,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("cos",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::Real)argos::Cos((argos::CRadians const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tan(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRadians *arg1 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::Tan",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::Tan",1,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("tan",1,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::Real)argos::Tan((argos::CRadians const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asin(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::ASin",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::ASin",1,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  result = argos::ASin(arg1);
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acos(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::ACos",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::ACos",1,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  result = argos::ACos(arg1);
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::Real arg2 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::ATan2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::ATan2",1,"argos::Real const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::ATan2",2,"argos::Real const");
  arg1 = (argos::Real const)lua_tonumber(L, 1);
  arg2 = (argos::Real const)lua_tonumber(L, 2);
  result = argos::ATan2(arg1,arg2);
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_X_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector2::X",0,0)
  result = (argos::CVector2 *)&argos::CVector2::X;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector2::Y",0,0)
  result = (argos::CVector2 *)&argos::CVector2::Y;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector2::CVector2",0,0)
  result = (argos::CVector2 *)new argos::CVector2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::Real arg2 ;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector2::CVector2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CVector2::CVector2",1,"argos::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector2::CVector2",2,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = (argos::CVector2 *)new argos::CVector2(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::CRadians *arg2 = 0 ;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector2::CVector2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CVector2::CVector2",1,"argos::Real");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector2::CVector2",2,"argos::CRadians const &");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("new_Vector2",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CVector2 *)new argos::CVector2(arg1,(argos::CRadians const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector2__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Vector2__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector2__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vector2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CVector2::CVector2()\n"
    "    argos::CVector2::CVector2(argos::Real,argos::Real)\n"
    "    argos::CVector2::CVector2(argos::Real,argos::CRadians const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_get_x(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector2::GetX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::GetX",1,"argos::CVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_get_x",1,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::Real)((argos::CVector2 const *)arg1)->GetX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_set_x(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::CVector2::SetX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::SetX",1,"argos::CVector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector2::SetX",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_set_x",1,SWIGTYPE_p_argos__CVector2);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  (arg1)->SetX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_get_y(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector2::GetY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::GetY",1,"argos::CVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_get_y",1,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::Real)((argos::CVector2 const *)arg1)->GetY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_set_y(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::CVector2::SetY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::SetY",1,"argos::CVector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector2::SetY",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_set_y",1,SWIGTYPE_p_argos__CVector2);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  (arg1)->SetY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::Real arg2 ;
  argos::Real arg3 ;
  
  SWIG_check_num_args("argos::CVector2::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::Set",1,"argos::CVector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector2::Set",2,"argos::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CVector2::Set",3,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_set",1,SWIGTYPE_p_argos__CVector2);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  arg3 = (argos::Real)lua_tonumber(L, 3);
  (arg1)->Set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_set_from_angle_and_length(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CRadians *arg2 = 0 ;
  argos::Real arg3 ;
  
  SWIG_check_num_args("argos::CVector2::SetFromAngleAndLength",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::SetFromAngleAndLength",1,"argos::CVector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector2::SetFromAngleAndLength",2,"argos::CRadians const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CVector2::SetFromAngleAndLength",3,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_set_from_angle_and_length",1,SWIGTYPE_p_argos__CVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector2_set_from_angle_and_length",2,SWIGTYPE_p_argos__CRadians);
  }
  
  arg3 = (argos::Real)lua_tonumber(L, 3);
  (arg1)->SetFromAngleAndLength((argos::CRadians const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_square_length(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector2::SquareLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::SquareLength",1,"argos::CVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_square_length",1,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::Real)((argos::CVector2 const *)arg1)->SquareLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_length(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector2::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::Length",1,"argos::CVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_length",1,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::Real)((argos::CVector2 const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_normalize(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector2::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::Normalize",1,"argos::CVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_normalize",1,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::CVector2 *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_angle(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::CVector2::Angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::Angle",1,"argos::CVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_angle",1,SWIGTYPE_p_argos__CVector2);
  }
  
  result = ((argos::CVector2 const *)arg1)->Angle();
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_rotate(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CRadians *arg2 = 0 ;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector2::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::Rotate",1,"argos::CVector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector2::Rotate",2,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_rotate",1,SWIGTYPE_p_argos__CVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector2_rotate",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CVector2 *) &(arg1)->Rotate((argos::CRadians const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_dot_product(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CVector2 *arg2 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector2::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::DotProduct",1,"argos::CVector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector2::DotProduct",2,"argos::CVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_dot_product",1,SWIGTYPE_p_argos__CVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_dot_product",2,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::Real)((argos::CVector2 const *)arg1)->DotProduct((argos::CVector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_scale(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::Real arg2 ;
  argos::Real arg3 ;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector2::Scale",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::Scale",1,"argos::CVector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector2::Scale",2,"argos::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CVector2::Scale",3,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_scale",1,SWIGTYPE_p_argos__CVector2);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  arg3 = (argos::Real)lua_tonumber(L, 3);
  result = (argos::CVector2 *) &(arg1)->Scale(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_perpendicularize(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector2::Perpendicularize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::Perpendicularize",1,"argos::CVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_perpendicularize",1,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::CVector2 *) &(arg1)->Perpendicularize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_absolute(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector2::Absolute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::Absolute",1,"argos::CVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2_absolute",1,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::CVector2 *) &(arg1)->Absolute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___eq(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CVector2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CVector2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::operator ==",1,"argos::CVector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector2::operator ==",2,"argos::CVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2___eq",1,SWIGTYPE_p_argos__CVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2___eq",2,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (bool)(arg1)->operator ==((argos::CVector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CVector2 *arg2 = 0 ;
  argos::CVector2 result;
  
  SWIG_check_num_args("argos::CVector2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::operator +",1,"argos::CVector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector2::operator +",2,"argos::CVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_argos__CVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2___add",2,SWIGTYPE_p_argos__CVector2);
  }
  
  result = ((argos::CVector2 const *)arg1)->operator +((argos::CVector2 const &)*arg2);
  {
    argos::CVector2 * resultptr = new argos::CVector2((const argos::CVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CVector2 *arg2 = 0 ;
  argos::CVector2 result;
  
  SWIG_check_num_args("argos::CVector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::operator -",1,"argos::CVector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector2::operator -",2,"argos::CVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2___sub",1,SWIGTYPE_p_argos__CVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2___sub",2,SWIGTYPE_p_argos__CVector2);
  }
  
  result = ((argos::CVector2 const *)arg1)->operator -((argos::CVector2 const &)*arg2);
  {
    argos::CVector2 * resultptr = new argos::CVector2((const argos::CVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::Real arg2 ;
  argos::CVector2 result;
  
  SWIG_check_num_args("argos::CVector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::operator *",1,"argos::CVector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector2::operator *",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_argos__CVector2);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = ((argos::CVector2 const *)arg1)->operator *(arg2);
  {
    argos::CVector2 * resultptr = new argos::CVector2((const argos::CVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::Real arg2 ;
  argos::CVector2 result;
  
  SWIG_check_num_args("argos::CVector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::operator /",1,"argos::CVector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector2::operator /",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_argos__CVector2);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = ((argos::CVector2 const *)arg1)->operator /(arg2);
  {
    argos::CVector2 * resultptr = new argos::CVector2((const argos::CVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___unm(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = (argos::CVector2 *) 0 ;
  argos::CVector2 result;
  
  SWIG_check_num_args("argos::CVector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector2::operator -",1,"argos::CVector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector2___unm",1,SWIGTYPE_p_argos__CVector2);
  }
  
  result = ((argos::CVector2 const *)arg1)->operator -();
  {
    argos::CVector2 * resultptr = new argos::CVector2((const argos::CVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2(void *obj) {
argos::CVector2 *arg1 = (argos::CVector2 *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CVector2_methods[] = {
    {"get_x", _wrap_Vector2_get_x}, 
    {"set_x", _wrap_Vector2_set_x}, 
    {"get_y", _wrap_Vector2_get_y}, 
    {"set_y", _wrap_Vector2_set_y}, 
    {"set", _wrap_Vector2_set}, 
    {"set_from_angle_and_length", _wrap_Vector2_set_from_angle_and_length}, 
    {"square_length", _wrap_Vector2_square_length}, 
    {"length", _wrap_Vector2_length}, 
    {"normalize", _wrap_Vector2_normalize}, 
    {"angle", _wrap_Vector2_angle}, 
    {"rotate", _wrap_Vector2_rotate}, 
    {"dot_product", _wrap_Vector2_dot_product}, 
    {"scale", _wrap_Vector2_scale}, 
    {"perpendicularize", _wrap_Vector2_perpendicularize}, 
    {"absolute", _wrap_Vector2_absolute}, 
    {"__eq", _wrap_Vector2___eq}, 
    {"__add", _wrap_Vector2___add}, 
    {"__sub", _wrap_Vector2___sub}, 
    {"__mul", _wrap_Vector2___mul}, 
    {"__div", _wrap_Vector2___div}, 
    {"__unm", _wrap_Vector2___unm}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CVector2_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CVector2_bases[] = {0};
static const char *swig_argos_CVector2_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CVector2 = { "Vector2", &SWIGTYPE_p_argos__CVector2,_wrap_new_Vector2, swig_delete_Vector2, swig_argos_CVector2_methods, swig_argos_CVector2_attributes, swig_argos_CVector2_bases, swig_argos_CVector2_base_names };

static int _wrap_square_distance__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = 0 ;
  argos::CVector2 *arg2 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::SquareDistance",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::SquareDistance",1,"argos::CVector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::SquareDistance",2,"argos::CVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("square_distance",1,SWIGTYPE_p_argos__CVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("square_distance",2,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::Real)argos::SquareDistance((argos::CVector2 const &)*arg1,(argos::CVector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_distance__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector2 *arg1 = 0 ;
  argos::CVector2 *arg2 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::Distance",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::Distance",1,"argos::CVector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::Distance",2,"argos::CVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("distance",1,SWIGTYPE_p_argos__CVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("distance",2,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::Real)argos::Distance((argos::CVector2 const &)*arg1,(argos::CVector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_X_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::X",0,0)
  result = (argos::CVector3 *)&argos::CVector3::X;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::Y",0,0)
  result = (argos::CVector3 *)&argos::CVector3::Y;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::Z",0,0)
  result = (argos::CVector3 *)&argos::CVector3::Z;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ZERO_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::ZERO",0,0)
  result = (argos::CVector3 *)&argos::CVector3::ZERO;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::CVector3",0,0)
  result = (argos::CVector3 *)new argos::CVector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::Real arg2 ;
  argos::Real arg3 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::CVector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CVector3::CVector3",1,"argos::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector3::CVector3",2,"argos::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CVector3::CVector3",3,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  arg2 = (argos::Real)lua_tonumber(L, 2);
  arg3 = (argos::Real)lua_tonumber(L, 3);
  result = (argos::CVector3 *)new argos::CVector3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::CRadians *arg2 = 0 ;
  argos::CRadians *arg3 = 0 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::CVector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CVector3::CVector3",1,"argos::Real");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::CVector3",2,"argos::CRadians const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::CVector3::CVector3",3,"argos::CRadians const &");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("new_Vector3",2,SWIGTYPE_p_argos__CRadians);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("new_Vector3",3,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CVector3 *)new argos::CVector3(arg1,(argos::CRadians const &)*arg2,(argos::CRadians const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CVector3::CVector3()\n"
    "    argos::CVector3::CVector3(argos::Real,argos::Real,argos::Real)\n"
    "    argos::CVector3::CVector3(argos::Real,argos::CRadians const &,argos::CRadians const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_get_x(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector3::GetX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::GetX",1,"argos::CVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_get_x",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::Real)((argos::CVector3 const *)arg1)->GetX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_set_x(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::CVector3::SetX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::SetX",1,"argos::CVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector3::SetX",2,"argos::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_set_x",1,SWIGTYPE_p_argos__CVector3);
  }
  
  arg2 = (argos::Real const)lua_tonumber(L, 2);
  (arg1)->SetX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_get_y(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector3::GetY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::GetY",1,"argos::CVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_get_y",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::Real)((argos::CVector3 const *)arg1)->GetY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_set_y(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::CVector3::SetY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::SetY",1,"argos::CVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector3::SetY",2,"argos::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_set_y",1,SWIGTYPE_p_argos__CVector3);
  }
  
  arg2 = (argos::Real const)lua_tonumber(L, 2);
  (arg1)->SetY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_get_z(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector3::GetZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::GetZ",1,"argos::CVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_get_z",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::Real)((argos::CVector3 const *)arg1)->GetZ();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_set_z(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::CVector3::SetZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::SetZ",1,"argos::CVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector3::SetZ",2,"argos::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_set_z",1,SWIGTYPE_p_argos__CVector3);
  }
  
  arg2 = (argos::Real const)lua_tonumber(L, 2);
  (arg1)->SetZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real arg2 ;
  argos::Real arg3 ;
  argos::Real arg4 ;
  
  SWIG_check_num_args("argos::CVector3::Set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::Set",1,"argos::CVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector3::Set",2,"argos::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CVector3::Set",3,"argos::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("argos::CVector3::Set",4,"argos::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_set",1,SWIGTYPE_p_argos__CVector3);
  }
  
  arg2 = (argos::Real const)lua_tonumber(L, 2);
  arg3 = (argos::Real const)lua_tonumber(L, 3);
  arg4 = (argos::Real const)lua_tonumber(L, 4);
  (arg1)->Set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_from_spherical_coords(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real arg2 ;
  argos::CRadians *arg3 = 0 ;
  argos::CRadians *arg4 = 0 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::FromSphericalCoords",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::FromSphericalCoords",1,"argos::CVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector3::FromSphericalCoords",2,"argos::Real");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::CVector3::FromSphericalCoords",3,"argos::CRadians const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("argos::CVector3::FromSphericalCoords",4,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_from_spherical_coords",1,SWIGTYPE_p_argos__CVector3);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector3_from_spherical_coords",3,SWIGTYPE_p_argos__CRadians);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector3_from_spherical_coords",4,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CVector3 *) &(arg1)->FromSphericalCoords(arg2,(argos::CRadians const &)*arg3,(argos::CRadians const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_to_spherical_coords(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real *arg2 = 0 ;
  argos::CRadians *arg3 = 0 ;
  argos::CRadians *arg4 = 0 ;
  
  SWIG_check_num_args("argos::CVector3::ToSphericalCoords",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::ToSphericalCoords",1,"argos::CVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::ToSphericalCoords",2,"argos::Real &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::CVector3::ToSphericalCoords",3,"argos::CRadians &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("argos::CVector3::ToSphericalCoords",4,"argos::CRadians &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_to_spherical_coords",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vector3_to_spherical_coords",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector3_to_spherical_coords",3,SWIGTYPE_p_argos__CRadians);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector3_to_spherical_coords",4,SWIGTYPE_p_argos__CRadians);
  }
  
  ((argos::CVector3 const *)arg1)->ToSphericalCoords(*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_to_spherical_coords_horizontal(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real *arg2 = 0 ;
  argos::CRadians *arg3 = 0 ;
  argos::CRadians *arg4 = 0 ;
  
  SWIG_check_num_args("argos::CVector3::ToSphericalCoordsHorizontal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::ToSphericalCoordsHorizontal",1,"argos::CVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::ToSphericalCoordsHorizontal",2,"argos::Real &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::CVector3::ToSphericalCoordsHorizontal",3,"argos::CRadians &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("argos::CVector3::ToSphericalCoordsHorizontal",4,"argos::CRadians &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_to_spherical_coords_horizontal",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vector3_to_spherical_coords_horizontal",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector3_to_spherical_coords_horizontal",3,SWIGTYPE_p_argos__CRadians);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector3_to_spherical_coords_horizontal",4,SWIGTYPE_p_argos__CRadians);
  }
  
  ((argos::CVector3 const *)arg1)->ToSphericalCoordsHorizontal(*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_square_length(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector3::SquareLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::SquareLength",1,"argos::CVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_square_length",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::Real)((argos::CVector3 const *)arg1)->SquareLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_length(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector3::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::Length",1,"argos::CVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_length",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::Real)((argos::CVector3 const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_normalize(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::Normalize",1,"argos::CVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_normalize",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::CVector3 *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotate_x(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CRadians *arg2 = 0 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::RotateX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::RotateX",1,"argos::CVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::RotateX",2,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_rotate_x",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector3_rotate_x",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CVector3 *) &(arg1)->RotateX((argos::CRadians const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotate_y(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CRadians *arg2 = 0 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::RotateY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::RotateY",1,"argos::CVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::RotateY",2,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_rotate_y",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector3_rotate_y",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CVector3 *) &(arg1)->RotateY((argos::CRadians const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotate_z__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CRadians *arg2 = 0 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::RotateZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::RotateZ",1,"argos::CVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::RotateZ",2,"argos::CRadians const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_rotate_z",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("Vector3_rotate_z",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::CVector3 *) &(arg1)->RotateZ((argos::CRadians const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotate_z__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector2 *arg2 = 0 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::RotateZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::RotateZ",1,"argos::CVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::RotateZ",2,"argos::CVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_rotate_z",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("Vector3_rotate_z",2,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::CVector3 *) &(arg1)->RotateZ((argos::CVector2 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotate_z(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3_rotate_z__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3_rotate_z__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vector3_rotate_z'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CVector3::RotateZ(argos::CRadians const &)\n"
    "    argos::CVector3::RotateZ(argos::CVector2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_rotate(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CQuaternion *arg2 = 0 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::Rotate",1,"argos::CVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::Rotate",2,"argos::CQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_rotate",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CQuaternion,0))){
    SWIG_fail_ptr("Vector3_rotate",2,SWIGTYPE_p_argos__CQuaternion);
  }
  
  result = (argos::CVector3 *) &(arg1)->Rotate((argos::CQuaternion const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_get_zangle(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::CVector3::GetZAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::GetZAngle",1,"argos::CVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_get_zangle",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = ((argos::CVector3 const *)arg1)->GetZAngle();
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_dot_product(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector3 *arg2 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CVector3::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::DotProduct",1,"argos::CVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::DotProduct",2,"argos::CVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_dot_product",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_dot_product",2,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::Real)((argos::CVector3 const *)arg1)->DotProduct((argos::CVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_cross_product(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector3 *arg2 = 0 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::CrossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::CrossProduct",1,"argos::CVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::CrossProduct",2,"argos::CVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_cross_product",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_cross_product",2,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::CVector3 *) &(arg1)->CrossProduct((argos::CVector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_project_onto_xy(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector2 result;
  
  SWIG_check_num_args("argos::CVector3::ProjectOntoXY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::ProjectOntoXY",1,"argos::CVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_project_onto_xy",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = ((argos::CVector3 const *)arg1)->ProjectOntoXY();
  {
    argos::CVector2 * resultptr = new argos::CVector2((const argos::CVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_project_onto_yz(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector2 result;
  
  SWIG_check_num_args("argos::CVector3::ProjectOntoYZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::ProjectOntoYZ",1,"argos::CVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_project_onto_yz",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = ((argos::CVector3 const *)arg1)->ProjectOntoYZ();
  {
    argos::CVector2 * resultptr = new argos::CVector2((const argos::CVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_project_onto_xz(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector2 result;
  
  SWIG_check_num_args("argos::CVector3::ProjectOntoXZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::ProjectOntoXZ",1,"argos::CVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_project_onto_xz",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = ((argos::CVector3 const *)arg1)->ProjectOntoXZ();
  {
    argos::CVector2 * resultptr = new argos::CVector2((const argos::CVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_negate(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector3 *result = 0 ;
  
  SWIG_check_num_args("argos::CVector3::Negate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::Negate",1,"argos::CVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3_negate",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::CVector3 *) &(arg1)->Negate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CVector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::operator ==",1,"argos::CVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::operator ==",2,"argos::CVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (bool)((argos::CVector3 const *)arg1)->operator ==((argos::CVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___lt(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CVector3::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::operator <",1,"argos::CVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::operator <",2,"argos::CVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___lt",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___lt",2,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (bool)((argos::CVector3 const *)arg1)->operator <((argos::CVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___le(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CVector3::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::operator <=",1,"argos::CVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::operator <=",2,"argos::CVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___le",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___le",2,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (bool)((argos::CVector3 const *)arg1)->operator <=((argos::CVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___unm(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector3 result;
  
  SWIG_check_num_args("argos::CVector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::operator -",1,"argos::CVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___unm",1,SWIGTYPE_p_argos__CVector3);
  }
  
  result = ((argos::CVector3 const *)arg1)->operator -();
  {
    argos::CVector3 * resultptr = new argos::CVector3((const argos::CVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector3 *arg2 = 0 ;
  argos::CVector3 result;
  
  SWIG_check_num_args("argos::CVector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::operator +",1,"argos::CVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::operator +",2,"argos::CVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_argos__CVector3);
  }
  
  result = ((argos::CVector3 const *)arg1)->operator +((argos::CVector3 const &)*arg2);
  {
    argos::CVector3 * resultptr = new argos::CVector3((const argos::CVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::CVector3 *arg2 = 0 ;
  argos::CVector3 result;
  
  SWIG_check_num_args("argos::CVector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::operator -",1,"argos::CVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CVector3::operator -",2,"argos::CVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_argos__CVector3);
  }
  
  result = ((argos::CVector3 const *)arg1)->operator -((argos::CVector3 const &)*arg2);
  {
    argos::CVector3 * resultptr = new argos::CVector3((const argos::CVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real arg2 ;
  argos::CVector3 result;
  
  SWIG_check_num_args("argos::CVector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::operator *",1,"argos::CVector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector3::operator *",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_argos__CVector3);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = ((argos::CVector3 const *)arg1)->operator *(arg2);
  {
    argos::CVector3 * resultptr = new argos::CVector3((const argos::CVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = (argos::CVector3 *) 0 ;
  argos::Real arg2 ;
  argos::CVector3 result;
  
  SWIG_check_num_args("argos::CVector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CVector3::operator /",1,"argos::CVector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CVector3::operator /",2,"argos::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_argos__CVector3);
  }
  
  arg2 = (argos::Real const)lua_tonumber(L, 2);
  result = ((argos::CVector3 const *)arg1)->operator /(arg2);
  {
    argos::CVector3 * resultptr = new argos::CVector3((const argos::CVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3(void *obj) {
argos::CVector3 *arg1 = (argos::CVector3 *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CVector3_methods[] = {
    {"get_x", _wrap_Vector3_get_x}, 
    {"set_x", _wrap_Vector3_set_x}, 
    {"get_y", _wrap_Vector3_get_y}, 
    {"set_y", _wrap_Vector3_set_y}, 
    {"get_z", _wrap_Vector3_get_z}, 
    {"set_z", _wrap_Vector3_set_z}, 
    {"set", _wrap_Vector3_set}, 
    {"from_spherical_coords", _wrap_Vector3_from_spherical_coords}, 
    {"to_spherical_coords", _wrap_Vector3_to_spherical_coords}, 
    {"to_spherical_coords_horizontal", _wrap_Vector3_to_spherical_coords_horizontal}, 
    {"square_length", _wrap_Vector3_square_length}, 
    {"length", _wrap_Vector3_length}, 
    {"normalize", _wrap_Vector3_normalize}, 
    {"rotate_x", _wrap_Vector3_rotate_x}, 
    {"rotate_y", _wrap_Vector3_rotate_y}, 
    {"rotate_z", _wrap_Vector3_rotate_z}, 
    {"rotate", _wrap_Vector3_rotate}, 
    {"get_zangle", _wrap_Vector3_get_zangle}, 
    {"dot_product", _wrap_Vector3_dot_product}, 
    {"cross_product", _wrap_Vector3_cross_product}, 
    {"project_onto_xy", _wrap_Vector3_project_onto_xy}, 
    {"project_onto_yz", _wrap_Vector3_project_onto_yz}, 
    {"project_onto_xz", _wrap_Vector3_project_onto_xz}, 
    {"negate", _wrap_Vector3_negate}, 
    {"__eq", _wrap_Vector3___eq}, 
    {"__lt", _wrap_Vector3___lt}, 
    {"__le", _wrap_Vector3___le}, 
    {"__unm", _wrap_Vector3___unm}, 
    {"__add", _wrap_Vector3___add}, 
    {"__sub", _wrap_Vector3___sub}, 
    {"__mul", _wrap_Vector3___mul}, 
    {"__div", _wrap_Vector3___div}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CVector3_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CVector3_bases[] = {0};
static const char *swig_argos_CVector3_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CVector3 = { "Vector3", &SWIGTYPE_p_argos__CVector3,_wrap_new_Vector3, swig_delete_Vector3, swig_argos_CVector3_methods, swig_argos_CVector3_attributes, swig_argos_CVector3_bases, swig_argos_CVector3_base_names };

static int _wrap_square_distance__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = 0 ;
  argos::CVector3 *arg2 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::SquareDistance",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::SquareDistance",1,"argos::CVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::SquareDistance",2,"argos::CVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("square_distance",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("square_distance",2,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::Real)argos::SquareDistance((argos::CVector3 const &)*arg1,(argos::CVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square_distance(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_square_distance__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_square_distance__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'square_distance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::SquareDistance(argos::CVector2 const &,argos::CVector2 const &)\n"
    "    argos::SquareDistance(argos::CVector3 const &,argos::CVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_distance__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CVector3 *arg1 = 0 ;
  argos::CVector3 *arg2 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::Distance",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::Distance",1,"argos::CVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::Distance",2,"argos::CVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("distance",1,SWIGTYPE_p_argos__CVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector3,0))){
    SWIG_fail_ptr("distance",2,SWIGTYPE_p_argos__CVector3);
  }
  
  result = (argos::Real)argos::Distance((argos::CVector3 const &)*arg1,(argos::CVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_distance(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CVector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_distance__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_distance__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'distance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::Distance(argos::CVector2 const &,argos::CVector2 const &)\n"
    "    argos::Distance(argos::CVector3 const &,argos::CVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_gsl_rng_type_name_get(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("gsl_rng_type::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::name",1,"gsl_rng_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_name_get",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  result = (char *)(char *) ((arg1)->name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_max_set(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("gsl_rng_type::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::max",1,"gsl_rng_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsl_rng_type::max",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_max_set",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_max_get(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("gsl_rng_type::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::max",1,"gsl_rng_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_max_get",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  result = (unsigned long) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_min_set(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("gsl_rng_type::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::min",1,"gsl_rng_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsl_rng_type::min",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_min_set",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_min_get(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("gsl_rng_type::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::min",1,"gsl_rng_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_min_get",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  result = (unsigned long) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_size_set(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("gsl_rng_type::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::size",1,"gsl_rng_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsl_rng_type::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_size_set",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_size_get(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  size_t result;
  
  SWIG_check_num_args("gsl_rng_type::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::size",1,"gsl_rng_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_size_get",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_set_set(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  void (*arg2)(void *,unsigned long) = (void (*)(void *,unsigned long)) 0 ;
  
  SWIG_check_num_args("gsl_rng_type::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::set",1,"gsl_rng_type *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsl_rng_type::set",2,"void (*)(void *,unsigned long)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_set_set",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_unsigned_long__void,0))){
    SWIG_fail_ptr("gsl_rng_type_set_set",2,SWIGTYPE_p_f_p_void_unsigned_long__void);
  }
  
  if (arg1) (arg1)->set = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_set_get(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  void (*result)(void *,unsigned long) = 0 ;
  
  SWIG_check_num_args("gsl_rng_type::set",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::set",1,"gsl_rng_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_set_get",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  result = (void (*)(void *,unsigned long)) ((arg1)->set);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void_unsigned_long__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_get_set(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  unsigned long (*arg2)(void *) = (unsigned long (*)(void *)) 0 ;
  
  SWIG_check_num_args("gsl_rng_type::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::get",1,"gsl_rng_type *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsl_rng_type::get",2,"unsigned long (*)(void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_get_set",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__unsigned_long,0))){
    SWIG_fail_ptr("gsl_rng_type_get_set",2,SWIGTYPE_p_f_p_void__unsigned_long);
  }
  
  if (arg1) (arg1)->get = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_get_get(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  unsigned long (*result)(void *) = 0 ;
  
  SWIG_check_num_args("gsl_rng_type::get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::get",1,"gsl_rng_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_get_get",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  result = (unsigned long (*)(void *)) ((arg1)->get);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void__unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_get_double_set(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  double (*arg2)(void *) = (double (*)(void *)) 0 ;
  
  SWIG_check_num_args("gsl_rng_type::get_double",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::get_double",1,"gsl_rng_type *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsl_rng_type::get_double",2,"double (*)(void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_get_double_set",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__double,0))){
    SWIG_fail_ptr("gsl_rng_type_get_double_set",2,SWIGTYPE_p_f_p_void__double);
  }
  
  if (arg1) (arg1)->get_double = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_get_double_get(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *arg1 = (gsl_rng_type *) 0 ;
  double (*result)(void *) = 0 ;
  
  SWIG_check_num_args("gsl_rng_type::get_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng_type::get_double",1,"gsl_rng_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng_type,0))){
    SWIG_fail_ptr("gsl_rng_type_get_double_get",1,SWIGTYPE_p_gsl_rng_type);
  }
  
  result = (double (*)(void *)) ((arg1)->get_double);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void__double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_gsl_rng_type(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type *result = 0 ;
  
  SWIG_check_num_args("gsl_rng_type::gsl_rng_type",0,0)
  result = (gsl_rng_type *)new gsl_rng_type();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsl_rng_type,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_gsl_rng_type(void *obj) {
gsl_rng_type *arg1 = (gsl_rng_type *) obj;
delete arg1;
}
static swig_lua_method swig_gsl_rng_type_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gsl_rng_type_attributes[] = {
    { "name", _wrap_gsl_rng_type_name_get, SWIG_Lua_set_immutable},
    { "max", _wrap_gsl_rng_type_max_get, _wrap_gsl_rng_type_max_set},
    { "min", _wrap_gsl_rng_type_min_get, _wrap_gsl_rng_type_min_set},
    { "size", _wrap_gsl_rng_type_size_get, _wrap_gsl_rng_type_size_set},
    { "set", _wrap_gsl_rng_type_set_get, _wrap_gsl_rng_type_set_set},
    { "get", _wrap_gsl_rng_type_get_get, _wrap_gsl_rng_type_get_set},
    { "get_double", _wrap_gsl_rng_type_get_double_get, _wrap_gsl_rng_type_get_double_set},
    {0,0,0}
};
static swig_lua_class *swig_gsl_rng_type_bases[] = {0};
static const char *swig_gsl_rng_type_base_names[] = {0};
static swig_lua_class _wrap_class_gsl_rng_type = { "gsl_rng_type", &SWIGTYPE_p_gsl_rng_type,_wrap_new_gsl_rng_type, swig_delete_gsl_rng_type, swig_gsl_rng_type_methods, swig_gsl_rng_type_attributes, swig_gsl_rng_type_bases, swig_gsl_rng_type_base_names };

static int _wrap_gsl_rng_type_set(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng *arg1 = (gsl_rng *) 0 ;
  gsl_rng_type *arg2 = (gsl_rng_type *) 0 ;
  
  SWIG_check_num_args("gsl_rng::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng::type",1,"gsl_rng *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsl_rng::type",2,"gsl_rng_type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng,0))){
    SWIG_fail_ptr("gsl_rng_type_set",1,SWIGTYPE_p_gsl_rng);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsl_rng_type,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("gsl_rng_type_set",2,SWIGTYPE_p_gsl_rng_type);
  }
  
  if (arg1) (arg1)->type = (gsl_rng_type const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_type_get(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng *arg1 = (gsl_rng *) 0 ;
  gsl_rng_type *result = 0 ;
  
  SWIG_check_num_args("gsl_rng::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng::type",1,"gsl_rng *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng,0))){
    SWIG_fail_ptr("gsl_rng_type_get",1,SWIGTYPE_p_gsl_rng);
  }
  
  result = (gsl_rng_type *) ((arg1)->type);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsl_rng_type,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_state_set(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng *arg1 = (gsl_rng *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("gsl_rng::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng::state",1,"gsl_rng *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsl_rng::state",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng,0))){
    SWIG_fail_ptr("gsl_rng_state_set",1,SWIGTYPE_p_gsl_rng);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"gsl_rng_state_set");
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsl_rng_state_get(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng *arg1 = (gsl_rng *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("gsl_rng::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsl_rng::state",1,"gsl_rng *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsl_rng,0))){
    SWIG_fail_ptr("gsl_rng_state_get",1,SWIGTYPE_p_gsl_rng);
  }
  
  result = (void *) ((arg1)->state);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_gsl_rng(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng *result = 0 ;
  
  SWIG_check_num_args("gsl_rng::gsl_rng",0,0)
  result = (gsl_rng *)new gsl_rng();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsl_rng,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_gsl_rng(void *obj) {
gsl_rng *arg1 = (gsl_rng *) obj;
delete arg1;
}
static swig_lua_method swig_gsl_rng_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gsl_rng_attributes[] = {
    { "type", _wrap_gsl_rng_type_get, _wrap_gsl_rng_type_set},
    { "state", _wrap_gsl_rng_state_get, _wrap_gsl_rng_state_set},
    {0,0,0}
};
static swig_lua_class *swig_gsl_rng_bases[] = {0};
static const char *swig_gsl_rng_base_names[] = {0};
static swig_lua_class _wrap_class_gsl_rng = { "gsl_rng", &SWIGTYPE_p_gsl_rng,_wrap_new_gsl_rng, swig_delete_gsl_rng, swig_gsl_rng_methods, swig_gsl_rng_attributes, swig_gsl_rng_bases, swig_gsl_rng_base_names };

static int _wrap_new_CRNG__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt32 arg1 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  argos::CRNG *result = 0 ;
  
  SWIG_check_num_args("argos::CRNG::CRNG",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CRNG::CRNG",1,"argos::UInt32");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CRNG::CRNG",2,"std::string const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (argos::UInt32)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (argos::CRNG *)new argos::CRNG(arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRNG,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CRNG__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt32 arg1 ;
  argos::CRNG *result = 0 ;
  
  SWIG_check_num_args("argos::CRNG::CRNG",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CRNG::CRNG",1,"argos::UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (argos::UInt32)lua_tonumber(L, 1);
  result = (argos::CRNG *)new argos::CRNG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRNG,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CRNG__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  argos::CByteArray *arg1 = 0 ;
  argos::CRNG *result = 0 ;
  
  SWIG_check_num_args("argos::CRNG::CRNG",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::CRNG::CRNG",1,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("new_CRNG",1,SWIGTYPE_p_argos__CByteArray);
  }
  
  result = (argos::CRNG *)new argos::CRNG(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRNG,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CRNG__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = 0 ;
  argos::CRNG *result = 0 ;
  
  SWIG_check_num_args("argos::CRNG::CRNG",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::CRNG::CRNG",1,"argos::CRNG const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("new_CRNG",1,SWIGTYPE_p_argos__CRNG);
  }
  
  result = (argos::CRNG *)new argos::CRNG((argos::CRNG const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRNG,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CRNG(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CByteArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CRNG__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRNG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CRNG__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CRNG__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CRNG__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_CRNG'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CRNG::CRNG(argos::UInt32,std::string const &)\n"
    "    argos::CRNG::CRNG(argos::UInt32)\n"
    "    argos::CRNG::CRNG(argos::CByteArray &)\n"
    "    argos::CRNG::CRNG(argos::CRNG const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CRNG_get_seed(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::UInt32 result;
  
  SWIG_check_num_args("argos::CRNG::GetSeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::GetSeed",1,"argos::CRNG const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_get_seed",1,SWIGTYPE_p_argos__CRNG);
  }
  
  result = (argos::UInt32)((argos::CRNG const *)arg1)->GetSeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_set_seed(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::UInt32 arg2 ;
  
  SWIG_check_num_args("argos::CRNG::SetSeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::SetSeed",1,"argos::CRNG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CRNG::SetSeed",2,"argos::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_set_seed",1,SWIGTYPE_p_argos__CRNG);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt32)lua_tonumber(L, 2);
  (arg1)->SetSeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_get_type(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  std::string result;
  
  SWIG_check_num_args("argos::CRNG::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::GetType",1,"argos::CRNG const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_get_type",1,SWIGTYPE_p_argos__CRNG);
  }
  
  result = ((argos::CRNG const *)arg1)->GetType();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_set_type(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::CRNG::SetType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::SetType",1,"argos::CRNG *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CRNG::SetType",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_set_type",1,SWIGTYPE_p_argos__CRNG);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->SetType((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_save_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CRNG::SaveState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::SaveState",1,"argos::CRNG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRNG::SaveState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_save_state",1,SWIGTYPE_p_argos__CRNG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("CRNG_save_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->SaveState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_load_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CRNG::LoadState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::LoadState",1,"argos::CRNG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRNG::LoadState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_load_state",1,SWIGTYPE_p_argos__CRNG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("CRNG_load_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->LoadState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_reset(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  
  SWIG_check_num_args("argos::CRNG::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::Reset",1,"argos::CRNG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_reset",1,SWIGTYPE_p_argos__CRNG);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_bernoulli__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::Real arg2 ;
  bool result;
  
  SWIG_check_num_args("argos::CRNG::Bernoulli",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::Bernoulli",1,"argos::CRNG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CRNG::Bernoulli",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_bernoulli",1,SWIGTYPE_p_argos__CRNG);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = (bool)(arg1)->Bernoulli(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_bernoulli__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CRNG::Bernoulli",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::Bernoulli",1,"argos::CRNG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_bernoulli",1,SWIGTYPE_p_argos__CRNG);
  }
  
  result = (bool)(arg1)->Bernoulli();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_bernoulli(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRNG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CRNG_bernoulli__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRNG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CRNG_bernoulli__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CRNG_bernoulli'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CRNG::Bernoulli(argos::Real)\n"
    "    argos::CRNG::Bernoulli()\n");
  lua_error(L);return 0;
}


static int _wrap_CRNG_uniform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::CRange< argos::CRadians > *arg2 = 0 ;
  argos::CRadians result;
  
  SWIG_check_num_args("argos::CRNG::Uniform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::Uniform",1,"argos::CRNG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRNG::Uniform",2,"argos::CRange< argos::CRadians > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_uniform",1,SWIGTYPE_p_argos__CRNG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRangeT_argos__CRadians_t,0))){
    SWIG_fail_ptr("CRNG_uniform",2,SWIGTYPE_p_argos__CRangeT_argos__CRadians_t);
  }
  
  result = (arg1)->Uniform((argos::CRange< argos::CRadians > const &)*arg2);
  {
    argos::CRadians * resultptr = new argos::CRadians((const argos::CRadians &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_argos__CRadians,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_uniform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::CRange< argos::Real > *arg2 = 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CRNG::Uniform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::Uniform",1,"argos::CRNG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRNG::Uniform",2,"argos::CRange< argos::Real > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_uniform",1,SWIGTYPE_p_argos__CRNG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRangeT_float_t,0))){
    SWIG_fail_ptr("CRNG_uniform",2,SWIGTYPE_p_argos__CRangeT_float_t);
  }
  
  result = (argos::Real)(arg1)->Uniform((argos::CRange< argos::Real > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_uniform__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::CRange< argos::SInt32 > *arg2 = 0 ;
  argos::SInt32 result;
  
  SWIG_check_num_args("argos::CRNG::Uniform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::Uniform",1,"argos::CRNG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRNG::Uniform",2,"argos::CRange< argos::SInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_uniform",1,SWIGTYPE_p_argos__CRNG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRangeT_int_t,0))){
    SWIG_fail_ptr("CRNG_uniform",2,SWIGTYPE_p_argos__CRangeT_int_t);
  }
  
  result = (argos::SInt32)(arg1)->Uniform((argos::CRange< argos::SInt32 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_uniform__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::CRange< argos::UInt32 > *arg2 = 0 ;
  argos::UInt32 result;
  
  SWIG_check_num_args("argos::CRNG::Uniform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::Uniform",1,"argos::CRNG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CRNG::Uniform",2,"argos::CRange< argos::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_uniform",1,SWIGTYPE_p_argos__CRNG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRangeT_unsigned_int_t,0))){
    SWIG_fail_ptr("CRNG_uniform",2,SWIGTYPE_p_argos__CRangeT_unsigned_int_t);
  }
  
  result = (argos::UInt32)(arg1)->Uniform((argos::CRange< argos::UInt32 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_uniform(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRNG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRangeT_argos__CRadians_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CRNG_uniform__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRNG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRangeT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CRNG_uniform__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRNG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRangeT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CRNG_uniform__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRNG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRangeT_unsigned_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CRNG_uniform__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CRNG_uniform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CRNG::Uniform(argos::CRange< argos::CRadians > const &)\n"
    "    argos::CRNG::Uniform(argos::CRange< argos::Real > const &)\n"
    "    argos::CRNG::Uniform(argos::CRange< argos::SInt32 > const &)\n"
    "    argos::CRNG::Uniform(argos::CRange< argos::UInt32 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CRNG_exponential(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::Real arg2 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CRNG::Exponential",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::Exponential",1,"argos::CRNG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CRNG::Exponential",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_exponential",1,SWIGTYPE_p_argos__CRNG);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = (argos::Real)(arg1)->Exponential(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_gaussian__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::Real arg2 ;
  argos::Real arg3 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CRNG::Gaussian",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::Gaussian",1,"argos::CRNG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CRNG::Gaussian",2,"argos::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CRNG::Gaussian",3,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_gaussian",1,SWIGTYPE_p_argos__CRNG);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  arg3 = (argos::Real)lua_tonumber(L, 3);
  result = (argos::Real)(arg1)->Gaussian(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_gaussian__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CRNG *arg1 = (argos::CRNG *) 0 ;
  argos::Real arg2 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::CRNG::Gaussian",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CRNG::Gaussian",1,"argos::CRNG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CRNG::Gaussian",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CRNG,0))){
    SWIG_fail_ptr("CRNG_gaussian",1,SWIGTYPE_p_argos__CRNG);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  result = (argos::Real)(arg1)->Gaussian(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRNG_gaussian(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRNG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CRNG_gaussian__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CRNG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CRNG_gaussian__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CRNG_gaussian'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CRNG::Gaussian(argos::Real,argos::Real)\n"
    "    argos::CRNG::Gaussian(argos::Real)\n");
  lua_error(L);return 0;
}


static void swig_delete_CRNG(void *obj) {
argos::CRNG *arg1 = (argos::CRNG *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CRNG_methods[] = {
    {"get_seed", _wrap_CRNG_get_seed}, 
    {"set_seed", _wrap_CRNG_set_seed}, 
    {"get_type", _wrap_CRNG_get_type}, 
    {"set_type", _wrap_CRNG_set_type}, 
    {"save_state", _wrap_CRNG_save_state}, 
    {"load_state", _wrap_CRNG_load_state}, 
    {"reset", _wrap_CRNG_reset}, 
    {"bernoulli", _wrap_CRNG_bernoulli}, 
    {"uniform", _wrap_CRNG_uniform}, 
    {"exponential", _wrap_CRNG_exponential}, 
    {"gaussian", _wrap_CRNG_gaussian}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CRNG_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CRNG_bases[] = {0,0};
static const char *swig_argos_CRNG_base_names[] = {"argos::CMemento *",0};
static swig_lua_class _wrap_class_argos_CRNG = { "CRNG", &SWIGTYPE_p_argos__CRNG,_wrap_new_CRNG, swig_delete_CRNG, swig_argos_CRNG_methods, swig_argos_CRNG_attributes, swig_argos_CRNG_bases, swig_argos_CRNG_base_names };

static int _wrap_new_CCategory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  argos::UInt32 arg2 ;
  std::string temp1 ;
  argos::CCategory *result = 0 ;
  
  SWIG_check_num_args("argos::CCategory::CCategory",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::CCategory::CCategory",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CCategory::CCategory",2,"argos::UInt32");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt32)lua_tonumber(L, 2);
  result = (argos::CCategory *)new argos::CCategory((std::string const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCategory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCategory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CByteArray *arg1 = 0 ;
  argos::CCategory *result = 0 ;
  
  SWIG_check_num_args("argos::CCategory::CCategory",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::CCategory::CCategory",1,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("new_CCategory",1,SWIGTYPE_p_argos__CByteArray);
  }
  
  result = (argos::CCategory *)new argos::CCategory(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCategory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCategory(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CByteArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CCategory__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CCategory__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_CCategory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CCategory::CCategory(std::string const &,argos::UInt32)\n"
    "    argos::CCategory::CCategory(argos::CByteArray &)\n");
  lua_error(L);return 0;
}


static int _wrap_CCategory_get_id(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCategory *arg1 = (argos::CCategory *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("argos::CCategory::GetId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCategory::GetId",1,"argos::CCategory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCategory,0))){
    SWIG_fail_ptr("CCategory_get_id",1,SWIGTYPE_p_argos__CCategory);
  }
  
  result = (std::string *) &((argos::CCategory const *)arg1)->GetId();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCategory_set_id(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCategory *arg1 = (argos::CCategory *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::CCategory::SetId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCategory::SetId",1,"argos::CCategory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCategory::SetId",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCategory,0))){
    SWIG_fail_ptr("CCategory_set_id",1,SWIGTYPE_p_argos__CCategory);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->SetId((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCategory_get_seed(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCategory *arg1 = (argos::CCategory *) 0 ;
  argos::UInt32 result;
  
  SWIG_check_num_args("argos::CCategory::GetSeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCategory::GetSeed",1,"argos::CCategory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCategory,0))){
    SWIG_fail_ptr("CCategory_get_seed",1,SWIGTYPE_p_argos__CCategory);
  }
  
  result = (argos::UInt32)((argos::CCategory const *)arg1)->GetSeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCategory_set_seed(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCategory *arg1 = (argos::CCategory *) 0 ;
  argos::UInt32 arg2 ;
  
  SWIG_check_num_args("argos::CCategory::SetSeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCategory::SetSeed",1,"argos::CCategory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CCategory::SetSeed",2,"argos::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCategory,0))){
    SWIG_fail_ptr("CCategory_set_seed",1,SWIGTYPE_p_argos__CCategory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt32)lua_tonumber(L, 2);
  (arg1)->SetSeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCategory_save_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCategory *arg1 = (argos::CCategory *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCategory::SaveState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCategory::SaveState",1,"argos::CCategory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCategory::SaveState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCategory,0))){
    SWIG_fail_ptr("CCategory_save_state",1,SWIGTYPE_p_argos__CCategory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("CCategory_save_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->SaveState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCategory_load_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCategory *arg1 = (argos::CCategory *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCategory::LoadState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCategory::LoadState",1,"argos::CCategory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCategory::LoadState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCategory,0))){
    SWIG_fail_ptr("CCategory_load_state",1,SWIGTYPE_p_argos__CCategory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("CCategory_load_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->LoadState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCategory_create_rng__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCategory *arg1 = (argos::CCategory *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  argos::CRNG *result = 0 ;
  
  SWIG_check_num_args("argos::CCategory::CreateRNG",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCategory::CreateRNG",1,"argos::CCategory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCategory::CreateRNG",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCategory,0))){
    SWIG_fail_ptr("CCategory_create_rng",1,SWIGTYPE_p_argos__CCategory);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (argos::CRNG *)(arg1)->CreateRNG((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRNG,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCategory_create_rng__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCategory *arg1 = (argos::CCategory *) 0 ;
  argos::CRNG *result = 0 ;
  
  SWIG_check_num_args("argos::CCategory::CreateRNG",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCategory::CreateRNG",1,"argos::CCategory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCategory,0))){
    SWIG_fail_ptr("CCategory_create_rng",1,SWIGTYPE_p_argos__CCategory);
  }
  
  result = (argos::CRNG *)(arg1)->CreateRNG();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRNG,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCategory_create_rng(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CCategory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CCategory_create_rng__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CCategory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCategory_create_rng__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CCategory_create_rng'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CCategory::CreateRNG(std::string const &)\n"
    "    argos::CCategory::CreateRNG()\n");
  lua_error(L);return 0;
}


static int _wrap_CCategory_reset_rngs(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCategory *arg1 = (argos::CCategory *) 0 ;
  
  SWIG_check_num_args("argos::CCategory::ResetRNGs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCategory::ResetRNGs",1,"argos::CCategory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCategory,0))){
    SWIG_fail_ptr("CCategory_reset_rngs",1,SWIGTYPE_p_argos__CCategory);
  }
  
  (arg1)->ResetRNGs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCategory_reseed_rngs(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCategory *arg1 = (argos::CCategory *) 0 ;
  
  SWIG_check_num_args("argos::CCategory::ReseedRNGs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCategory::ReseedRNGs",1,"argos::CCategory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCategory,0))){
    SWIG_fail_ptr("CCategory_reseed_rngs",1,SWIGTYPE_p_argos__CCategory);
  }
  
  (arg1)->ReseedRNGs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CCategory(void *obj) {
argos::CCategory *arg1 = (argos::CCategory *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCategory_methods[] = {
    {"get_id", _wrap_CCategory_get_id}, 
    {"set_id", _wrap_CCategory_set_id}, 
    {"get_seed", _wrap_CCategory_get_seed}, 
    {"set_seed", _wrap_CCategory_set_seed}, 
    {"save_state", _wrap_CCategory_save_state}, 
    {"load_state", _wrap_CCategory_load_state}, 
    {"create_rng", _wrap_CCategory_create_rng}, 
    {"reset_rngs", _wrap_CCategory_reset_rngs}, 
    {"reseed_rngs", _wrap_CCategory_reseed_rngs}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCategory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCategory_bases[] = {0,0};
static const char *swig_argos_CCategory_base_names[] = {"argos::CMemento *",0};
static swig_lua_class _wrap_class_argos_CCategory = { "CCategory", &SWIGTYPE_p_argos__CCategory,_wrap_new_CCategory, swig_delete_CCategory, swig_argos_CCategory_methods, swig_argos_CCategory_attributes, swig_argos_CCategory_bases, swig_argos_CCategory_base_names };

static int _wrap_Random_create_category(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  argos::UInt32 arg2 ;
  std::string temp1 ;
  bool result;
  
  SWIG_check_num_args("argos::CARGoSRandom::CreateCategory",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::CARGoSRandom::CreateCategory",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CARGoSRandom::CreateCategory",2,"argos::UInt32");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt32)lua_tonumber(L, 2);
  result = (bool)argos::CARGoSRandom::CreateCategory((std::string const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_get_category(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  argos::CCategory *result = 0 ;
  
  SWIG_check_num_args("argos::CARGoSRandom::GetCategory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::CARGoSRandom::GetCategory",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (argos::CCategory *) &argos::CARGoSRandom::GetCategory((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCategory,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_remove_category(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("argos::CARGoSRandom::RemoveCategory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::CARGoSRandom::RemoveCategory",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  argos::CARGoSRandom::RemoveCategory((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_create_rng__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  argos::CRNG *result = 0 ;
  
  SWIG_check_num_args("argos::CARGoSRandom::CreateRNG",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::CARGoSRandom::CreateRNG",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CARGoSRandom::CreateRNG",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (argos::CRNG *)argos::CARGoSRandom::CreateRNG((std::string const &)*arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRNG,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_create_rng__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  argos::CRNG *result = 0 ;
  
  SWIG_check_num_args("argos::CARGoSRandom::CreateRNG",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::CARGoSRandom::CreateRNG",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (argos::CRNG *)argos::CARGoSRandom::CreateRNG((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRNG,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_create_rng(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Random_create_rng__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Random_create_rng__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Random_create_rng'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CARGoSRandom::CreateRNG(std::string const &,std::string const &)\n"
    "    argos::CARGoSRandom::CreateRNG(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Random_get_seed_of(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  argos::UInt32 result;
  
  SWIG_check_num_args("argos::CARGoSRandom::GetSeedOf",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::CARGoSRandom::GetSeedOf",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (argos::UInt32)argos::CARGoSRandom::GetSeedOf((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_set_seed_of(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  argos::UInt32 arg2 ;
  std::string temp1 ;
  
  SWIG_check_num_args("argos::CARGoSRandom::SetSeedOf",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("argos::CARGoSRandom::SetSeedOf",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CARGoSRandom::SetSeedOf",2,"argos::UInt32");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt32)lua_tonumber(L, 2);
  argos::CARGoSRandom::SetSeedOf((std::string const &)*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_save_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CARGoSRandom *arg1 = (argos::CARGoSRandom *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CARGoSRandom::SaveState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CARGoSRandom::SaveState",1,"argos::CARGoSRandom *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CARGoSRandom::SaveState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CARGoSRandom,0))){
    SWIG_fail_ptr("Random_save_state",1,SWIGTYPE_p_argos__CARGoSRandom);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("Random_save_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->SaveState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_load_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CARGoSRandom *arg1 = (argos::CARGoSRandom *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CARGoSRandom::LoadState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CARGoSRandom::LoadState",1,"argos::CARGoSRandom *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CARGoSRandom::LoadState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CARGoSRandom,0))){
    SWIG_fail_ptr("Random_load_state",1,SWIGTYPE_p_argos__CARGoSRandom);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("Random_load_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->LoadState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_reset(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("argos::CARGoSRandom::Reset",0,0)
  argos::CARGoSRandom::Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_get_rngtypes(lua_State* L) {
  int SWIG_arg = 0;
  gsl_rng_type **result = 0 ;
  
  SWIG_check_num_args("argos::CARGoSRandom::GetRNGTypes",0,0)
  result = (gsl_rng_type **)argos::CARGoSRandom::GetRNGTypes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_gsl_rng_type,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_argos_CARGoSRandom_methods[] = {
    {"save_state", _wrap_Random_save_state}, 
    {"load_state", _wrap_Random_load_state}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CARGoSRandom_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CARGoSRandom_bases[] = {0};
static const char *swig_argos_CARGoSRandom_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CARGoSRandom = { "Random", &SWIGTYPE_p_argos__CARGoSRandom,0,0, swig_argos_CARGoSRandom_methods, swig_argos_CARGoSRandom_attributes, swig_argos_CARGoSRandom_bases, swig_argos_CARGoSRandom_base_names };

static int _wrap_Actuator_init(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Actuator *arg1 = (argos::CCI_Actuator *) 0 ;
  argos::TConfigurationNode *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_Actuator::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Actuator::Init",1,"argos::CCI_Actuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_Actuator::Init",2,"argos::TConfigurationNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Actuator,0))){
    SWIG_fail_ptr("Actuator_init",1,SWIGTYPE_p_argos__CCI_Actuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Actuator_init",2,SWIGTYPE_p_ticpp__Element);
  }
  
  (arg1)->Init(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuator_destroy(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Actuator *arg1 = (argos::CCI_Actuator *) 0 ;
  
  SWIG_check_num_args("argos::CCI_Actuator::Destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Actuator::Destroy",1,"argos::CCI_Actuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Actuator,0))){
    SWIG_fail_ptr("Actuator_destroy",1,SWIGTYPE_p_argos__CCI_Actuator);
  }
  
  (arg1)->Destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuator_save_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Actuator *arg1 = (argos::CCI_Actuator *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_Actuator::SaveState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Actuator::SaveState",1,"argos::CCI_Actuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_Actuator::SaveState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Actuator,0))){
    SWIG_fail_ptr("Actuator_save_state",1,SWIGTYPE_p_argos__CCI_Actuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("Actuator_save_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->SaveState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuator_load_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Actuator *arg1 = (argos::CCI_Actuator *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_Actuator::LoadState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Actuator::LoadState",1,"argos::CCI_Actuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_Actuator::LoadState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Actuator,0))){
    SWIG_fail_ptr("Actuator_load_state",1,SWIGTYPE_p_argos__CCI_Actuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("Actuator_load_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->LoadState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuator_as_foot_bot_wheels_actuator(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Actuator *arg1 = (argos::CCI_Actuator *) 0 ;
  argos::CCI_FootBotWheelsActuator *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Actuator::AsFootBotWheelsActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Actuator::AsFootBotWheelsActuator",1,"argos::CCI_Actuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Actuator,0))){
    SWIG_fail_ptr("Actuator_as_foot_bot_wheels_actuator",1,SWIGTYPE_p_argos__CCI_Actuator);
  }
  
  result = (argos::CCI_FootBotWheelsActuator *)argos_CCI_Actuator_AsFootBotWheelsActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_FootBotWheelsActuator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuator_as_foot_bot_leds_actuator(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Actuator *arg1 = (argos::CCI_Actuator *) 0 ;
  argos::CCI_FootBotLedsActuator *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Actuator::AsFootBotLedsActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Actuator::AsFootBotLedsActuator",1,"argos::CCI_Actuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Actuator,0))){
    SWIG_fail_ptr("Actuator_as_foot_bot_leds_actuator",1,SWIGTYPE_p_argos__CCI_Actuator);
  }
  
  result = (argos::CCI_FootBotLedsActuator *)argos_CCI_Actuator_AsFootBotLedsActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_FootBotLedsActuator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuator_as_range_and_bearing_actuator(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Actuator *arg1 = (argos::CCI_Actuator *) 0 ;
  argos::CCI_RangeAndBearingActuator *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Actuator::AsRangeAndBearingActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Actuator::AsRangeAndBearingActuator",1,"argos::CCI_Actuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Actuator,0))){
    SWIG_fail_ptr("Actuator_as_range_and_bearing_actuator",1,SWIGTYPE_p_argos__CCI_Actuator);
  }
  
  result = (argos::CCI_RangeAndBearingActuator *)argos_CCI_Actuator_AsRangeAndBearingActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_RangeAndBearingActuator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Actuator(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Actuator *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Actuator::CCI_Actuator",0,0)
  result = (argos::CCI_Actuator *)new argos::CCI_Actuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_Actuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Actuator(void *obj) {
argos::CCI_Actuator *arg1 = (argos::CCI_Actuator *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_Actuator_methods[] = {
    {"init", _wrap_Actuator_init}, 
    {"destroy", _wrap_Actuator_destroy}, 
    {"save_state", _wrap_Actuator_save_state}, 
    {"load_state", _wrap_Actuator_load_state}, 
    {"as_foot_bot_wheels_actuator", _wrap_Actuator_as_foot_bot_wheels_actuator}, 
    {"as_foot_bot_leds_actuator", _wrap_Actuator_as_foot_bot_leds_actuator}, 
    {"as_range_and_bearing_actuator", _wrap_Actuator_as_range_and_bearing_actuator}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_Actuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_Actuator_bases[] = {0,0,0};
static const char *swig_argos_CCI_Actuator_base_names[] = {"argos::CBaseConfigurableResource *","argos::CMemento *",0};
static swig_lua_class _wrap_class_argos_CCI_Actuator = { "Actuator", &SWIGTYPE_p_argos__CCI_Actuator,_wrap_new_Actuator, swig_delete_Actuator, swig_argos_CCI_Actuator_methods, swig_argos_CCI_Actuator_attributes, swig_argos_CCI_Actuator_bases, swig_argos_CCI_Actuator_base_names };

static int _wrap_Sensor_init(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Sensor *arg1 = (argos::CCI_Sensor *) 0 ;
  argos::TConfigurationNode *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_Sensor::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Sensor::Init",1,"argos::CCI_Sensor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_Sensor::Init",2,"argos::TConfigurationNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Sensor,0))){
    SWIG_fail_ptr("Sensor_init",1,SWIGTYPE_p_argos__CCI_Sensor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Sensor_init",2,SWIGTYPE_p_ticpp__Element);
  }
  
  (arg1)->Init(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_destroy(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Sensor *arg1 = (argos::CCI_Sensor *) 0 ;
  
  SWIG_check_num_args("argos::CCI_Sensor::Destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Sensor::Destroy",1,"argos::CCI_Sensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Sensor,0))){
    SWIG_fail_ptr("Sensor_destroy",1,SWIGTYPE_p_argos__CCI_Sensor);
  }
  
  (arg1)->Destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_save_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Sensor *arg1 = (argos::CCI_Sensor *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_Sensor::SaveState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Sensor::SaveState",1,"argos::CCI_Sensor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_Sensor::SaveState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Sensor,0))){
    SWIG_fail_ptr("Sensor_save_state",1,SWIGTYPE_p_argos__CCI_Sensor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("Sensor_save_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->SaveState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_load_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Sensor *arg1 = (argos::CCI_Sensor *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_Sensor::LoadState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Sensor::LoadState",1,"argos::CCI_Sensor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_Sensor::LoadState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Sensor,0))){
    SWIG_fail_ptr("Sensor_load_state",1,SWIGTYPE_p_argos__CCI_Sensor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("Sensor_load_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->LoadState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_as_foot_bot_proximity_sensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Sensor *arg1 = (argos::CCI_Sensor *) 0 ;
  argos::CCI_FootBotProximitySensor *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Sensor::AsFootBotProximitySensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Sensor::AsFootBotProximitySensor",1,"argos::CCI_Sensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Sensor,0))){
    SWIG_fail_ptr("Sensor_as_foot_bot_proximity_sensor",1,SWIGTYPE_p_argos__CCI_Sensor);
  }
  
  result = (argos::CCI_FootBotProximitySensor *)argos_CCI_Sensor_AsFootBotProximitySensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_FootBotProximitySensor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_as_range_and_bearing_sensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Sensor *arg1 = (argos::CCI_Sensor *) 0 ;
  argos::CCI_RangeAndBearingSensor *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Sensor::AsRangeAndBearingSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Sensor::AsRangeAndBearingSensor",1,"argos::CCI_Sensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Sensor,0))){
    SWIG_fail_ptr("Sensor_as_range_and_bearing_sensor",1,SWIGTYPE_p_argos__CCI_Sensor);
  }
  
  result = (argos::CCI_RangeAndBearingSensor *)argos_CCI_Sensor_AsRangeAndBearingSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_as_foot_bot_light_sensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Sensor *arg1 = (argos::CCI_Sensor *) 0 ;
  argos::CCI_FootBotLightSensor *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Sensor::AsFootBotLightSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Sensor::AsFootBotLightSensor",1,"argos::CCI_Sensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Sensor,0))){
    SWIG_fail_ptr("Sensor_as_foot_bot_light_sensor",1,SWIGTYPE_p_argos__CCI_Sensor);
  }
  
  result = (argos::CCI_FootBotLightSensor *)argos_CCI_Sensor_AsFootBotLightSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_FootBotLightSensor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_as_foot_bot_motor_ground_sensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Sensor *arg1 = (argos::CCI_Sensor *) 0 ;
  argos::CCI_FootBotMotorGroundSensor *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Sensor::AsFootBotMotorGroundSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Sensor::AsFootBotMotorGroundSensor",1,"argos::CCI_Sensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Sensor,0))){
    SWIG_fail_ptr("Sensor_as_foot_bot_motor_ground_sensor",1,SWIGTYPE_p_argos__CCI_Sensor);
  }
  
  result = (argos::CCI_FootBotMotorGroundSensor *)argos_CCI_Sensor_AsFootBotMotorGroundSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_FootBotMotorGroundSensor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Sensor *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Sensor::CCI_Sensor",0,0)
  result = (argos::CCI_Sensor *)new argos::CCI_Sensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_Sensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sensor(void *obj) {
argos::CCI_Sensor *arg1 = (argos::CCI_Sensor *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_Sensor_methods[] = {
    {"init", _wrap_Sensor_init}, 
    {"destroy", _wrap_Sensor_destroy}, 
    {"save_state", _wrap_Sensor_save_state}, 
    {"load_state", _wrap_Sensor_load_state}, 
    {"as_foot_bot_proximity_sensor", _wrap_Sensor_as_foot_bot_proximity_sensor}, 
    {"as_range_and_bearing_sensor", _wrap_Sensor_as_range_and_bearing_sensor}, 
    {"as_foot_bot_light_sensor", _wrap_Sensor_as_foot_bot_light_sensor}, 
    {"as_foot_bot_motor_ground_sensor", _wrap_Sensor_as_foot_bot_motor_ground_sensor}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_Sensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_Sensor_bases[] = {0,0,0};
static const char *swig_argos_CCI_Sensor_base_names[] = {"argos::CBaseConfigurableResource *","argos::CMemento *",0};
static swig_lua_class _wrap_class_argos_CCI_Sensor = { "Sensor", &SWIGTYPE_p_argos__CCI_Sensor,_wrap_new_Sensor, swig_delete_Sensor, swig_argos_CCI_Sensor_methods, swig_argos_CCI_Sensor_attributes, swig_argos_CCI_Sensor_bases, swig_argos_CCI_Sensor_base_names };

static int _wrap_Robot_insert_actuator(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *arg1 = (argos::CCI_Robot *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  argos::CCI_Actuator *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Robot::InsertActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Robot::InsertActuator",1,"argos::CCI_Robot *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCI_Robot::InsertActuator",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Robot_insert_actuator",1,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (argos::CCI_Actuator *)(arg1)->InsertActuator((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_Actuator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_insert_sensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *arg1 = (argos::CCI_Robot *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  argos::CCI_Sensor *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Robot::InsertSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Robot::InsertSensor",1,"argos::CCI_Robot *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCI_Robot::InsertSensor",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Robot_insert_sensor",1,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (argos::CCI_Sensor *)(arg1)->InsertSensor((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_Sensor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_get_actuator(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *arg1 = (argos::CCI_Robot *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  argos::CCI_Actuator *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Robot::GetActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Robot::GetActuator",1,"argos::CCI_Robot *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCI_Robot::GetActuator",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Robot_get_actuator",1,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (argos::CCI_Actuator *)(arg1)->GetActuator((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_Actuator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_get_sensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *arg1 = (argos::CCI_Robot *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  argos::CCI_Sensor *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Robot::GetSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Robot::GetSensor",1,"argos::CCI_Robot *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCI_Robot::GetSensor",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Robot_get_sensor",1,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (argos::CCI_Sensor *)(arg1)->GetSensor((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_Sensor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_get_all_actuators(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *arg1 = (argos::CCI_Robot *) 0 ;
  argos::TActuatorMap *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Robot::GetAllActuators",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Robot::GetAllActuators",1,"argos::CCI_Robot *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Robot_get_all_actuators",1,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  result = (argos::TActuatorMap *) &(arg1)->GetAllActuators();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_argos__CCI_Actuator_p_std__lessT_std__string_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_get_all_sensors(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *arg1 = (argos::CCI_Robot *) 0 ;
  argos::TSensorMap *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Robot::GetAllSensors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Robot::GetAllSensors",1,"argos::CCI_Robot *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Robot_get_all_sensors",1,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  result = (argos::TSensorMap *) &(arg1)->GetAllSensors();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_argos__CCI_Sensor_p_std__lessT_std__string_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_add_actuator(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *arg1 = (argos::CCI_Robot *) 0 ;
  std::string *arg2 = 0 ;
  argos::CCI_Actuator *arg3 = (argos::CCI_Actuator *) 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::CCI_Robot::AddActuator",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Robot::AddActuator",1,"argos::CCI_Robot *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCI_Robot::AddActuator",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("argos::CCI_Robot::AddActuator",3,"argos::CCI_Actuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Robot_add_actuator",1,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_argos__CCI_Actuator,0))){
    SWIG_fail_ptr("Robot_add_actuator",3,SWIGTYPE_p_argos__CCI_Actuator);
  }
  
  (arg1)->AddActuator((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_add_sensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *arg1 = (argos::CCI_Robot *) 0 ;
  std::string *arg2 = 0 ;
  argos::CCI_Sensor *arg3 = (argos::CCI_Sensor *) 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::CCI_Robot::AddSensor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Robot::AddSensor",1,"argos::CCI_Robot *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCI_Robot::AddSensor",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("argos::CCI_Robot::AddSensor",3,"argos::CCI_Sensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Robot_add_sensor",1,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_argos__CCI_Sensor,0))){
    SWIG_fail_ptr("Robot_add_sensor",3,SWIGTYPE_p_argos__CCI_Sensor);
  }
  
  (arg1)->AddSensor((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_get_robot_id(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *arg1 = (argos::CCI_Robot *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Robot::GetRobotId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Robot::GetRobotId",1,"argos::CCI_Robot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Robot_get_robot_id",1,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  result = (std::string *) &((argos::CCI_Robot const *)arg1)->GetRobotId();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_set_robot_id(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *arg1 = (argos::CCI_Robot *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::CCI_Robot::SetRobotId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Robot::SetRobotId",1,"argos::CCI_Robot *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCI_Robot::SetRobotId",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Robot_set_robot_id",1,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->SetRobotId((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Robot(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Robot *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Robot::CCI_Robot",0,0)
  result = (argos::CCI_Robot *)new argos::CCI_Robot();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_Robot,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Robot(void *obj) {
argos::CCI_Robot *arg1 = (argos::CCI_Robot *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_Robot_methods[] = {
    {"insert_actuator", _wrap_Robot_insert_actuator}, 
    {"insert_sensor", _wrap_Robot_insert_sensor}, 
    {"get_actuator", _wrap_Robot_get_actuator}, 
    {"get_sensor", _wrap_Robot_get_sensor}, 
    {"get_all_actuators", _wrap_Robot_get_all_actuators}, 
    {"get_all_sensors", _wrap_Robot_get_all_sensors}, 
    {"add_actuator", _wrap_Robot_add_actuator}, 
    {"add_sensor", _wrap_Robot_add_sensor}, 
    {"get_robot_id", _wrap_Robot_get_robot_id}, 
    {"set_robot_id", _wrap_Robot_set_robot_id}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_Robot_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_Robot_bases[] = {0};
static const char *swig_argos_CCI_Robot_base_names[] = {0};
static swig_lua_class _wrap_class_argos_CCI_Robot = { "Robot", &SWIGTYPE_p_argos__CCI_Robot,_wrap_new_Robot, swig_delete_Robot, swig_argos_CCI_Robot_methods, swig_argos_CCI_Robot_attributes, swig_argos_CCI_Robot_bases, swig_argos_CCI_Robot_base_names };

static int _wrap_Controller_RETURN_OK_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt8 result;
  
  SWIG_check_num_args("argos::CCI_Controller::RETURN_OK",0,0)
  result = (argos::UInt8)(argos::UInt8)argos::CCI_Controller::RETURN_OK;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_RETURN_ERROR_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt8 result;
  
  SWIG_check_num_args("argos::CCI_Controller::RETURN_ERROR",0,0)
  result = (argos::UInt8)(argos::UInt8)argos::CCI_Controller::RETURN_ERROR;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_RETURN_CONTINUE_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt8 result;
  
  SWIG_check_num_args("argos::CCI_Controller::RETURN_CONTINUE",0,0)
  result = (argos::UInt8)(argos::UInt8)argos::CCI_Controller::RETURN_CONTINUE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_RETURN_FINISHED_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt8 result;
  
  SWIG_check_num_args("argos::CCI_Controller::RETURN_FINISHED",0,0)
  result = (argos::UInt8)(argos::UInt8)argos::CCI_Controller::RETURN_FINISHED;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_init(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  argos::TConfigurationNode *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_Controller::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::Init",1,"argos::CCI_Controller *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_Controller::Init",2,"argos::TConfigurationNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_init",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ticpp__Element,0))){
    SWIG_fail_ptr("Controller_init",2,SWIGTYPE_p_ticpp__Element);
  }
  
  (arg1)->Init(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_control_step(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  
  SWIG_check_num_args("argos::CCI_Controller::ControlStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::ControlStep",1,"argos::CCI_Controller *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_control_step",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  (arg1)->ControlStep();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_reset(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  
  SWIG_check_num_args("argos::CCI_Controller::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::Reset",1,"argos::CCI_Controller *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_reset",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_destroy(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  
  SWIG_check_num_args("argos::CCI_Controller::Destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::Destroy",1,"argos::CCI_Controller *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_destroy",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  (arg1)->Destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_get_robot(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  argos::CCI_Robot *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Controller::GetRobot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::GetRobot",1,"argos::CCI_Controller *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_get_robot",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  result = (argos::CCI_Robot *) &(arg1)->GetRobot();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_Robot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_set_robot(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  argos::CCI_Robot *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_Controller::SetRobot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::SetRobot",1,"argos::CCI_Controller *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_Controller::SetRobot",2,"argos::CCI_Robot &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_set_robot",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CCI_Robot,0))){
    SWIG_fail_ptr("Controller_set_robot",2,SWIGTYPE_p_argos__CCI_Robot);
  }
  
  (arg1)->SetRobot(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_get_controller_id(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_Controller::GetControllerId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::GetControllerId",1,"argos::CCI_Controller const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_get_controller_id",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  result = (std::string *) &((argos::CCI_Controller const *)arg1)->GetControllerId();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_set_controller_id(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::CCI_Controller::SetControllerId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::SetControllerId",1,"argos::CCI_Controller *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCI_Controller::SetControllerId",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_set_controller_id",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->SetControllerId((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_is_controller_finished(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CCI_Controller::IsControllerFinished",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::IsControllerFinished",1,"argos::CCI_Controller const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_is_controller_finished",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  result = (bool)((argos::CCI_Controller const *)arg1)->IsControllerFinished();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_set_online_parameters(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  argos::UInt32 arg2 ;
  argos::Real *arg3 = (argos::Real *) 0 ;
  
  SWIG_check_num_args("argos::CCI_Controller::SetOnlineParameters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::SetOnlineParameters",1,"argos::CCI_Controller *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CCI_Controller::SetOnlineParameters",2,"argos::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("argos::CCI_Controller::SetOnlineParameters",3,"argos::Real const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_set_online_parameters",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Controller_set_online_parameters",3,SWIGTYPE_p_float);
  }
  
  (arg1)->SetOnlineParameters(arg2,(argos::Real const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_save_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_Controller::SaveState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::SaveState",1,"argos::CCI_Controller *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_Controller::SaveState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_save_state",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("Controller_save_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->SaveState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_load_state(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_Controller *arg1 = (argos::CCI_Controller *) 0 ;
  argos::CByteArray *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_Controller::LoadState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_Controller::LoadState",1,"argos::CCI_Controller *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_Controller::LoadState",2,"argos::CByteArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_Controller,0))){
    SWIG_fail_ptr("Controller_load_state",1,SWIGTYPE_p_argos__CCI_Controller);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CByteArray,0))){
    SWIG_fail_ptr("Controller_load_state",2,SWIGTYPE_p_argos__CByteArray);
  }
  
  (arg1)->LoadState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Controller(void *obj) {
argos::CCI_Controller *arg1 = (argos::CCI_Controller *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_Controller_methods[] = {
    {"init", _wrap_Controller_init}, 
    {"control_step", _wrap_Controller_control_step}, 
    {"reset", _wrap_Controller_reset}, 
    {"destroy", _wrap_Controller_destroy}, 
    {"get_robot", _wrap_Controller_get_robot}, 
    {"set_robot", _wrap_Controller_set_robot}, 
    {"get_controller_id", _wrap_Controller_get_controller_id}, 
    {"set_controller_id", _wrap_Controller_set_controller_id}, 
    {"is_controller_finished", _wrap_Controller_is_controller_finished}, 
    {"set_online_parameters", _wrap_Controller_set_online_parameters}, 
    {"save_state", _wrap_Controller_save_state}, 
    {"load_state", _wrap_Controller_load_state}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_Controller_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_Controller_bases[] = {0,0,0};
static const char *swig_argos_CCI_Controller_base_names[] = {"argos::CBaseConfigurableResource *","argos::CMemento *",0};
static swig_lua_class _wrap_class_argos_CCI_Controller = { "Controller", &SWIGTYPE_p_argos__CCI_Controller,0, swig_delete_Controller, swig_argos_CCI_Controller_methods, swig_argos_CCI_Controller_attributes, swig_argos_CCI_Controller_bases, swig_argos_CCI_Controller_base_names };

static int _wrap_mapControllerFactory_set(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,CCI_Controller_Maker *,std::less< std::string > > *arg1 = (std::map< std::string,CCI_Controller_Maker *,std::less< std::string > > *) 0 ;
  
  SWIG_check_num_args("mapControllerFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mapControllerFactory",1,"std::map< std::string,CCI_Controller_Maker *,std::less< std::string > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_argos__CCI_Controller_pfpFfF_std__lessT_std__string_t_t,0))){
    SWIG_fail_ptr("mapControllerFactory_set",1,SWIGTYPE_p_std__mapT_std__string_argos__CCI_Controller_pfpFfF_std__lessT_std__string_t_t);
  }
  
  mapControllerFactory = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mapControllerFactory_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,CCI_Controller_Maker *,std::less< std::string > > *result = 0 ;
  
  SWIG_check_num_args("mapControllerFactory",0,0)
  result = (std::map< std::string,CCI_Controller_Maker *,std::less< std::string > > *)&mapControllerFactory;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_argos__CCI_Controller_pfpFfF_std__lessT_std__string_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotWheelsActuator_MAX_VELOCITY_CM_SEC_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  
  SWIG_check_num_args("argos::CCI_FootBotWheelsActuator::MAX_VELOCITY_CM_SEC",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CCI_FootBotWheelsActuator::MAX_VELOCITY_CM_SEC",1,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  argos::CCI_FootBotWheelsActuator::MAX_VELOCITY_CM_SEC = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotWheelsActuator_MAX_VELOCITY_CM_SEC_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real result;
  
  SWIG_check_num_args("argos::CCI_FootBotWheelsActuator::MAX_VELOCITY_CM_SEC",0,0)
  result = (argos::Real)argos::CCI_FootBotWheelsActuator::MAX_VELOCITY_CM_SEC;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotWheelsActuator_MIN_VELOCITY_CM_SEC_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  
  SWIG_check_num_args("argos::CCI_FootBotWheelsActuator::MIN_VELOCITY_CM_SEC",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::CCI_FootBotWheelsActuator::MIN_VELOCITY_CM_SEC",1,"argos::Real");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  argos::CCI_FootBotWheelsActuator::MIN_VELOCITY_CM_SEC = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotWheelsActuator_MIN_VELOCITY_CM_SEC_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real result;
  
  SWIG_check_num_args("argos::CCI_FootBotWheelsActuator::MIN_VELOCITY_CM_SEC",0,0)
  result = (argos::Real)argos::CCI_FootBotWheelsActuator::MIN_VELOCITY_CM_SEC;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotWheelsActuator_set_linear_velocity(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotWheelsActuator *arg1 = (argos::CCI_FootBotWheelsActuator *) 0 ;
  argos::Real arg2 ;
  argos::Real arg3 ;
  
  SWIG_check_num_args("argos::CCI_FootBotWheelsActuator::SetLinearVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_FootBotWheelsActuator::SetLinearVelocity",1,"argos::CCI_FootBotWheelsActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CCI_FootBotWheelsActuator::SetLinearVelocity",2,"argos::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CCI_FootBotWheelsActuator::SetLinearVelocity",3,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_FootBotWheelsActuator,0))){
    SWIG_fail_ptr("FootBotWheelsActuator_set_linear_velocity",1,SWIGTYPE_p_argos__CCI_FootBotWheelsActuator);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  arg3 = (argos::Real)lua_tonumber(L, 3);
  (arg1)->SetLinearVelocity(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FootBotWheelsActuator(void *obj) {
argos::CCI_FootBotWheelsActuator *arg1 = (argos::CCI_FootBotWheelsActuator *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_FootBotWheelsActuator_methods[] = {
    {"set_linear_velocity", _wrap_FootBotWheelsActuator_set_linear_velocity}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_FootBotWheelsActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_FootBotWheelsActuator_bases[] = {0,0};
static const char *swig_argos_CCI_FootBotWheelsActuator_base_names[] = {"argos::CCI_Actuator *",0};
static swig_lua_class _wrap_class_argos_CCI_FootBotWheelsActuator = { "FootBotWheelsActuator", &SWIGTYPE_p_argos__CCI_FootBotWheelsActuator,0, swig_delete_FootBotWheelsActuator, swig_argos_CCI_FootBotWheelsActuator_methods, swig_argos_CCI_FootBotWheelsActuator_attributes, swig_argos_CCI_FootBotWheelsActuator_bases, swig_argos_CCI_FootBotWheelsActuator_base_names };

static int _wrap_FootBotLedsActuator_NUM_LEDS_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt8 result;
  
  SWIG_check_num_args("argos::CCI_FootBotLedsActuator::NUM_LEDS",0,0)
  result = (argos::UInt8)(argos::UInt8)argos::CCI_FootBotLedsActuator::NUM_LEDS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotLedsActuator_set_single_color(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotLedsActuator *arg1 = (argos::CCI_FootBotLedsActuator *) 0 ;
  argos::UInt8 arg2 ;
  argos::CColor *arg3 = 0 ;
  
  SWIG_check_num_args("argos::CCI_FootBotLedsActuator::SetSingleColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetSingleColor",1,"argos::CCI_FootBotLedsActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetSingleColor",2,"argos::UInt8 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetSingleColor",3,"argos::CColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_FootBotLedsActuator,0))){
    SWIG_fail_ptr("FootBotLedsActuator_set_single_color",1,SWIGTYPE_p_argos__CCI_FootBotLedsActuator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("FootBotLedsActuator_set_single_color",3,SWIGTYPE_p_argos__CColor);
  }
  
  (arg1)->SetSingleColor(arg2,(argos::CColor const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotLedsActuator_set_all_colors__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotLedsActuator *arg1 = (argos::CCI_FootBotLedsActuator *) 0 ;
  argos::CColor *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_FootBotLedsActuator::SetAllColors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetAllColors",1,"argos::CCI_FootBotLedsActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetAllColors",2,"argos::CColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_FootBotLedsActuator,0))){
    SWIG_fail_ptr("FootBotLedsActuator_set_all_colors",1,SWIGTYPE_p_argos__CCI_FootBotLedsActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CColor,0))){
    SWIG_fail_ptr("FootBotLedsActuator_set_all_colors",2,SWIGTYPE_p_argos__CColor);
  }
  
  (arg1)->SetAllColors((argos::CColor const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotLedsActuator_set_all_colors__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotLedsActuator *arg1 = (argos::CCI_FootBotLedsActuator *) 0 ;
  argos::CCI_FootBotLedsActuator::TLedSettings *arg2 = 0 ;
  
  SWIG_check_num_args("argos::CCI_FootBotLedsActuator::SetAllColors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetAllColors",1,"argos::CCI_FootBotLedsActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetAllColors",2,"argos::CCI_FootBotLedsActuator::TLedSettings const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_FootBotLedsActuator,0))){
    SWIG_fail_ptr("FootBotLedsActuator_set_all_colors",1,SWIGTYPE_p_argos__CCI_FootBotLedsActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_argos__CColor_t,0))){
    SWIG_fail_ptr("FootBotLedsActuator_set_all_colors",2,SWIGTYPE_p_std__vectorT_argos__CColor_t);
  }
  
  (arg1)->SetAllColors((argos::CCI_FootBotLedsActuator::TLedSettings const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotLedsActuator_set_all_colors(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CCI_FootBotLedsActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CColor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FootBotLedsActuator_set_all_colors__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__CCI_FootBotLedsActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_argos__CColor_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FootBotLedsActuator_set_all_colors__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FootBotLedsActuator_set_all_colors'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::CCI_FootBotLedsActuator::SetAllColors(argos::CColor const &)\n"
    "    argos::CCI_FootBotLedsActuator::SetAllColors(argos::CCI_FootBotLedsActuator::TLedSettings const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FootBotLedsActuator_set_single_intensity(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotLedsActuator *arg1 = (argos::CCI_FootBotLedsActuator *) 0 ;
  argos::UInt8 arg2 ;
  argos::UInt8 arg3 ;
  
  SWIG_check_num_args("argos::CCI_FootBotLedsActuator::SetSingleIntensity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetSingleIntensity",1,"argos::CCI_FootBotLedsActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetSingleIntensity",2,"argos::UInt8 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetSingleIntensity",3,"argos::UInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_FootBotLedsActuator,0))){
    SWIG_fail_ptr("FootBotLedsActuator_set_single_intensity",1,SWIGTYPE_p_argos__CCI_FootBotLedsActuator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (argos::UInt8 const)lua_tonumber(L, 3);
  (arg1)->SetSingleIntensity(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotLedsActuator_set_all_intensities(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotLedsActuator *arg1 = (argos::CCI_FootBotLedsActuator *) 0 ;
  argos::UInt8 arg2 ;
  
  SWIG_check_num_args("argos::CCI_FootBotLedsActuator::SetAllIntensities",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetAllIntensities",1,"argos::CCI_FootBotLedsActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CCI_FootBotLedsActuator::SetAllIntensities",2,"argos::UInt8 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_FootBotLedsActuator,0))){
    SWIG_fail_ptr("FootBotLedsActuator_set_all_intensities",1,SWIGTYPE_p_argos__CCI_FootBotLedsActuator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt8 const)lua_tonumber(L, 2);
  (arg1)->SetAllIntensities(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FootBotLedsActuator(void *obj) {
argos::CCI_FootBotLedsActuator *arg1 = (argos::CCI_FootBotLedsActuator *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_FootBotLedsActuator_methods[] = {
    {"set_single_color", _wrap_FootBotLedsActuator_set_single_color}, 
    {"set_all_colors", _wrap_FootBotLedsActuator_set_all_colors}, 
    {"set_single_intensity", _wrap_FootBotLedsActuator_set_single_intensity}, 
    {"set_all_intensities", _wrap_FootBotLedsActuator_set_all_intensities}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_FootBotLedsActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_FootBotLedsActuator_bases[] = {0,0};
static const char *swig_argos_CCI_FootBotLedsActuator_base_names[] = {"argos::CCI_Actuator *",0};
static swig_lua_class _wrap_class_argos_CCI_FootBotLedsActuator = { "FootBotLedsActuator", &SWIGTYPE_p_argos__CCI_FootBotLedsActuator,0, swig_delete_FootBotLedsActuator, swig_argos_CCI_FootBotLedsActuator_methods, swig_argos_CCI_FootBotLedsActuator_attributes, swig_argos_CCI_FootBotLedsActuator_bases, swig_argos_CCI_FootBotLedsActuator_base_names };

static int _wrap_ProximitySensorReading_Value_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::ProximitySensorReading *arg1 = (argos::ProximitySensorReading *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::ProximitySensorReading::Value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::ProximitySensorReading::Value",1,"argos::ProximitySensorReading *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::ProximitySensorReading::Value",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__ProximitySensorReading,0))){
    SWIG_fail_ptr("ProximitySensorReading_Value_set",1,SWIGTYPE_p_argos__ProximitySensorReading);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProximitySensorReading_Value_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::ProximitySensorReading *arg1 = (argos::ProximitySensorReading *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::ProximitySensorReading::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::ProximitySensorReading::Value",1,"argos::ProximitySensorReading *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__ProximitySensorReading,0))){
    SWIG_fail_ptr("ProximitySensorReading_Value_get",1,SWIGTYPE_p_argos__ProximitySensorReading);
  }
  
  result = (argos::Real) ((arg1)->Value);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProximitySensorReading_Angle_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::ProximitySensorReading *arg1 = (argos::ProximitySensorReading *) 0 ;
  argos::CRadians *arg2 = (argos::CRadians *) 0 ;
  
  SWIG_check_num_args("argos::ProximitySensorReading::Angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::ProximitySensorReading::Angle",1,"argos::ProximitySensorReading *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("argos::ProximitySensorReading::Angle",2,"argos::CRadians *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__ProximitySensorReading,0))){
    SWIG_fail_ptr("ProximitySensorReading_Angle_set",1,SWIGTYPE_p_argos__ProximitySensorReading);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("ProximitySensorReading_Angle_set",2,SWIGTYPE_p_argos__CRadians);
  }
  
  if (arg1) (arg1)->Angle = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProximitySensorReading_Angle_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::ProximitySensorReading *arg1 = (argos::ProximitySensorReading *) 0 ;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::ProximitySensorReading::Angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::ProximitySensorReading::Angle",1,"argos::ProximitySensorReading *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__ProximitySensorReading,0))){
    SWIG_fail_ptr("ProximitySensorReading_Angle_get",1,SWIGTYPE_p_argos__ProximitySensorReading);
  }
  
  result = (argos::CRadians *)& ((arg1)->Angle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProximitySensorReading__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::ProximitySensorReading *result = 0 ;
  
  SWIG_check_num_args("argos::ProximitySensorReading::ProximitySensorReading",0,0)
  result = (argos::ProximitySensorReading *)new argos::ProximitySensorReading();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__ProximitySensorReading,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProximitySensorReading__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::CRadians *arg2 = 0 ;
  argos::ProximitySensorReading *result = 0 ;
  
  SWIG_check_num_args("argos::ProximitySensorReading::ProximitySensorReading",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::ProximitySensorReading::ProximitySensorReading",1,"argos::Real");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::ProximitySensorReading::ProximitySensorReading",2,"argos::CRadians const &");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("new_ProximitySensorReading",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::ProximitySensorReading *)new argos::ProximitySensorReading(arg1,(argos::CRadians const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__ProximitySensorReading,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProximitySensorReading(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ProximitySensorReading__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ProximitySensorReading__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ProximitySensorReading'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::ProximitySensorReading::ProximitySensorReading()\n"
    "    argos::ProximitySensorReading::ProximitySensorReading(argos::Real,argos::CRadians const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ProximitySensorReading(void *obj) {
argos::ProximitySensorReading *arg1 = (argos::ProximitySensorReading *) obj;
delete arg1;
}
static swig_lua_method swig_argos_ProximitySensorReading_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_argos_ProximitySensorReading_attributes[] = {
    { "Value", _wrap_ProximitySensorReading_Value_get, _wrap_ProximitySensorReading_Value_set},
    { "Angle", _wrap_ProximitySensorReading_Angle_get, _wrap_ProximitySensorReading_Angle_set},
    {0,0,0}
};
static swig_lua_class *swig_argos_ProximitySensorReading_bases[] = {0};
static const char *swig_argos_ProximitySensorReading_base_names[] = {0};
static swig_lua_class _wrap_class_argos_ProximitySensorReading = { "ProximitySensorReading", &SWIGTYPE_p_argos__ProximitySensorReading,_wrap_new_ProximitySensorReading, swig_delete_ProximitySensorReading, swig_argos_ProximitySensorReading_methods, swig_argos_ProximitySensorReading_attributes, swig_argos_ProximitySensorReading_bases, swig_argos_ProximitySensorReading_base_names };

static int _wrap_FootBotProximitySensor_NUM_READINGS_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt32 result;
  
  SWIG_check_num_args("argos::CCI_FootBotProximitySensor::NUM_READINGS",0,0)
  result = (argos::UInt32)(argos::UInt32)argos::CCI_FootBotProximitySensor::NUM_READINGS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FootBotProximitySensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotProximitySensor *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_FootBotProximitySensor::CCI_FootBotProximitySensor",0,0)
  result = (argos::CCI_FootBotProximitySensor *)new argos::CCI_FootBotProximitySensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_FootBotProximitySensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotProximitySensor_get_readings(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotProximitySensor *arg1 = (argos::CCI_FootBotProximitySensor *) 0 ;
  argos::CCI_FootBotProximitySensor::TReadings *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_FootBotProximitySensor::GetReadings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_FootBotProximitySensor::GetReadings",1,"argos::CCI_FootBotProximitySensor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_FootBotProximitySensor,0))){
    SWIG_fail_ptr("FootBotProximitySensor_get_readings",1,SWIGTYPE_p_argos__CCI_FootBotProximitySensor);
  }
  
  result = (argos::CCI_FootBotProximitySensor::TReadings *) &((argos::CCI_FootBotProximitySensor const *)arg1)->GetReadings();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SReading_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FootBotProximitySensor(void *obj) {
argos::CCI_FootBotProximitySensor *arg1 = (argos::CCI_FootBotProximitySensor *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_FootBotProximitySensor_methods[] = {
    {"get_readings", _wrap_FootBotProximitySensor_get_readings}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_FootBotProximitySensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_FootBotProximitySensor_bases[] = {0,0};
static const char *swig_argos_CCI_FootBotProximitySensor_base_names[] = {"argos::CCI_Sensor *",0};
static swig_lua_class _wrap_class_argos_CCI_FootBotProximitySensor = { "FootBotProximitySensor", &SWIGTYPE_p_argos__CCI_FootBotProximitySensor,_wrap_new_FootBotProximitySensor, swig_delete_FootBotProximitySensor, swig_argos_CCI_FootBotProximitySensor_methods, swig_argos_CCI_FootBotProximitySensor_attributes, swig_argos_CCI_FootBotProximitySensor_bases, swig_argos_CCI_FootBotProximitySensor_base_names };

static int _wrap_RangeAndBearingReceivedPacket_RobotId_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::RobotId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::RobotId",1,"argos::TRangeAndBearingReceivedPacket *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::RobotId",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_RobotId_set",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->RobotId = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_RobotId_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::RobotId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::RobotId",1,"argos::TRangeAndBearingReceivedPacket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_RobotId_get",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  result = (std::string *) & ((arg1)->RobotId);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_Range_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::Range",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::Range",1,"argos::TRangeAndBearingReceivedPacket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::Range",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_Range_set",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Range = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_Range_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::Range",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::Range",1,"argos::TRangeAndBearingReceivedPacket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_Range_get",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  result = (argos::Real) ((arg1)->Range);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_BearingHorizontal_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::CRadians *arg2 = (argos::CRadians *) 0 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::BearingHorizontal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::BearingHorizontal",1,"argos::TRangeAndBearingReceivedPacket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::BearingHorizontal",2,"argos::CRadians *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_BearingHorizontal_set",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_BearingHorizontal_set",2,SWIGTYPE_p_argos__CRadians);
  }
  
  if (arg1) (arg1)->BearingHorizontal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_BearingHorizontal_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::BearingHorizontal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::BearingHorizontal",1,"argos::TRangeAndBearingReceivedPacket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_BearingHorizontal_get",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  result = (argos::CRadians *)& ((arg1)->BearingHorizontal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_BearingVertical_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::CRadians *arg2 = (argos::CRadians *) 0 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::BearingVertical",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::BearingVertical",1,"argos::TRangeAndBearingReceivedPacket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::BearingVertical",2,"argos::CRadians *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_BearingVertical_set",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_BearingVertical_set",2,SWIGTYPE_p_argos__CRadians);
  }
  
  if (arg1) (arg1)->BearingVertical = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_BearingVertical_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::BearingVertical",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::BearingVertical",1,"argos::TRangeAndBearingReceivedPacket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_BearingVertical_get",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  result = (argos::CRadians *)& ((arg1)->BearingVertical);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_Data_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::UInt8 *arg2 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::Data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::Data",1,"argos::TRangeAndBearingReceivedPacket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::Data",2,"argos::TRangeAndBearingReceivedPacket::TRangeAndBearingData");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_Data_set",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_Data_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->Data;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_Data_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::UInt8 *result = 0 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::Data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::Data",1,"argos::TRangeAndBearingReceivedPacket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_Data_get",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  result = (argos::UInt8 *) ((arg1)->Data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_RawValues_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::UInt16 *arg2 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::RawValues",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::RawValues",1,"argos::TRangeAndBearingReceivedPacket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::RawValues",2,"argos::TRangeAndBearingReceivedPacket::TRawValues");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_RawValues_set",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_RawValues_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->RawValues;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_RawValues_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::UInt16 *result = 0 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::RawValues",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::RawValues",1,"argos::TRangeAndBearingReceivedPacket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_RawValues_get",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  result = (argos::UInt16 *) ((arg1)->RawValues);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_Id_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::UInt64 arg2 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::Id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::Id",1,"argos::TRangeAndBearingReceivedPacket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::Id",2,"argos::UInt64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_Id_set",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  arg2 = (argos::UInt64)lua_tonumber(L, 2);
  if (arg1) (arg1)->Id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingReceivedPacket_Id_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) 0 ;
  argos::UInt64 result;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::Id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::Id",1,"argos::TRangeAndBearingReceivedPacket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("RangeAndBearingReceivedPacket_Id_get",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  result = (argos::UInt64) ((arg1)->Id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RangeAndBearingReceivedPacket__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *result = 0 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::TRangeAndBearingReceivedPacket",0,0)
  result = (argos::TRangeAndBearingReceivedPacket *)new argos::TRangeAndBearingReceivedPacket();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RangeAndBearingReceivedPacket__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::TRangeAndBearingReceivedPacket *arg1 = 0 ;
  argos::TRangeAndBearingReceivedPacket *result = 0 ;
  
  SWIG_check_num_args("argos::TRangeAndBearingReceivedPacket::TRangeAndBearingReceivedPacket",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("argos::TRangeAndBearingReceivedPacket::TRangeAndBearingReceivedPacket",1,"argos::TRangeAndBearingReceivedPacket const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,0))){
    SWIG_fail_ptr("new_RangeAndBearingReceivedPacket",1,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket);
  }
  
  result = (argos::TRangeAndBearingReceivedPacket *)new argos::TRangeAndBearingReceivedPacket((argos::TRangeAndBearingReceivedPacket const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RangeAndBearingReceivedPacket(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RangeAndBearingReceivedPacket__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RangeAndBearingReceivedPacket__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_RangeAndBearingReceivedPacket'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::TRangeAndBearingReceivedPacket::TRangeAndBearingReceivedPacket()\n"
    "    argos::TRangeAndBearingReceivedPacket::TRangeAndBearingReceivedPacket(argos::TRangeAndBearingReceivedPacket const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_RangeAndBearingReceivedPacket(void *obj) {
argos::TRangeAndBearingReceivedPacket *arg1 = (argos::TRangeAndBearingReceivedPacket *) obj;
delete arg1;
}
static swig_lua_method swig_argos_TRangeAndBearingReceivedPacket_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_argos_TRangeAndBearingReceivedPacket_attributes[] = {
    { "RobotId", _wrap_RangeAndBearingReceivedPacket_RobotId_get, _wrap_RangeAndBearingReceivedPacket_RobotId_set},
    { "Range", _wrap_RangeAndBearingReceivedPacket_Range_get, _wrap_RangeAndBearingReceivedPacket_Range_set},
    { "BearingHorizontal", _wrap_RangeAndBearingReceivedPacket_BearingHorizontal_get, _wrap_RangeAndBearingReceivedPacket_BearingHorizontal_set},
    { "BearingVertical", _wrap_RangeAndBearingReceivedPacket_BearingVertical_get, _wrap_RangeAndBearingReceivedPacket_BearingVertical_set},
    { "Data", _wrap_RangeAndBearingReceivedPacket_Data_get, _wrap_RangeAndBearingReceivedPacket_Data_set},
    { "RawValues", _wrap_RangeAndBearingReceivedPacket_RawValues_get, _wrap_RangeAndBearingReceivedPacket_RawValues_set},
    { "Id", _wrap_RangeAndBearingReceivedPacket_Id_get, _wrap_RangeAndBearingReceivedPacket_Id_set},
    {0,0,0}
};
static swig_lua_class *swig_argos_TRangeAndBearingReceivedPacket_bases[] = {0};
static const char *swig_argos_TRangeAndBearingReceivedPacket_base_names[] = {0};
static swig_lua_class _wrap_class_argos_TRangeAndBearingReceivedPacket = { "RangeAndBearingReceivedPacket", &SWIGTYPE_p_argos__TRangeAndBearingReceivedPacket,_wrap_new_RangeAndBearingReceivedPacket, swig_delete_RangeAndBearingReceivedPacket, swig_argos_TRangeAndBearingReceivedPacket_methods, swig_argos_TRangeAndBearingReceivedPacket_attributes, swig_argos_TRangeAndBearingReceivedPacket_bases, swig_argos_TRangeAndBearingReceivedPacket_base_names };

static int _wrap_RangeAndBearingSensor_clear_rabreceived_packets(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_RangeAndBearingSensor *arg1 = (argos::CCI_RangeAndBearingSensor *) 0 ;
  
  SWIG_check_num_args("argos::CCI_RangeAndBearingSensor::ClearRABReceivedPackets",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_RangeAndBearingSensor::ClearRABReceivedPackets",1,"argos::CCI_RangeAndBearingSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor,0))){
    SWIG_fail_ptr("RangeAndBearingSensor_clear_rabreceived_packets",1,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor);
  }
  
  (arg1)->ClearRABReceivedPackets();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingSensor_get_last_received_packets(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_RangeAndBearingSensor *arg1 = (argos::CCI_RangeAndBearingSensor *) 0 ;
  argos::CCI_RangeAndBearingSensor::TLastReceivedPackets *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_RangeAndBearingSensor::GetLastReceivedPackets",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_RangeAndBearingSensor::GetLastReceivedPackets",1,"argos::CCI_RangeAndBearingSensor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor,0))){
    SWIG_fail_ptr("RangeAndBearingSensor_get_last_received_packets",1,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor);
  }
  
  result = (argos::CCI_RangeAndBearingSensor::TLastReceivedPackets *) &((argos::CCI_RangeAndBearingSensor const *)arg1)->GetLastReceivedPackets();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_argos__TRangeAndBearingReceivedPacket_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingSensor_get_latest_packet_id(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_RangeAndBearingSensor *arg1 = (argos::CCI_RangeAndBearingSensor *) 0 ;
  argos::UInt64 result;
  
  SWIG_check_num_args("argos::CCI_RangeAndBearingSensor::GetLatestPacketId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_RangeAndBearingSensor::GetLatestPacketId",1,"argos::CCI_RangeAndBearingSensor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor,0))){
    SWIG_fail_ptr("RangeAndBearingSensor_get_latest_packet_id",1,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor);
  }
  
  result = (argos::UInt64)((argos::CCI_RangeAndBearingSensor const *)arg1)->GetLatestPacketId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingSensor_get_rab_id_from_robot_id(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_RangeAndBearingSensor *arg1 = (argos::CCI_RangeAndBearingSensor *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  argos::UInt16 result;
  
  SWIG_check_num_args("argos::CCI_RangeAndBearingSensor::GetRabIdFromRobotId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_RangeAndBearingSensor::GetRabIdFromRobotId",1,"argos::CCI_RangeAndBearingSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("argos::CCI_RangeAndBearingSensor::GetRabIdFromRobotId",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor,0))){
    SWIG_fail_ptr("RangeAndBearingSensor_get_rab_id_from_robot_id",1,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (argos::UInt16)(arg1)->GetRabIdFromRobotId((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingSensor_get_robot_id_from_rab_id(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_RangeAndBearingSensor *arg1 = (argos::CCI_RangeAndBearingSensor *) 0 ;
  argos::UInt16 arg2 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_RangeAndBearingSensor::GetRobotIdFromRabId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_RangeAndBearingSensor::GetRobotIdFromRabId",1,"argos::CCI_RangeAndBearingSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::CCI_RangeAndBearingSensor::GetRobotIdFromRabId",2,"argos::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor,0))){
    SWIG_fail_ptr("RangeAndBearingSensor_get_robot_id_from_rab_id",1,SWIGTYPE_p_argos__CCI_RangeAndBearingSensor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (argos::UInt16)lua_tonumber(L, 2);
  result = (std::string *) &(arg1)->GetRobotIdFromRabId(arg2);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RangeAndBearingSensor(void *obj) {
argos::CCI_RangeAndBearingSensor *arg1 = (argos::CCI_RangeAndBearingSensor *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_RangeAndBearingSensor_methods[] = {
    {"clear_rabreceived_packets", _wrap_RangeAndBearingSensor_clear_rabreceived_packets}, 
    {"get_last_received_packets", _wrap_RangeAndBearingSensor_get_last_received_packets}, 
    {"get_latest_packet_id", _wrap_RangeAndBearingSensor_get_latest_packet_id}, 
    {"get_rab_id_from_robot_id", _wrap_RangeAndBearingSensor_get_rab_id_from_robot_id}, 
    {"get_robot_id_from_rab_id", _wrap_RangeAndBearingSensor_get_robot_id_from_rab_id}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_RangeAndBearingSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_RangeAndBearingSensor_bases[] = {0,0};
static const char *swig_argos_CCI_RangeAndBearingSensor_base_names[] = {"argos::CCI_Sensor *",0};
static swig_lua_class _wrap_class_argos_CCI_RangeAndBearingSensor = { "RangeAndBearingSensor", &SWIGTYPE_p_argos__CCI_RangeAndBearingSensor,0, swig_delete_RangeAndBearingSensor, swig_argos_CCI_RangeAndBearingSensor_methods, swig_argos_CCI_RangeAndBearingSensor_attributes, swig_argos_CCI_RangeAndBearingSensor_bases, swig_argos_CCI_RangeAndBearingSensor_base_names };

static int _wrap_RangeAndBearingActuator_is_last_packet_sent(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_RangeAndBearingActuator *arg1 = (argos::CCI_RangeAndBearingActuator *) 0 ;
  bool result;
  
  SWIG_check_num_args("argos::CCI_RangeAndBearingActuator::IsLastPacketSent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_RangeAndBearingActuator::IsLastPacketSent",1,"argos::CCI_RangeAndBearingActuator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_RangeAndBearingActuator,0))){
    SWIG_fail_ptr("RangeAndBearingActuator_is_last_packet_sent",1,SWIGTYPE_p_argos__CCI_RangeAndBearingActuator);
  }
  
  result = (bool)((argos::CCI_RangeAndBearingActuator const *)arg1)->IsLastPacketSent();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RangeAndBearingActuator_set_data(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_RangeAndBearingActuator *arg1 = (argos::CCI_RangeAndBearingActuator *) 0 ;
  argos::TRangeAndBearingReceivedPacket::TRangeAndBearingData *arg2 = 0 ;
  argos::UInt8 *temp2 ;
  
  SWIG_check_num_args("argos::CCI_RangeAndBearingActuator::SetData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_RangeAndBearingActuator::SetData",1,"argos::CCI_RangeAndBearingActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::CCI_RangeAndBearingActuator::SetData",2,"argos::TRangeAndBearingReceivedPacket::TRangeAndBearingData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_RangeAndBearingActuator,0))){
    SWIG_fail_ptr("RangeAndBearingActuator_set_data",1,SWIGTYPE_p_argos__CCI_RangeAndBearingActuator);
  }
  
  temp2=(argos::UInt8 *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_unsigned_char,0,2,"RangeAndBearingActuator_set_data");
  arg2=(argos::TRangeAndBearingReceivedPacket::TRangeAndBearingData *)&temp2;
  (arg1)->SetData((argos::TRangeAndBearingReceivedPacket::TRangeAndBearingData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RangeAndBearingActuator(void *obj) {
argos::CCI_RangeAndBearingActuator *arg1 = (argos::CCI_RangeAndBearingActuator *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_RangeAndBearingActuator_methods[] = {
    {"is_last_packet_sent", _wrap_RangeAndBearingActuator_is_last_packet_sent}, 
    {"set_data", _wrap_RangeAndBearingActuator_set_data}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_RangeAndBearingActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_RangeAndBearingActuator_bases[] = {0,0};
static const char *swig_argos_CCI_RangeAndBearingActuator_base_names[] = {"argos::CCI_Actuator *",0};
static swig_lua_class _wrap_class_argos_CCI_RangeAndBearingActuator = { "RangeAndBearingActuator", &SWIGTYPE_p_argos__CCI_RangeAndBearingActuator,0, swig_delete_RangeAndBearingActuator, swig_argos_CCI_RangeAndBearingActuator_methods, swig_argos_CCI_RangeAndBearingActuator_attributes, swig_argos_CCI_RangeAndBearingActuator_bases, swig_argos_CCI_RangeAndBearingActuator_base_names };

static int _wrap_LightSensorReading_Value_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::LightSensorReading *arg1 = (argos::LightSensorReading *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::LightSensorReading::Value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::LightSensorReading::Value",1,"argos::LightSensorReading *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::LightSensorReading::Value",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__LightSensorReading,0))){
    SWIG_fail_ptr("LightSensorReading_Value_set",1,SWIGTYPE_p_argos__LightSensorReading);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LightSensorReading_Value_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::LightSensorReading *arg1 = (argos::LightSensorReading *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::LightSensorReading::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::LightSensorReading::Value",1,"argos::LightSensorReading *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__LightSensorReading,0))){
    SWIG_fail_ptr("LightSensorReading_Value_get",1,SWIGTYPE_p_argos__LightSensorReading);
  }
  
  result = (argos::Real) ((arg1)->Value);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LightSensorReading_Angle_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::LightSensorReading *arg1 = (argos::LightSensorReading *) 0 ;
  argos::CRadians *arg2 = (argos::CRadians *) 0 ;
  
  SWIG_check_num_args("argos::LightSensorReading::Angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::LightSensorReading::Angle",1,"argos::LightSensorReading *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("argos::LightSensorReading::Angle",2,"argos::CRadians *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__LightSensorReading,0))){
    SWIG_fail_ptr("LightSensorReading_Angle_set",1,SWIGTYPE_p_argos__LightSensorReading);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("LightSensorReading_Angle_set",2,SWIGTYPE_p_argos__CRadians);
  }
  
  if (arg1) (arg1)->Angle = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LightSensorReading_Angle_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::LightSensorReading *arg1 = (argos::LightSensorReading *) 0 ;
  argos::CRadians *result = 0 ;
  
  SWIG_check_num_args("argos::LightSensorReading::Angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::LightSensorReading::Angle",1,"argos::LightSensorReading *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__LightSensorReading,0))){
    SWIG_fail_ptr("LightSensorReading_Angle_get",1,SWIGTYPE_p_argos__LightSensorReading);
  }
  
  result = (argos::CRadians *)& ((arg1)->Angle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CRadians,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LightSensorReading__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::LightSensorReading *result = 0 ;
  
  SWIG_check_num_args("argos::LightSensorReading::LightSensorReading",0,0)
  result = (argos::LightSensorReading *)new argos::LightSensorReading();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__LightSensorReading,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LightSensorReading__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::CRadians *arg2 = 0 ;
  argos::LightSensorReading *result = 0 ;
  
  SWIG_check_num_args("argos::LightSensorReading::LightSensorReading",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::LightSensorReading::LightSensorReading",1,"argos::Real");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::LightSensorReading::LightSensorReading",2,"argos::CRadians const &");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CRadians,0))){
    SWIG_fail_ptr("new_LightSensorReading",2,SWIGTYPE_p_argos__CRadians);
  }
  
  result = (argos::LightSensorReading *)new argos::LightSensorReading(arg1,(argos::CRadians const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__LightSensorReading,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LightSensorReading(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LightSensorReading__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CRadians, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_LightSensorReading__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LightSensorReading'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::LightSensorReading::LightSensorReading()\n"
    "    argos::LightSensorReading::LightSensorReading(argos::Real,argos::CRadians const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_LightSensorReading(void *obj) {
argos::LightSensorReading *arg1 = (argos::LightSensorReading *) obj;
delete arg1;
}
static swig_lua_method swig_argos_LightSensorReading_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_argos_LightSensorReading_attributes[] = {
    { "Value", _wrap_LightSensorReading_Value_get, _wrap_LightSensorReading_Value_set},
    { "Angle", _wrap_LightSensorReading_Angle_get, _wrap_LightSensorReading_Angle_set},
    {0,0,0}
};
static swig_lua_class *swig_argos_LightSensorReading_bases[] = {0};
static const char *swig_argos_LightSensorReading_base_names[] = {0};
static swig_lua_class _wrap_class_argos_LightSensorReading = { "LightSensorReading", &SWIGTYPE_p_argos__LightSensorReading,_wrap_new_LightSensorReading, swig_delete_LightSensorReading, swig_argos_LightSensorReading_methods, swig_argos_LightSensorReading_attributes, swig_argos_LightSensorReading_bases, swig_argos_LightSensorReading_base_names };

static int _wrap_FootBotLightSensor_NUM_READINGS_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt32 result;
  
  SWIG_check_num_args("argos::CCI_FootBotLightSensor::NUM_READINGS",0,0)
  result = (argos::UInt32)(argos::UInt32)argos::CCI_FootBotLightSensor::NUM_READINGS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FootBotLightSensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotLightSensor *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_FootBotLightSensor::CCI_FootBotLightSensor",0,0)
  result = (argos::CCI_FootBotLightSensor *)new argos::CCI_FootBotLightSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_FootBotLightSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotLightSensor_get_readings(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotLightSensor *arg1 = (argos::CCI_FootBotLightSensor *) 0 ;
  argos::CCI_FootBotLightSensor::TReadings *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_FootBotLightSensor::GetReadings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_FootBotLightSensor::GetReadings",1,"argos::CCI_FootBotLightSensor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_FootBotLightSensor,0))){
    SWIG_fail_ptr("FootBotLightSensor_get_readings",1,SWIGTYPE_p_argos__CCI_FootBotLightSensor);
  }
  
  result = (argos::CCI_FootBotLightSensor::TReadings *) &((argos::CCI_FootBotLightSensor const *)arg1)->GetReadings();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SReading_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FootBotLightSensor(void *obj) {
argos::CCI_FootBotLightSensor *arg1 = (argos::CCI_FootBotLightSensor *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_FootBotLightSensor_methods[] = {
    {"get_readings", _wrap_FootBotLightSensor_get_readings}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_FootBotLightSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_FootBotLightSensor_bases[] = {0,0};
static const char *swig_argos_CCI_FootBotLightSensor_base_names[] = {"argos::CCI_Sensor *",0};
static swig_lua_class _wrap_class_argos_CCI_FootBotLightSensor = { "FootBotLightSensor", &SWIGTYPE_p_argos__CCI_FootBotLightSensor,_wrap_new_FootBotLightSensor, swig_delete_FootBotLightSensor, swig_argos_CCI_FootBotLightSensor_methods, swig_argos_CCI_FootBotLightSensor_attributes, swig_argos_CCI_FootBotLightSensor_bases, swig_argos_CCI_FootBotLightSensor_base_names };

static int _wrap_MotorGroundSensorReading_Value_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::MotorGroundSensorReading *arg1 = (argos::MotorGroundSensorReading *) 0 ;
  argos::Real arg2 ;
  
  SWIG_check_num_args("argos::MotorGroundSensorReading::Value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::MotorGroundSensorReading::Value",1,"argos::MotorGroundSensorReading *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("argos::MotorGroundSensorReading::Value",2,"argos::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__MotorGroundSensorReading,0))){
    SWIG_fail_ptr("MotorGroundSensorReading_Value_set",1,SWIGTYPE_p_argos__MotorGroundSensorReading);
  }
  
  arg2 = (argos::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorGroundSensorReading_Value_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::MotorGroundSensorReading *arg1 = (argos::MotorGroundSensorReading *) 0 ;
  argos::Real result;
  
  SWIG_check_num_args("argos::MotorGroundSensorReading::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::MotorGroundSensorReading::Value",1,"argos::MotorGroundSensorReading *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__MotorGroundSensorReading,0))){
    SWIG_fail_ptr("MotorGroundSensorReading_Value_get",1,SWIGTYPE_p_argos__MotorGroundSensorReading);
  }
  
  result = (argos::Real) ((arg1)->Value);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorGroundSensorReading_Offset_set(lua_State* L) {
  int SWIG_arg = 0;
  argos::MotorGroundSensorReading *arg1 = (argos::MotorGroundSensorReading *) 0 ;
  argos::CVector2 *arg2 = (argos::CVector2 *) 0 ;
  
  SWIG_check_num_args("argos::MotorGroundSensorReading::Offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::MotorGroundSensorReading::Offset",1,"argos::MotorGroundSensorReading *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("argos::MotorGroundSensorReading::Offset",2,"argos::CVector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__MotorGroundSensorReading,0))){
    SWIG_fail_ptr("MotorGroundSensorReading_Offset_set",1,SWIGTYPE_p_argos__MotorGroundSensorReading);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("MotorGroundSensorReading_Offset_set",2,SWIGTYPE_p_argos__CVector2);
  }
  
  if (arg1) (arg1)->Offset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorGroundSensorReading_Offset_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::MotorGroundSensorReading *arg1 = (argos::MotorGroundSensorReading *) 0 ;
  argos::CVector2 *result = 0 ;
  
  SWIG_check_num_args("argos::MotorGroundSensorReading::Offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::MotorGroundSensorReading::Offset",1,"argos::MotorGroundSensorReading *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__MotorGroundSensorReading,0))){
    SWIG_fail_ptr("MotorGroundSensorReading_Offset_get",1,SWIGTYPE_p_argos__MotorGroundSensorReading);
  }
  
  result = (argos::CVector2 *)& ((arg1)->Offset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MotorGroundSensorReading__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  argos::MotorGroundSensorReading *result = 0 ;
  
  SWIG_check_num_args("argos::MotorGroundSensorReading::MotorGroundSensorReading",0,0)
  result = (argos::MotorGroundSensorReading *)new argos::MotorGroundSensorReading();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__MotorGroundSensorReading,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MotorGroundSensorReading__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  argos::Real arg1 ;
  argos::CVector2 *arg2 = 0 ;
  argos::MotorGroundSensorReading *result = 0 ;
  
  SWIG_check_num_args("argos::MotorGroundSensorReading::MotorGroundSensorReading",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("argos::MotorGroundSensorReading::MotorGroundSensorReading",1,"argos::Real");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("argos::MotorGroundSensorReading::MotorGroundSensorReading",2,"argos::CVector2 const &");
  arg1 = (argos::Real)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_argos__CVector2,0))){
    SWIG_fail_ptr("new_MotorGroundSensorReading",2,SWIGTYPE_p_argos__CVector2);
  }
  
  result = (argos::MotorGroundSensorReading *)new argos::MotorGroundSensorReading(arg1,(argos::CVector2 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__MotorGroundSensorReading,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MotorGroundSensorReading(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MotorGroundSensorReading__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_argos__CVector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_MotorGroundSensorReading__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_MotorGroundSensorReading'\n"
    "  Possible C/C++ prototypes are:\n"
    "    argos::MotorGroundSensorReading::MotorGroundSensorReading()\n"
    "    argos::MotorGroundSensorReading::MotorGroundSensorReading(argos::Real,argos::CVector2 const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_MotorGroundSensorReading(void *obj) {
argos::MotorGroundSensorReading *arg1 = (argos::MotorGroundSensorReading *) obj;
delete arg1;
}
static swig_lua_method swig_argos_MotorGroundSensorReading_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_argos_MotorGroundSensorReading_attributes[] = {
    { "Value", _wrap_MotorGroundSensorReading_Value_get, _wrap_MotorGroundSensorReading_Value_set},
    { "Offset", _wrap_MotorGroundSensorReading_Offset_get, _wrap_MotorGroundSensorReading_Offset_set},
    {0,0,0}
};
static swig_lua_class *swig_argos_MotorGroundSensorReading_bases[] = {0};
static const char *swig_argos_MotorGroundSensorReading_base_names[] = {0};
static swig_lua_class _wrap_class_argos_MotorGroundSensorReading = { "MotorGroundSensorReading", &SWIGTYPE_p_argos__MotorGroundSensorReading,_wrap_new_MotorGroundSensorReading, swig_delete_MotorGroundSensorReading, swig_argos_MotorGroundSensorReading_methods, swig_argos_MotorGroundSensorReading_attributes, swig_argos_MotorGroundSensorReading_bases, swig_argos_MotorGroundSensorReading_base_names };

static int _wrap_FootBotMotorGroundSensor_NUM_READINGS_get(lua_State* L) {
  int SWIG_arg = 0;
  argos::UInt32 result;
  
  SWIG_check_num_args("argos::CCI_FootBotMotorGroundSensor::NUM_READINGS",0,0)
  result = (argos::UInt32)(argos::UInt32)argos::CCI_FootBotMotorGroundSensor::NUM_READINGS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FootBotMotorGroundSensor(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotMotorGroundSensor *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_FootBotMotorGroundSensor::CCI_FootBotMotorGroundSensor",0,0)
  result = (argos::CCI_FootBotMotorGroundSensor *)new argos::CCI_FootBotMotorGroundSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_argos__CCI_FootBotMotorGroundSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FootBotMotorGroundSensor_get_readings(lua_State* L) {
  int SWIG_arg = 0;
  argos::CCI_FootBotMotorGroundSensor *arg1 = (argos::CCI_FootBotMotorGroundSensor *) 0 ;
  argos::CCI_FootBotMotorGroundSensor::TReadings *result = 0 ;
  
  SWIG_check_num_args("argos::CCI_FootBotMotorGroundSensor::GetReadings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("argos::CCI_FootBotMotorGroundSensor::GetReadings",1,"argos::CCI_FootBotMotorGroundSensor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_argos__CCI_FootBotMotorGroundSensor,0))){
    SWIG_fail_ptr("FootBotMotorGroundSensor_get_readings",1,SWIGTYPE_p_argos__CCI_FootBotMotorGroundSensor);
  }
  
  result = (argos::CCI_FootBotMotorGroundSensor::TReadings *) &((argos::CCI_FootBotMotorGroundSensor const *)arg1)->GetReadings();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SReading_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FootBotMotorGroundSensor(void *obj) {
argos::CCI_FootBotMotorGroundSensor *arg1 = (argos::CCI_FootBotMotorGroundSensor *) obj;
delete arg1;
}
static swig_lua_method swig_argos_CCI_FootBotMotorGroundSensor_methods[] = {
    {"get_readings", _wrap_FootBotMotorGroundSensor_get_readings}, 
    {0,0}
};
static swig_lua_attribute swig_argos_CCI_FootBotMotorGroundSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_argos_CCI_FootBotMotorGroundSensor_bases[] = {0,0};
static const char *swig_argos_CCI_FootBotMotorGroundSensor_base_names[] = {"argos::CCI_Sensor *",0};
static swig_lua_class _wrap_class_argos_CCI_FootBotMotorGroundSensor = { "FootBotMotorGroundSensor", &SWIGTYPE_p_argos__CCI_FootBotMotorGroundSensor,_wrap_new_FootBotMotorGroundSensor, swig_delete_FootBotMotorGroundSensor, swig_argos_CCI_FootBotMotorGroundSensor_methods, swig_argos_CCI_FootBotMotorGroundSensor_attributes, swig_argos_CCI_FootBotMotorGroundSensor_bases, swig_argos_CCI_FootBotMotorGroundSensor_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "TiXmlBase_set_condense_white_space", _wrap_TiXmlBase_set_condense_white_space},
    { "TiXmlBase_is_white_space_condensed", _wrap_TiXmlBase_is_white_space_condensed},
    { "TiXmlBase_encode_string", _wrap_TiXmlBase_encode_string},
    { "node_exists", _wrap_node_exists},
    { "get_node", _wrap_get_node},
    { "add_child_node", _wrap_add_child_node},
    { "node_attribute_exists", _wrap_node_attribute_exists},
    { "get_node_attribute",_wrap_get_node_attribute},
    { "get_node_attribute_or_default",_wrap_get_node_attribute_or_default},
    { "set_node_attribute",_wrap_set_node_attribute},
    { "tokenize", _wrap_tokenize},
    { "string_to_upper_case", _wrap_string_to_upper_case},
    { "string_to_lower_case", _wrap_string_to_lower_case},
    { "expand_argo_sinstall_dir", _wrap_expand_argo_sinstall_dir},
    { "replace", _wrap_replace},
    { "match_pattern", _wrap_match_pattern},
    { "abs", _wrap_abs},
    { "floor", _wrap_floor},
    { "ceil", _wrap_ceil},
    { "round_closest_to_zero", _wrap_round_closest_to_zero},
    { "double_eq_absolute", _wrap_double_eq_absolute},
    { "double_eq", _wrap_double_eq},
    { "to_degrees", _wrap_to_degrees},
    { "to_radians", _wrap_to_radians},
    { "sin", _wrap_sin},
    { "cos", _wrap_cos},
    { "tan", _wrap_tan},
    { "asin", _wrap_asin},
    { "acos", _wrap_acos},
    { "atan2", _wrap_atan2},
    { "square_distance",_wrap_square_distance},
    { "distance",_wrap_distance},
    { "Random_create_category", _wrap_Random_create_category},
    { "Random_get_category", _wrap_Random_get_category},
    { "Random_remove_category", _wrap_Random_remove_category},
    { "Random_create_rng",_wrap_Random_create_rng},
    { "Random_get_seed_of", _wrap_Random_get_seed_of},
    { "Random_set_seed_of", _wrap_Random_set_seed_of},
    { "Random_reset", _wrap_Random_reset},
    { "Random_get_rngtypes", _wrap_Random_get_rngtypes},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "TIXML_MAJOR_VERSION", _wrap_TIXML_MAJOR_VERSION_get, SWIG_Lua_set_immutable },
    { "TIXML_MINOR_VERSION", _wrap_TIXML_MINOR_VERSION_get, SWIG_Lua_set_immutable },
    { "TIXML_PATCH_VERSION", _wrap_TIXML_PATCH_VERSION_get, SWIG_Lua_set_immutable },
    { "TIXML_DEFAULT_ENCODING", _wrap_TIXML_DEFAULT_ENCODING_get, SWIG_Lua_set_immutable },
    { "TiXmlBase_utf8ByteTable", _wrap_TiXmlBase_utf8ByteTable_get, SWIG_Lua_set_immutable },
    { "Color_BLACK", _wrap_Color_BLACK_get, _wrap_Color_BLACK_set },
    { "Color_WHITE", _wrap_Color_WHITE_get, _wrap_Color_WHITE_set },
    { "Color_RED", _wrap_Color_RED_get, _wrap_Color_RED_set },
    { "Color_GREEN", _wrap_Color_GREEN_get, _wrap_Color_GREEN_set },
    { "Color_BLUE", _wrap_Color_BLUE_get, _wrap_Color_BLUE_set },
    { "Color_MAGENTA", _wrap_Color_MAGENTA_get, _wrap_Color_MAGENTA_set },
    { "Color_CYAN", _wrap_Color_CYAN_get, _wrap_Color_CYAN_set },
    { "Color_YELLOW", _wrap_Color_YELLOW_get, _wrap_Color_YELLOW_set },
    { "Color_ORANGE", _wrap_Color_ORANGE_get, _wrap_Color_ORANGE_set },
    { "Color_GRAY10", _wrap_Color_GRAY10_get, _wrap_Color_GRAY10_set },
    { "Color_GRAY20", _wrap_Color_GRAY20_get, _wrap_Color_GRAY20_set },
    { "Color_GRAY30", _wrap_Color_GRAY30_get, _wrap_Color_GRAY30_set },
    { "Color_GRAY40", _wrap_Color_GRAY40_get, _wrap_Color_GRAY40_set },
    { "Color_GRAY50", _wrap_Color_GRAY50_get, _wrap_Color_GRAY50_set },
    { "Color_GRAY60", _wrap_Color_GRAY60_get, _wrap_Color_GRAY60_set },
    { "Color_GRAY70", _wrap_Color_GRAY70_get, _wrap_Color_GRAY70_set },
    { "Color_GRAY80", _wrap_Color_GRAY80_get, _wrap_Color_GRAY80_set },
    { "Color_GRAY90", _wrap_Color_GRAY90_get, _wrap_Color_GRAY90_set },
    { "Radians_PI", _wrap_Radians_PI_get, SWIG_Lua_set_immutable },
    { "Radians_TWO_PI", _wrap_Radians_TWO_PI_get, SWIG_Lua_set_immutable },
    { "Radians_PI_OVER_TWO", _wrap_Radians_PI_OVER_TWO_get, SWIG_Lua_set_immutable },
    { "Radians_PI_OVER_THREE", _wrap_Radians_PI_OVER_THREE_get, SWIG_Lua_set_immutable },
    { "Radians_PI_OVER_FOUR", _wrap_Radians_PI_OVER_FOUR_get, SWIG_Lua_set_immutable },
    { "Radians_PI_OVER_SIX", _wrap_Radians_PI_OVER_SIX_get, SWIG_Lua_set_immutable },
    { "Radians_ZERO", _wrap_Radians_ZERO_get, SWIG_Lua_set_immutable },
    { "Radians_SIGNED_RANGE", _wrap_Radians_SIGNED_RANGE_get, SWIG_Lua_set_immutable },
    { "Radians_UNSIGNED_RANGE", _wrap_Radians_UNSIGNED_RANGE_get, SWIG_Lua_set_immutable },
    { "Radians_ASEBA_RANGE", _wrap_Radians_ASEBA_RANGE_get, SWIG_Lua_set_immutable },
    { "Radians_RADIANS_TO_DEGREES", _wrap_Radians_RADIANS_TO_DEGREES_get, SWIG_Lua_set_immutable },
    { "Vector2_X", _wrap_Vector2_X_get, SWIG_Lua_set_immutable },
    { "Vector2_Y", _wrap_Vector2_Y_get, SWIG_Lua_set_immutable },
    { "Vector3_X", _wrap_Vector3_X_get, SWIG_Lua_set_immutable },
    { "Vector3_Y", _wrap_Vector3_Y_get, SWIG_Lua_set_immutable },
    { "Vector3_Z", _wrap_Vector3_Z_get, SWIG_Lua_set_immutable },
    { "Vector3_ZERO", _wrap_Vector3_ZERO_get, SWIG_Lua_set_immutable },
    { "Controller_RETURN_OK", _wrap_Controller_RETURN_OK_get, SWIG_Lua_set_immutable },
    { "Controller_RETURN_ERROR", _wrap_Controller_RETURN_ERROR_get, SWIG_Lua_set_immutable },
    { "Controller_RETURN_CONTINUE", _wrap_Controller_RETURN_CONTINUE_get, SWIG_Lua_set_immutable },
    { "Controller_RETURN_FINISHED", _wrap_Controller_RETURN_FINISHED_get, SWIG_Lua_set_immutable },
    { "mapControllerFactory", _wrap_mapControllerFactory_get, _wrap_mapControllerFactory_set },
    { "FootBotWheelsActuator_MAX_VELOCITY_CM_SEC", _wrap_FootBotWheelsActuator_MAX_VELOCITY_CM_SEC_get, _wrap_FootBotWheelsActuator_MAX_VELOCITY_CM_SEC_set },
    { "FootBotWheelsActuator_MIN_VELOCITY_CM_SEC", _wrap_FootBotWheelsActuator_MIN_VELOCITY_CM_SEC_get, _wrap_FootBotWheelsActuator_MIN_VELOCITY_CM_SEC_set },
    { "FootBotLedsActuator_NUM_LEDS", _wrap_FootBotLedsActuator_NUM_LEDS_get, SWIG_Lua_set_immutable },
    { "FootBotProximitySensor_NUM_READINGS", _wrap_FootBotProximitySensor_NUM_READINGS_get, SWIG_Lua_set_immutable },
    { "FootBotLightSensor_NUM_READINGS", _wrap_FootBotLightSensor_NUM_READINGS_get, SWIG_Lua_set_immutable },
    { "FootBotMotorGroundSensor_NUM_READINGS", _wrap_FootBotMotorGroundSensor_NUM_READINGS_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"TIXML_SUCCESS", (long) TIXML_SUCCESS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TIXML_NO_ATTRIBUTE", (long) TIXML_NO_ATTRIBUTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TIXML_WRONG_TYPE", (long) TIXML_WRONG_TYPE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TIXML_ENCODING_UNKNOWN", (long) TIXML_ENCODING_UNKNOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TIXML_ENCODING_UTF8", (long) TIXML_ENCODING_UTF8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TIXML_ENCODING_LEGACY", (long) TIXML_ENCODING_LEGACY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_NO_ERROR", (long) TiXmlBase::TIXML_NO_ERROR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR", (long) TiXmlBase::TIXML_ERROR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_OPENING_FILE", (long) TiXmlBase::TIXML_ERROR_OPENING_FILE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_OUT_OF_MEMORY", (long) TiXmlBase::TIXML_ERROR_OUT_OF_MEMORY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_PARSING_ELEMENT", (long) TiXmlBase::TIXML_ERROR_PARSING_ELEMENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME", (long) TiXmlBase::TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_READING_ELEMENT_VALUE", (long) TiXmlBase::TIXML_ERROR_READING_ELEMENT_VALUE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_READING_ATTRIBUTES", (long) TiXmlBase::TIXML_ERROR_READING_ATTRIBUTES, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_PARSING_EMPTY", (long) TiXmlBase::TIXML_ERROR_PARSING_EMPTY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_READING_END_TAG", (long) TiXmlBase::TIXML_ERROR_READING_END_TAG, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_PARSING_UNKNOWN", (long) TiXmlBase::TIXML_ERROR_PARSING_UNKNOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_PARSING_COMMENT", (long) TiXmlBase::TIXML_ERROR_PARSING_COMMENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_PARSING_DECLARATION", (long) TiXmlBase::TIXML_ERROR_PARSING_DECLARATION, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_DOCUMENT_EMPTY", (long) TiXmlBase::TIXML_ERROR_DOCUMENT_EMPTY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_EMBEDDED_NULL", (long) TiXmlBase::TIXML_ERROR_EMBEDDED_NULL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_PARSING_CDATA", (long) TiXmlBase::TIXML_ERROR_PARSING_CDATA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_DOCUMENT_TOP_ONLY", (long) TiXmlBase::TIXML_ERROR_DOCUMENT_TOP_ONLY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlBase_TIXML_ERROR_STRING_COUNT", (long) TiXmlBase::TIXML_ERROR_STRING_COUNT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlNode_DOCUMENT", (long) TiXmlNode::DOCUMENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlNode_ELEMENT", (long) TiXmlNode::ELEMENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlNode_COMMENT", (long) TiXmlNode::COMMENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlNode_UNKNOWN", (long) TiXmlNode::UNKNOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlNode_TEXT", (long) TiXmlNode::TEXT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlNode_DECLARATION", (long) TiXmlNode::DECLARATION, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlNode_STYLESHEETREFERENCE", (long) TiXmlNode::STYLESHEETREFERENCE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TiXmlNode_TYPECOUNT", (long) TiXmlNode::TYPECOUNT, 0, 0, 0},
{ SWIG_LUA_FLOAT,   (char *)"ARGOS_PI", 0, (double) 3.14159265358979323846264338327950288, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ticpp__NodeTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *)  ((ticpp::Node *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlText_tTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *) ((ticpp::NodeImp< TiXmlText > *) x));
}
static void *_p_ticpp__StylesheetReferenceTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *)(ticpp::NodeImp< TiXmlStylesheetReference > *) ((ticpp::StylesheetReference *) x));
}
static void *_p_ticpp__TextTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *)(ticpp::NodeImp< TiXmlText > *) ((ticpp::Text *) x));
}
static void *_p_ticpp__AttributeTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *)  ((ticpp::Attribute *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlDeclaration_tTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *) ((ticpp::NodeImp< TiXmlDeclaration > *) x));
}
static void *_p_ticpp__CommentTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *)(ticpp::NodeImp< TiXmlComment > *) ((ticpp::Comment *) x));
}
static void *_p_ticpp__DocumentTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *)(ticpp::NodeImp< TiXmlDocument > *) ((ticpp::Document *) x));
}
static void *_p_ticpp__ElementTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *)(ticpp::NodeImp< TiXmlElement > *) ((ticpp::Element *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlStylesheetReference_tTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *) ((ticpp::NodeImp< TiXmlStylesheetReference > *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlElement_tTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *) ((ticpp::NodeImp< TiXmlElement > *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlDocument_tTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *) ((ticpp::NodeImp< TiXmlDocument > *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlComment_tTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *) ((ticpp::NodeImp< TiXmlComment > *) x));
}
static void *_p_ticpp__DeclarationTo_p_ticpp__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Base *) (ticpp::Node *)(ticpp::NodeImp< TiXmlDeclaration > *) ((ticpp::Declaration *) x));
}
static void *_p_argos__CCI_ControllerTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *)  ((argos::CCI_Controller *) x));
}
static void *_p_argos__CRNGTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *)  ((argos::CRNG *) x));
}
static void *_p_argos__CCategoryTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *)  ((argos::CCategory *) x));
}
static void *_p_argos__CCI_ActuatorTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *)  ((argos::CCI_Actuator *) x));
}
static void *_p_argos__CCI_FootBotWheelsActuatorTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *) (argos::CCI_Actuator *) ((argos::CCI_FootBotWheelsActuator *) x));
}
static void *_p_argos__CCI_FootBotLedsActuatorTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *) (argos::CCI_Actuator *) ((argos::CCI_FootBotLedsActuator *) x));
}
static void *_p_argos__CCI_RangeAndBearingActuatorTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *) (argos::CCI_Actuator *) ((argos::CCI_RangeAndBearingActuator *) x));
}
static void *_p_argos__CCI_FootBotLightSensorTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *) (argos::CCI_Sensor *) ((argos::CCI_FootBotLightSensor *) x));
}
static void *_p_argos__CCI_FootBotMotorGroundSensorTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *) (argos::CCI_Sensor *) ((argos::CCI_FootBotMotorGroundSensor *) x));
}
static void *_p_argos__CCI_SensorTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *)  ((argos::CCI_Sensor *) x));
}
static void *_p_argos__CCI_FootBotProximitySensorTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *) (argos::CCI_Sensor *) ((argos::CCI_FootBotProximitySensor *) x));
}
static void *_p_argos__CCI_RangeAndBearingSensorTo_p_argos__CMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CMemento *) (argos::CCI_Sensor *) ((argos::CCI_RangeAndBearingSensor *) x));
}
static void *_p_TiXmlElementTo_p_TiXmlNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlNode *)  ((TiXmlElement *) x));
}
static void *_p_TiXmlDeclarationTo_p_TiXmlNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlNode *)  ((TiXmlDeclaration *) x));
}
static void *_p_TiXmlUnknownTo_p_TiXmlNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlNode *)  ((TiXmlUnknown *) x));
}
static void *_p_TiXmlCommentTo_p_TiXmlNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlNode *)  ((TiXmlComment *) x));
}
static void *_p_TiXmlTextTo_p_TiXmlNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlNode *)  ((TiXmlText *) x));
}
static void *_p_TiXmlStylesheetReferenceTo_p_TiXmlNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlNode *)  ((TiXmlStylesheetReference *) x));
}
static void *_p_TiXmlDocumentTo_p_TiXmlNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlNode *)  ((TiXmlDocument *) x));
}
static void *_p_ticpp__DeclarationTo_p_ticpp__NodeImpT_TiXmlDeclaration_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::NodeImp< TiXmlDeclaration > *)  ((ticpp::Declaration *) x));
}
static void *_p_ticpp__ElementTo_p_ticpp__NodeImpT_TiXmlElement_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::NodeImp< TiXmlElement > *)  ((ticpp::Element *) x));
}
static void *_p_ticpp__DocumentTo_p_ticpp__NodeImpT_TiXmlDocument_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::NodeImp< TiXmlDocument > *)  ((ticpp::Document *) x));
}
static void *_p_ticpp__CommentTo_p_ticpp__NodeImpT_TiXmlComment_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::NodeImp< TiXmlComment > *)  ((ticpp::Comment *) x));
}
static void *_p_TiXmlNodeTo_p_TiXmlBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlBase *)  ((TiXmlNode *) x));
}
static void *_p_TiXmlElementTo_p_TiXmlBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlBase *) (TiXmlNode *) ((TiXmlElement *) x));
}
static void *_p_TiXmlDeclarationTo_p_TiXmlBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlBase *) (TiXmlNode *) ((TiXmlDeclaration *) x));
}
static void *_p_TiXmlUnknownTo_p_TiXmlBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlBase *) (TiXmlNode *) ((TiXmlUnknown *) x));
}
static void *_p_TiXmlAttributeTo_p_TiXmlBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlBase *)  ((TiXmlAttribute *) x));
}
static void *_p_TiXmlCommentTo_p_TiXmlBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlBase *) (TiXmlNode *) ((TiXmlComment *) x));
}
static void *_p_TiXmlTextTo_p_TiXmlBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlBase *) (TiXmlNode *) ((TiXmlText *) x));
}
static void *_p_TiXmlStylesheetReferenceTo_p_TiXmlBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlBase *) (TiXmlNode *) ((TiXmlStylesheetReference *) x));
}
static void *_p_TiXmlDocumentTo_p_TiXmlBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlBase *) (TiXmlNode *) ((TiXmlDocument *) x));
}
static void *_p_argos__CCI_FootBotWheelsActuatorTo_p_argos__CCI_Actuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CCI_Actuator *)  ((argos::CCI_FootBotWheelsActuator *) x));
}
static void *_p_argos__CCI_FootBotLedsActuatorTo_p_argos__CCI_Actuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CCI_Actuator *)  ((argos::CCI_FootBotLedsActuator *) x));
}
static void *_p_argos__CCI_RangeAndBearingActuatorTo_p_argos__CCI_Actuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CCI_Actuator *)  ((argos::CCI_RangeAndBearingActuator *) x));
}
static void *_p_ticpp__ExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((ticpp::Exception *) x));
}
static void *_p_argos__CARGoSExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((argos::CARGoSException *) x));
}
static void *_p_ticpp__TextTo_p_ticpp__NodeImpT_TiXmlText_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::NodeImp< TiXmlText > *)  ((ticpp::Text *) x));
}
static void *_p_ticpp__StylesheetReferenceTo_p_ticpp__NodeImpT_TiXmlStylesheetReference_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::NodeImp< TiXmlStylesheetReference > *)  ((ticpp::StylesheetReference *) x));
}
static void *_p_argos__CCI_ControllerTo_p_argos__CBaseConfigurableResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CBaseConfigurableResource *)  ((argos::CCI_Controller *) x));
}
static void *_p_argos__CCI_ActuatorTo_p_argos__CBaseConfigurableResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CBaseConfigurableResource *)  ((argos::CCI_Actuator *) x));
}
static void *_p_argos__CCI_FootBotWheelsActuatorTo_p_argos__CBaseConfigurableResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CBaseConfigurableResource *) (argos::CCI_Actuator *) ((argos::CCI_FootBotWheelsActuator *) x));
}
static void *_p_argos__CCI_FootBotLedsActuatorTo_p_argos__CBaseConfigurableResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CBaseConfigurableResource *) (argos::CCI_Actuator *) ((argos::CCI_FootBotLedsActuator *) x));
}
static void *_p_argos__CCI_RangeAndBearingActuatorTo_p_argos__CBaseConfigurableResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CBaseConfigurableResource *) (argos::CCI_Actuator *) ((argos::CCI_RangeAndBearingActuator *) x));
}
static void *_p_argos__CCI_FootBotLightSensorTo_p_argos__CBaseConfigurableResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CBaseConfigurableResource *) (argos::CCI_Sensor *) ((argos::CCI_FootBotLightSensor *) x));
}
static void *_p_argos__CCI_FootBotMotorGroundSensorTo_p_argos__CBaseConfigurableResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CBaseConfigurableResource *) (argos::CCI_Sensor *) ((argos::CCI_FootBotMotorGroundSensor *) x));
}
static void *_p_argos__CCI_SensorTo_p_argos__CBaseConfigurableResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CBaseConfigurableResource *)  ((argos::CCI_Sensor *) x));
}
static void *_p_argos__CCI_FootBotProximitySensorTo_p_argos__CBaseConfigurableResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CBaseConfigurableResource *) (argos::CCI_Sensor *) ((argos::CCI_FootBotProximitySensor *) x));
}
static void *_p_argos__CCI_RangeAndBearingSensorTo_p_argos__CBaseConfigurableResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CBaseConfigurableResource *) (argos::CCI_Sensor *) ((argos::CCI_RangeAndBearingSensor *) x));
}
static void *_p_argos__CCI_FootBotLightSensorTo_p_argos__CCI_Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CCI_Sensor *)  ((argos::CCI_FootBotLightSensor *) x));
}
static void *_p_argos__CCI_FootBotMotorGroundSensorTo_p_argos__CCI_Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CCI_Sensor *)  ((argos::CCI_FootBotMotorGroundSensor *) x));
}
static void *_p_argos__CCI_FootBotProximitySensorTo_p_argos__CCI_Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CCI_Sensor *)  ((argos::CCI_FootBotProximitySensor *) x));
}
static void *_p_argos__CCI_RangeAndBearingSensorTo_p_argos__CCI_Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((argos::CCI_Sensor *)  ((argos::CCI_RangeAndBearingSensor *) x));
}
static void *_p_TiXmlNodeTo_p_TiCppRC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiCppRC *) (TiXmlBase *) ((TiXmlNode *) x));
}
static void *_p_TiXmlElementTo_p_TiCppRC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiCppRC *) (TiXmlBase *)(TiXmlNode *) ((TiXmlElement *) x));
}
static void *_p_TiXmlDeclarationTo_p_TiCppRC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiCppRC *) (TiXmlBase *)(TiXmlNode *) ((TiXmlDeclaration *) x));
}
static void *_p_TiXmlUnknownTo_p_TiCppRC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiCppRC *) (TiXmlBase *)(TiXmlNode *) ((TiXmlUnknown *) x));
}
static void *_p_TiXmlAttributeTo_p_TiCppRC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiCppRC *) (TiXmlBase *) ((TiXmlAttribute *) x));
}
static void *_p_TiXmlCommentTo_p_TiCppRC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiCppRC *) (TiXmlBase *)(TiXmlNode *) ((TiXmlComment *) x));
}
static void *_p_TiXmlTextTo_p_TiCppRC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiCppRC *) (TiXmlBase *)(TiXmlNode *) ((TiXmlText *) x));
}
static void *_p_TiXmlStylesheetReferenceTo_p_TiCppRC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiCppRC *) (TiXmlBase *)(TiXmlNode *) ((TiXmlStylesheetReference *) x));
}
static void *_p_TiXmlDocumentTo_p_TiCppRC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiCppRC *) (TiXmlBase *)(TiXmlNode *) ((TiXmlDocument *) x));
}
static void *_p_TiXmlBaseTo_p_TiCppRC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiCppRC *)  ((TiXmlBase *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlText_tTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *)  ((ticpp::NodeImp< TiXmlText > *) x));
}
static void *_p_ticpp__ElementTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *) (ticpp::NodeImp< TiXmlElement > *) ((ticpp::Element *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlDeclaration_tTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *)  ((ticpp::NodeImp< TiXmlDeclaration > *) x));
}
static void *_p_ticpp__DeclarationTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *) (ticpp::NodeImp< TiXmlDeclaration > *) ((ticpp::Declaration *) x));
}
static void *_p_ticpp__CommentTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *) (ticpp::NodeImp< TiXmlComment > *) ((ticpp::Comment *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlComment_tTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *)  ((ticpp::NodeImp< TiXmlComment > *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlDocument_tTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *)  ((ticpp::NodeImp< TiXmlDocument > *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlElement_tTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *)  ((ticpp::NodeImp< TiXmlElement > *) x));
}
static void *_p_ticpp__DocumentTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *) (ticpp::NodeImp< TiXmlDocument > *) ((ticpp::Document *) x));
}
static void *_p_ticpp__StylesheetReferenceTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *) (ticpp::NodeImp< TiXmlStylesheetReference > *) ((ticpp::StylesheetReference *) x));
}
static void *_p_ticpp__NodeImpT_TiXmlStylesheetReference_tTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *)  ((ticpp::NodeImp< TiXmlStylesheetReference > *) x));
}
static void *_p_ticpp__TextTo_p_ticpp__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ticpp::Node *) (ticpp::NodeImp< TiXmlText > *) ((ticpp::Text *) x));
}
static void *_p_TiXmlPrinterTo_p_TiXmlVisitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlVisitor *)  ((TiXmlPrinter *) x));
}
static void *_p_ticpp__VisitorTo_p_TiXmlVisitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TiXmlVisitor *)  ((ticpp::Visitor *) x));
}
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TLastReceivedPackets = {"_p_TLastReceivedPackets", "TLastReceivedPackets *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TLedSettings = {"_p_TLedSettings", "TLedSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TRangeAndBearingData = {"_p_TRangeAndBearingData", "TRangeAndBearingData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TRawValues = {"_p_TRawValues", "TRawValues *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TReadings = {"_p_TReadings", "TReadings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TiCppRC = {"_p_TiCppRC", "TiCppRC *", 0, 0, (void*)&_wrap_class_TiCppRC, 0};
static swig_type_info _swigt__p_TiCppRCImp = {"_p_TiCppRCImp", "TiCppRCImp *", 0, 0, (void*)&_wrap_class_TiCppRCImp, 0};
static swig_type_info _swigt__p_TiXmlAttribute = {"_p_TiXmlAttribute", "TiXmlAttribute *", 0, 0, (void*)&_wrap_class_TiXmlAttribute, 0};
static swig_type_info _swigt__p_TiXmlAttributeSet = {"_p_TiXmlAttributeSet", "TiXmlAttributeSet *", 0, 0, (void*)&_wrap_class_TiXmlAttributeSet, 0};
static swig_type_info _swigt__p_TiXmlBase = {"_p_TiXmlBase", "TiXmlBase *", 0, 0, (void*)&_wrap_class_TiXmlBase, 0};
static swig_type_info _swigt__p_TiXmlComment = {"_p_TiXmlComment", "TiXmlComment *", 0, 0, (void*)&_wrap_class_TiXmlComment, 0};
static swig_type_info _swigt__p_TiXmlCursor = {"_p_TiXmlCursor", "TiXmlCursor *", 0, 0, (void*)&_wrap_class_TiXmlCursor, 0};
static swig_type_info _swigt__p_TiXmlDeclaration = {"_p_TiXmlDeclaration", "TiXmlDeclaration *", 0, 0, (void*)&_wrap_class_TiXmlDeclaration, 0};
static swig_type_info _swigt__p_TiXmlDocument = {"_p_TiXmlDocument", "TiXmlDocument *", 0, 0, (void*)&_wrap_class_TiXmlDocument, 0};
static swig_type_info _swigt__p_TiXmlElement = {"_p_TiXmlElement", "TiXmlElement *", 0, 0, (void*)&_wrap_class_TiXmlElement, 0};
static swig_type_info _swigt__p_TiXmlHandle = {"_p_TiXmlHandle", "TiXmlHandle *", 0, 0, (void*)&_wrap_class_TiXmlHandle, 0};
static swig_type_info _swigt__p_TiXmlNode = {"_p_TiXmlNode", "TiXmlNode *", 0, 0, (void*)&_wrap_class_TiXmlNode, 0};
static swig_type_info _swigt__p_TiXmlParsingData = {"_p_TiXmlParsingData", "TiXmlParsingData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TiXmlPrinter = {"_p_TiXmlPrinter", "TiXmlPrinter *", 0, 0, (void*)&_wrap_class_TiXmlPrinter, 0};
static swig_type_info _swigt__p_TiXmlStylesheetReference = {"_p_TiXmlStylesheetReference", "TiXmlStylesheetReference *", 0, 0, (void*)&_wrap_class_TiXmlStylesheetReference, 0};
static swig_type_info _swigt__p_TiXmlText = {"_p_TiXmlText", "TiXmlText *", 0, 0, (void*)&_wrap_class_TiXmlText, 0};
static swig_type_info _swigt__p_TiXmlUnknown = {"_p_TiXmlUnknown", "TiXmlUnknown *", 0, 0, (void*)&_wrap_class_TiXmlUnknown, 0};
static swig_type_info _swigt__p_TiXmlVisitor = {"_p_TiXmlVisitor", "TiXmlVisitor *", 0, 0, (void*)&_wrap_class_TiXmlVisitor, 0};
static swig_type_info _swigt__p_argos__CARGoSException = {"_p_argos__CARGoSException", "argos::CARGoSException *", 0, 0, (void*)&_wrap_class_argos_CARGoSException, 0};
static swig_type_info _swigt__p_argos__CARGoSRandom = {"_p_argos__CARGoSRandom", "argos::CARGoSRandom *", 0, 0, (void*)&_wrap_class_argos_CARGoSRandom, 0};
static swig_type_info _swigt__p_argos__CBaseConfigurableResource = {"_p_argos__CBaseConfigurableResource", "argos::CBaseConfigurableResource *", 0, 0, (void*)&_wrap_class_argos_CBaseConfigurableResource, 0};
static swig_type_info _swigt__p_argos__CByteArray = {"_p_argos__CByteArray", "argos::CByteArray *", 0, 0, (void*)&_wrap_class_argos_CByteArray, 0};
static swig_type_info _swigt__p_argos__CCI_Actuator = {"_p_argos__CCI_Actuator", "argos::CCI_Actuator *", 0, 0, (void*)&_wrap_class_argos_CCI_Actuator, 0};
static swig_type_info _swigt__p_argos__CCI_Controller = {"_p_argos__CCI_Controller", "argos::CCI_Controller *", 0, 0, (void*)&_wrap_class_argos_CCI_Controller, 0};
static swig_type_info _swigt__p_argos__CCI_FootBotLedsActuator = {"_p_argos__CCI_FootBotLedsActuator", "argos::CCI_FootBotLedsActuator *", 0, 0, (void*)&_wrap_class_argos_CCI_FootBotLedsActuator, 0};
static swig_type_info _swigt__p_argos__CCI_FootBotLightSensor = {"_p_argos__CCI_FootBotLightSensor", "argos::CCI_FootBotLightSensor *", 0, 0, (void*)&_wrap_class_argos_CCI_FootBotLightSensor, 0};
static swig_type_info _swigt__p_argos__CCI_FootBotMotorGroundSensor = {"_p_argos__CCI_FootBotMotorGroundSensor", "argos::CCI_FootBotMotorGroundSensor *", 0, 0, (void*)&_wrap_class_argos_CCI_FootBotMotorGroundSensor, 0};
static swig_type_info _swigt__p_argos__CCI_FootBotProximitySensor = {"_p_argos__CCI_FootBotProximitySensor", "argos::CCI_FootBotProximitySensor *", 0, 0, (void*)&_wrap_class_argos_CCI_FootBotProximitySensor, 0};
static swig_type_info _swigt__p_argos__CCI_FootBotWheelsActuator = {"_p_argos__CCI_FootBotWheelsActuator", "argos::CCI_FootBotWheelsActuator *", 0, 0, (void*)&_wrap_class_argos_CCI_FootBotWheelsActuator, 0};
static swig_type_info _swigt__p_argos__CCI_RangeAndBearingActuator = {"_p_argos__CCI_RangeAndBearingActuator", "argos::CCI_RangeAndBearingActuator *", 0, 0, (void*)&_wrap_class_argos_CCI_RangeAndBearingActuator, 0};
static swig_type_info _swigt__p_argos__CCI_RangeAndBearingSensor = {"_p_argos__CCI_RangeAndBearingSensor", "argos::CCI_RangeAndBearingSensor *", 0, 0, (void*)&_wrap_class_argos_CCI_RangeAndBearingSensor, 0};
static swig_type_info _swigt__p_argos__CCI_Robot = {"_p_argos__CCI_Robot", "argos::CCI_Robot *", 0, 0, (void*)&_wrap_class_argos_CCI_Robot, 0};
static swig_type_info _swigt__p_argos__CCI_Sensor = {"_p_argos__CCI_Sensor", "argos::CCI_Sensor *", 0, 0, (void*)&_wrap_class_argos_CCI_Sensor, 0};
static swig_type_info _swigt__p_argos__CCategory = {"_p_argos__CCategory", "argos::CCategory *", 0, 0, (void*)&_wrap_class_argos_CCategory, 0};
static swig_type_info _swigt__p_argos__CColor = {"_p_argos__CColor", "argos::CColor *", 0, 0, (void*)&_wrap_class_argos_CColor, 0};
static swig_type_info _swigt__p_argos__CDegrees = {"_p_argos__CDegrees", "argos::CDegrees *", 0, 0, (void*)&_wrap_class_argos_CDegrees, 0};
static swig_type_info _swigt__p_argos__CMemento = {"_p_argos__CMemento", "argos::CMemento *", 0, 0, (void*)&_wrap_class_argos_CMemento, 0};
static swig_type_info _swigt__p_argos__CQuaternion = {"_p_argos__CQuaternion", "argos::CQuaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_argos__CRNG = {"_p_argos__CRNG", "argos::CRNG *", 0, 0, (void*)&_wrap_class_argos_CRNG, 0};
static swig_type_info _swigt__p_argos__CRadians = {"_p_argos__CRadians", "argos::CRadians *", 0, 0, (void*)&_wrap_class_argos_CRadians, 0};
static swig_type_info _swigt__p_argos__CRangeT_argos__CRadians_t = {"_p_argos__CRangeT_argos__CRadians_t", "argos::CRange< argos::CRadians > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_argos__CRangeT_float_t = {"_p_argos__CRangeT_float_t", "argos::CRange< float > *|argos::CRange< argos::Real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_argos__CRangeT_int_t = {"_p_argos__CRangeT_int_t", "argos::CRange< argos::SInt32 > *|argos::CRange< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_argos__CRangeT_unsigned_int_t = {"_p_argos__CRangeT_unsigned_int_t", "argos::CRange< argos::UInt32 > *|argos::CRange< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_argos__CVector2 = {"_p_argos__CVector2", "argos::CVector2 *", 0, 0, (void*)&_wrap_class_argos_CVector2, 0};
static swig_type_info _swigt__p_argos__CVector3 = {"_p_argos__CVector3", "argos::CVector3 *", 0, 0, (void*)&_wrap_class_argos_CVector3, 0};
static swig_type_info _swigt__p_argos__LightSensorReading = {"_p_argos__LightSensorReading", "argos::LightSensorReading *", 0, 0, (void*)&_wrap_class_argos_LightSensorReading, 0};
static swig_type_info _swigt__p_argos__MotorGroundSensorReading = {"_p_argos__MotorGroundSensorReading", "argos::MotorGroundSensorReading *", 0, 0, (void*)&_wrap_class_argos_MotorGroundSensorReading, 0};
static swig_type_info _swigt__p_argos__ProximitySensorReading = {"_p_argos__ProximitySensorReading", "argos::ProximitySensorReading *", 0, 0, (void*)&_wrap_class_argos_ProximitySensorReading, 0};
static swig_type_info _swigt__p_argos__TRangeAndBearingReceivedPacket = {"_p_argos__TRangeAndBearingReceivedPacket", "argos::TRangeAndBearingReceivedPacket *", 0, 0, (void*)&_wrap_class_argos_TRangeAndBearingReceivedPacket, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f___p_argos__CCI_Controller = {"_p_f___p_argos__CCI_Controller", "argos::CCI_Controller *(*)()|CCI_Controller_Maker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__double = {"_p_f_p_void__double", "double (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__unsigned_long = {"_p_f_p_void__unsigned_long", "unsigned long (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_unsigned_long__void = {"_p_f_p_void_unsigned_long__void", "void (*)(void *,unsigned long)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|argos::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gsl_rng = {"_p_gsl_rng", "gsl_rng *", 0, 0, (void*)&_wrap_class_gsl_rng, 0};
static swig_type_info _swigt__p_gsl_rng_type = {"_p_gsl_rng_type", "gsl_rng_type *", 0, 0, (void*)&_wrap_class_gsl_rng_type, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|argos::SInt32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "argos::SInt64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_gsl_rng_type = {"_p_p_gsl_rng_type", "gsl_rng_type **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_ticpp__Attribute = {"_p_p_ticpp__Attribute", "ticpp::Attribute **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "argos::SInt16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|argos::SInt8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_argos__CCI_Actuator_p_std__lessT_std__string_t_t = {"_p_std__mapT_std__string_argos__CCI_Actuator_p_std__lessT_std__string_t_t", "std::map< std::string,argos::CCI_Actuator *,std::less< std::string > > *|argos::TActuatorMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_argos__CCI_Controller_pfpFfF_std__lessT_std__string_t_t = {"_p_std__mapT_std__string_argos__CCI_Controller_pfpFfF_std__lessT_std__string_t_t", "std::map< std::string,argos::CCI_Controller *(*)(),std::less< std::string > > *|std::map< std::string,CCI_Controller_Maker *,std::less< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_argos__CCI_Sensor_p_std__lessT_std__string_t_t = {"_p_std__mapT_std__string_argos__CCI_Sensor_p_std__lessT_std__string_t_t", "argos::TSensorMap *|std::map< std::string,argos::CCI_Sensor *,std::less< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_argos__TRangeAndBearingReceivedPacket_t = {"_p_std__mapT_std__string_argos__TRangeAndBearingReceivedPacket_t", "std::map< std::string,argos::TRangeAndBearingReceivedPacket > *|argos::CCI_RangeAndBearingSensor::TLastReceivedPackets *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__vectorT_SReading_t = {"_p_std__vectorT_SReading_t", "std::vector< SReading > *|argos::CCI_FootBotMotorGroundSensor::TReadings *|argos::CCI_FootBotProximitySensor::TReadings *|argos::CCI_FootBotLightSensor::TReadings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_argos__CColor_t = {"_p_std__vectorT_argos__CColor_t", "std::vector< argos::CColor > *|argos::CCI_FootBotLedsActuator::TLedSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ticpp__Base_p_t = {"_p_std__vectorT_ticpp__Base_p_t", "std::vector< ticpp::Base * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ticpp__Attribute = {"_p_ticpp__Attribute", "ticpp::Attribute *", 0, 0, (void*)&_wrap_class_ticpp_Attribute, 0};
static swig_type_info _swigt__p_ticpp__Base = {"_p_ticpp__Base", "ticpp::Base *", 0, 0, (void*)&_wrap_class_ticpp_Base, 0};
static swig_type_info _swigt__p_ticpp__Comment = {"_p_ticpp__Comment", "ticpp::Comment *", 0, 0, (void*)&_wrap_class_ticpp_Comment, 0};
static swig_type_info _swigt__p_ticpp__Declaration = {"_p_ticpp__Declaration", "ticpp::Declaration *", 0, 0, (void*)&_wrap_class_ticpp_Declaration, 0};
static swig_type_info _swigt__p_ticpp__Document = {"_p_ticpp__Document", "ticpp::Document *", 0, 0, (void*)&_wrap_class_ticpp_Document, 0};
static swig_type_info _swigt__p_ticpp__Element = {"_p_ticpp__Element", "ticpp::Element *|argos::TConfigurationNode *", 0, 0, (void*)&_wrap_class_ticpp_Element, 0};
static swig_type_info _swigt__p_ticpp__Exception = {"_p_ticpp__Exception", "ticpp::Exception *", 0, 0, (void*)&_wrap_class_ticpp_Exception, 0};
static swig_type_info _swigt__p_ticpp__IteratorT_ticpp__Element_t = {"_p_ticpp__IteratorT_ticpp__Element_t", "argos::TConfigurationNodeIterator *|ticpp::Iterator< ticpp::Element > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ticpp__Node = {"_p_ticpp__Node", "ticpp::Node *", 0, 0, (void*)&_wrap_class_ticpp_Node, 0};
static swig_type_info _swigt__p_ticpp__NodeImpT_TiXmlComment_t = {"_p_ticpp__NodeImpT_TiXmlComment_t", "ticpp::NodeImp< TiXmlComment > *", 0, 0, (void*)&_wrap_class_ticpp_NodeImp_Sl_TiXmlComment_Sg_, 0};
static swig_type_info _swigt__p_ticpp__NodeImpT_TiXmlDeclaration_t = {"_p_ticpp__NodeImpT_TiXmlDeclaration_t", "ticpp::NodeImp< TiXmlDeclaration > *", 0, 0, (void*)&_wrap_class_ticpp_NodeImp_Sl_TiXmlDeclaration_Sg_, 0};
static swig_type_info _swigt__p_ticpp__NodeImpT_TiXmlDocument_t = {"_p_ticpp__NodeImpT_TiXmlDocument_t", "ticpp::NodeImp< TiXmlDocument > *", 0, 0, (void*)&_wrap_class_ticpp_NodeImp_Sl_TiXmlDocument_Sg_, 0};
static swig_type_info _swigt__p_ticpp__NodeImpT_TiXmlElement_t = {"_p_ticpp__NodeImpT_TiXmlElement_t", "ticpp::NodeImp< TiXmlElement > *", 0, 0, (void*)&_wrap_class_ticpp_NodeImp_Sl_TiXmlElement_Sg_, 0};
static swig_type_info _swigt__p_ticpp__NodeImpT_TiXmlStylesheetReference_t = {"_p_ticpp__NodeImpT_TiXmlStylesheetReference_t", "ticpp::NodeImp< TiXmlStylesheetReference > *", 0, 0, (void*)&_wrap_class_ticpp_NodeImp_Sl_TiXmlStylesheetReference_Sg_, 0};
static swig_type_info _swigt__p_ticpp__NodeImpT_TiXmlText_t = {"_p_ticpp__NodeImpT_TiXmlText_t", "ticpp::NodeImp< TiXmlText > *", 0, 0, (void*)&_wrap_class_ticpp_NodeImp_Sl_TiXmlText_Sg_, 0};
static swig_type_info _swigt__p_ticpp__StylesheetReference = {"_p_ticpp__StylesheetReference", "ticpp::StylesheetReference *", 0, 0, (void*)&_wrap_class_ticpp_StylesheetReference, 0};
static swig_type_info _swigt__p_ticpp__Text = {"_p_ticpp__Text", "ticpp::Text *", 0, 0, (void*)&_wrap_class_ticpp_Text, 0};
static swig_type_info _swigt__p_ticpp__Visitor = {"_p_ticpp__Visitor", "ticpp::Visitor *", 0, 0, (void*)&_wrap_class_ticpp_Visitor, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|argos::UInt8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "argos::UInt32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "argos::UInt64 *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "argos::UInt16 *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE,
  &_swigt__p_TLastReceivedPackets,
  &_swigt__p_TLedSettings,
  &_swigt__p_TRangeAndBearingData,
  &_swigt__p_TRawValues,
  &_swigt__p_TReadings,
  &_swigt__p_TiCppRC,
  &_swigt__p_TiCppRCImp,
  &_swigt__p_TiXmlAttribute,
  &_swigt__p_TiXmlAttributeSet,
  &_swigt__p_TiXmlBase,
  &_swigt__p_TiXmlComment,
  &_swigt__p_TiXmlCursor,
  &_swigt__p_TiXmlDeclaration,
  &_swigt__p_TiXmlDocument,
  &_swigt__p_TiXmlElement,
  &_swigt__p_TiXmlHandle,
  &_swigt__p_TiXmlNode,
  &_swigt__p_TiXmlParsingData,
  &_swigt__p_TiXmlPrinter,
  &_swigt__p_TiXmlStylesheetReference,
  &_swigt__p_TiXmlText,
  &_swigt__p_TiXmlUnknown,
  &_swigt__p_TiXmlVisitor,
  &_swigt__p_argos__CARGoSException,
  &_swigt__p_argos__CARGoSRandom,
  &_swigt__p_argos__CBaseConfigurableResource,
  &_swigt__p_argos__CByteArray,
  &_swigt__p_argos__CCI_Actuator,
  &_swigt__p_argos__CCI_Controller,
  &_swigt__p_argos__CCI_FootBotLedsActuator,
  &_swigt__p_argos__CCI_FootBotLightSensor,
  &_swigt__p_argos__CCI_FootBotMotorGroundSensor,
  &_swigt__p_argos__CCI_FootBotProximitySensor,
  &_swigt__p_argos__CCI_FootBotWheelsActuator,
  &_swigt__p_argos__CCI_RangeAndBearingActuator,
  &_swigt__p_argos__CCI_RangeAndBearingSensor,
  &_swigt__p_argos__CCI_Robot,
  &_swigt__p_argos__CCI_Sensor,
  &_swigt__p_argos__CCategory,
  &_swigt__p_argos__CColor,
  &_swigt__p_argos__CDegrees,
  &_swigt__p_argos__CMemento,
  &_swigt__p_argos__CQuaternion,
  &_swigt__p_argos__CRNG,
  &_swigt__p_argos__CRadians,
  &_swigt__p_argos__CRangeT_argos__CRadians_t,
  &_swigt__p_argos__CRangeT_float_t,
  &_swigt__p_argos__CRangeT_int_t,
  &_swigt__p_argos__CRangeT_unsigned_int_t,
  &_swigt__p_argos__CVector2,
  &_swigt__p_argos__CVector3,
  &_swigt__p_argos__LightSensorReading,
  &_swigt__p_argos__MotorGroundSensorReading,
  &_swigt__p_argos__ProximitySensorReading,
  &_swigt__p_argos__TRangeAndBearingReceivedPacket,
  &_swigt__p_bool,
  &_swigt__p_double,
  &_swigt__p_f___p_argos__CCI_Controller,
  &_swigt__p_f_p_void__double,
  &_swigt__p_f_p_void__unsigned_long,
  &_swigt__p_f_p_void_unsigned_long__void,
  &_swigt__p_float,
  &_swigt__p_gsl_rng,
  &_swigt__p_gsl_rng_type,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_gsl_rng_type,
  &_swigt__p_p_ticpp__Attribute,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__exception,
  &_swigt__p_std__mapT_std__string_argos__CCI_Actuator_p_std__lessT_std__string_t_t,
  &_swigt__p_std__mapT_std__string_argos__CCI_Controller_pfpFfF_std__lessT_std__string_t_t,
  &_swigt__p_std__mapT_std__string_argos__CCI_Sensor_p_std__lessT_std__string_t_t,
  &_swigt__p_std__mapT_std__string_argos__TRangeAndBearingReceivedPacket_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_SReading_t,
  &_swigt__p_std__vectorT_argos__CColor_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_ticpp__Base_p_t,
  &_swigt__p_ticpp__Attribute,
  &_swigt__p_ticpp__Base,
  &_swigt__p_ticpp__Comment,
  &_swigt__p_ticpp__Declaration,
  &_swigt__p_ticpp__Document,
  &_swigt__p_ticpp__Element,
  &_swigt__p_ticpp__Exception,
  &_swigt__p_ticpp__IteratorT_ticpp__Element_t,
  &_swigt__p_ticpp__Node,
  &_swigt__p_ticpp__NodeImpT_TiXmlComment_t,
  &_swigt__p_ticpp__NodeImpT_TiXmlDeclaration_t,
  &_swigt__p_ticpp__NodeImpT_TiXmlDocument_t,
  &_swigt__p_ticpp__NodeImpT_TiXmlElement_t,
  &_swigt__p_ticpp__NodeImpT_TiXmlStylesheetReference_t,
  &_swigt__p_ticpp__NodeImpT_TiXmlText_t,
  &_swigt__p_ticpp__StylesheetReference,
  &_swigt__p_ticpp__Text,
  &_swigt__p_ticpp__Visitor,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TLastReceivedPackets[] = {  {&_swigt__p_TLastReceivedPackets, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TLedSettings[] = {  {&_swigt__p_TLedSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TRangeAndBearingData[] = {  {&_swigt__p_TRangeAndBearingData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TRawValues[] = {  {&_swigt__p_TRawValues, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TReadings[] = {  {&_swigt__p_TReadings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiCppRC[] = {  {&_swigt__p_TiXmlNode, _p_TiXmlNodeTo_p_TiCppRC, 0, 0},  {&_swigt__p_TiXmlElement, _p_TiXmlElementTo_p_TiCppRC, 0, 0},  {&_swigt__p_TiXmlDeclaration, _p_TiXmlDeclarationTo_p_TiCppRC, 0, 0},  {&_swigt__p_TiXmlUnknown, _p_TiXmlUnknownTo_p_TiCppRC, 0, 0},  {&_swigt__p_TiCppRC, 0, 0, 0},  {&_swigt__p_TiXmlComment, _p_TiXmlCommentTo_p_TiCppRC, 0, 0},  {&_swigt__p_TiXmlAttribute, _p_TiXmlAttributeTo_p_TiCppRC, 0, 0},  {&_swigt__p_TiXmlText, _p_TiXmlTextTo_p_TiCppRC, 0, 0},  {&_swigt__p_TiXmlStylesheetReference, _p_TiXmlStylesheetReferenceTo_p_TiCppRC, 0, 0},  {&_swigt__p_TiXmlDocument, _p_TiXmlDocumentTo_p_TiCppRC, 0, 0},  {&_swigt__p_TiXmlBase, _p_TiXmlBaseTo_p_TiCppRC, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiCppRCImp[] = {  {&_swigt__p_TiCppRCImp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlAttribute[] = {  {&_swigt__p_TiXmlAttribute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlAttributeSet[] = {  {&_swigt__p_TiXmlAttributeSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlBase[] = {  {&_swigt__p_TiXmlNode, _p_TiXmlNodeTo_p_TiXmlBase, 0, 0},  {&_swigt__p_TiXmlElement, _p_TiXmlElementTo_p_TiXmlBase, 0, 0},  {&_swigt__p_TiXmlDeclaration, _p_TiXmlDeclarationTo_p_TiXmlBase, 0, 0},  {&_swigt__p_TiXmlUnknown, _p_TiXmlUnknownTo_p_TiXmlBase, 0, 0},  {&_swigt__p_TiXmlComment, _p_TiXmlCommentTo_p_TiXmlBase, 0, 0},  {&_swigt__p_TiXmlAttribute, _p_TiXmlAttributeTo_p_TiXmlBase, 0, 0},  {&_swigt__p_TiXmlText, _p_TiXmlTextTo_p_TiXmlBase, 0, 0},  {&_swigt__p_TiXmlStylesheetReference, _p_TiXmlStylesheetReferenceTo_p_TiXmlBase, 0, 0},  {&_swigt__p_TiXmlDocument, _p_TiXmlDocumentTo_p_TiXmlBase, 0, 0},  {&_swigt__p_TiXmlBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlComment[] = {  {&_swigt__p_TiXmlComment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlCursor[] = {  {&_swigt__p_TiXmlCursor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlDeclaration[] = {  {&_swigt__p_TiXmlDeclaration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlDocument[] = {  {&_swigt__p_TiXmlDocument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlElement[] = {  {&_swigt__p_TiXmlElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlHandle[] = {  {&_swigt__p_TiXmlHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlNode[] = {  {&_swigt__p_TiXmlNode, 0, 0, 0},  {&_swigt__p_TiXmlElement, _p_TiXmlElementTo_p_TiXmlNode, 0, 0},  {&_swigt__p_TiXmlDeclaration, _p_TiXmlDeclarationTo_p_TiXmlNode, 0, 0},  {&_swigt__p_TiXmlUnknown, _p_TiXmlUnknownTo_p_TiXmlNode, 0, 0},  {&_swigt__p_TiXmlComment, _p_TiXmlCommentTo_p_TiXmlNode, 0, 0},  {&_swigt__p_TiXmlText, _p_TiXmlTextTo_p_TiXmlNode, 0, 0},  {&_swigt__p_TiXmlStylesheetReference, _p_TiXmlStylesheetReferenceTo_p_TiXmlNode, 0, 0},  {&_swigt__p_TiXmlDocument, _p_TiXmlDocumentTo_p_TiXmlNode, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlParsingData[] = {  {&_swigt__p_TiXmlParsingData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlPrinter[] = {  {&_swigt__p_TiXmlPrinter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlStylesheetReference[] = {  {&_swigt__p_TiXmlStylesheetReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlText[] = {  {&_swigt__p_TiXmlText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlUnknown[] = {  {&_swigt__p_TiXmlUnknown, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlVisitor[] = {  {&_swigt__p_TiXmlPrinter, _p_TiXmlPrinterTo_p_TiXmlVisitor, 0, 0},  {&_swigt__p_TiXmlVisitor, 0, 0, 0},  {&_swigt__p_ticpp__Visitor, _p_ticpp__VisitorTo_p_TiXmlVisitor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CARGoSException[] = {  {&_swigt__p_argos__CARGoSException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CARGoSRandom[] = {  {&_swigt__p_argos__CARGoSRandom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CBaseConfigurableResource[] = {  {&_swigt__p_argos__CCI_Controller, _p_argos__CCI_ControllerTo_p_argos__CBaseConfigurableResource, 0, 0},  {&_swigt__p_argos__CBaseConfigurableResource, 0, 0, 0},  {&_swigt__p_argos__CCI_Actuator, _p_argos__CCI_ActuatorTo_p_argos__CBaseConfigurableResource, 0, 0},  {&_swigt__p_argos__CCI_FootBotWheelsActuator, _p_argos__CCI_FootBotWheelsActuatorTo_p_argos__CBaseConfigurableResource, 0, 0},  {&_swigt__p_argos__CCI_FootBotLedsActuator, _p_argos__CCI_FootBotLedsActuatorTo_p_argos__CBaseConfigurableResource, 0, 0},  {&_swigt__p_argos__CCI_RangeAndBearingActuator, _p_argos__CCI_RangeAndBearingActuatorTo_p_argos__CBaseConfigurableResource, 0, 0},  {&_swigt__p_argos__CCI_FootBotLightSensor, _p_argos__CCI_FootBotLightSensorTo_p_argos__CBaseConfigurableResource, 0, 0},  {&_swigt__p_argos__CCI_FootBotMotorGroundSensor, _p_argos__CCI_FootBotMotorGroundSensorTo_p_argos__CBaseConfigurableResource, 0, 0},  {&_swigt__p_argos__CCI_Sensor, _p_argos__CCI_SensorTo_p_argos__CBaseConfigurableResource, 0, 0},  {&_swigt__p_argos__CCI_FootBotProximitySensor, _p_argos__CCI_FootBotProximitySensorTo_p_argos__CBaseConfigurableResource, 0, 0},  {&_swigt__p_argos__CCI_RangeAndBearingSensor, _p_argos__CCI_RangeAndBearingSensorTo_p_argos__CBaseConfigurableResource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CByteArray[] = {  {&_swigt__p_argos__CByteArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_Actuator[] = {  {&_swigt__p_argos__CCI_Actuator, 0, 0, 0},  {&_swigt__p_argos__CCI_FootBotWheelsActuator, _p_argos__CCI_FootBotWheelsActuatorTo_p_argos__CCI_Actuator, 0, 0},  {&_swigt__p_argos__CCI_FootBotLedsActuator, _p_argos__CCI_FootBotLedsActuatorTo_p_argos__CCI_Actuator, 0, 0},  {&_swigt__p_argos__CCI_RangeAndBearingActuator, _p_argos__CCI_RangeAndBearingActuatorTo_p_argos__CCI_Actuator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_Controller[] = {  {&_swigt__p_argos__CCI_Controller, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_FootBotLedsActuator[] = {  {&_swigt__p_argos__CCI_FootBotLedsActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_FootBotLightSensor[] = {  {&_swigt__p_argos__CCI_FootBotLightSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_FootBotMotorGroundSensor[] = {  {&_swigt__p_argos__CCI_FootBotMotorGroundSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_FootBotProximitySensor[] = {  {&_swigt__p_argos__CCI_FootBotProximitySensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_FootBotWheelsActuator[] = {  {&_swigt__p_argos__CCI_FootBotWheelsActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_RangeAndBearingActuator[] = {  {&_swigt__p_argos__CCI_RangeAndBearingActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_RangeAndBearingSensor[] = {  {&_swigt__p_argos__CCI_RangeAndBearingSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_Robot[] = {  {&_swigt__p_argos__CCI_Robot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCI_Sensor[] = {  {&_swigt__p_argos__CCI_FootBotLightSensor, _p_argos__CCI_FootBotLightSensorTo_p_argos__CCI_Sensor, 0, 0},  {&_swigt__p_argos__CCI_FootBotMotorGroundSensor, _p_argos__CCI_FootBotMotorGroundSensorTo_p_argos__CCI_Sensor, 0, 0},  {&_swigt__p_argos__CCI_Sensor, 0, 0, 0},  {&_swigt__p_argos__CCI_FootBotProximitySensor, _p_argos__CCI_FootBotProximitySensorTo_p_argos__CCI_Sensor, 0, 0},  {&_swigt__p_argos__CCI_RangeAndBearingSensor, _p_argos__CCI_RangeAndBearingSensorTo_p_argos__CCI_Sensor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CCategory[] = {  {&_swigt__p_argos__CCategory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CColor[] = {  {&_swigt__p_argos__CColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CDegrees[] = {  {&_swigt__p_argos__CDegrees, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CMemento[] = {  {&_swigt__p_argos__CCI_Controller, _p_argos__CCI_ControllerTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CCategory, _p_argos__CCategoryTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CCI_Actuator, _p_argos__CCI_ActuatorTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CCI_FootBotWheelsActuator, _p_argos__CCI_FootBotWheelsActuatorTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CCI_FootBotLedsActuator, _p_argos__CCI_FootBotLedsActuatorTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CCI_RangeAndBearingActuator, _p_argos__CCI_RangeAndBearingActuatorTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CCI_FootBotLightSensor, _p_argos__CCI_FootBotLightSensorTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CCI_FootBotMotorGroundSensor, _p_argos__CCI_FootBotMotorGroundSensorTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CCI_Sensor, _p_argos__CCI_SensorTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CCI_FootBotProximitySensor, _p_argos__CCI_FootBotProximitySensorTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CCI_RangeAndBearingSensor, _p_argos__CCI_RangeAndBearingSensorTo_p_argos__CMemento, 0, 0},  {&_swigt__p_argos__CMemento, 0, 0, 0},  {&_swigt__p_argos__CRNG, _p_argos__CRNGTo_p_argos__CMemento, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CQuaternion[] = {  {&_swigt__p_argos__CQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CRNG[] = {  {&_swigt__p_argos__CRNG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CRadians[] = {  {&_swigt__p_argos__CRadians, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CRangeT_argos__CRadians_t[] = {  {&_swigt__p_argos__CRangeT_argos__CRadians_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CRangeT_float_t[] = {  {&_swigt__p_argos__CRangeT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CRangeT_int_t[] = {  {&_swigt__p_argos__CRangeT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CRangeT_unsigned_int_t[] = {  {&_swigt__p_argos__CRangeT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CVector2[] = {  {&_swigt__p_argos__CVector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__CVector3[] = {  {&_swigt__p_argos__CVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__LightSensorReading[] = {  {&_swigt__p_argos__LightSensorReading, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__MotorGroundSensorReading[] = {  {&_swigt__p_argos__MotorGroundSensorReading, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__ProximitySensorReading[] = {  {&_swigt__p_argos__ProximitySensorReading, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_argos__TRangeAndBearingReceivedPacket[] = {  {&_swigt__p_argos__TRangeAndBearingReceivedPacket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f___p_argos__CCI_Controller[] = {  {&_swigt__p_f___p_argos__CCI_Controller, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__double[] = {  {&_swigt__p_f_p_void__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__unsigned_long[] = {  {&_swigt__p_f_p_void__unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_unsigned_long__void[] = {  {&_swigt__p_f_p_void_unsigned_long__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsl_rng[] = {  {&_swigt__p_gsl_rng, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsl_rng_type[] = {  {&_swigt__p_gsl_rng_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_gsl_rng_type[] = {  {&_swigt__p_p_gsl_rng_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ticpp__Attribute[] = {  {&_swigt__p_p_ticpp__Attribute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_ticpp__Exception, _p_ticpp__ExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_argos__CARGoSException, _p_argos__CARGoSExceptionTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_argos__CCI_Actuator_p_std__lessT_std__string_t_t[] = {  {&_swigt__p_std__mapT_std__string_argos__CCI_Actuator_p_std__lessT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_argos__CCI_Controller_pfpFfF_std__lessT_std__string_t_t[] = {  {&_swigt__p_std__mapT_std__string_argos__CCI_Controller_pfpFfF_std__lessT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_argos__CCI_Sensor_p_std__lessT_std__string_t_t[] = {  {&_swigt__p_std__mapT_std__string_argos__CCI_Sensor_p_std__lessT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_argos__TRangeAndBearingReceivedPacket_t[] = {  {&_swigt__p_std__mapT_std__string_argos__TRangeAndBearingReceivedPacket_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SReading_t[] = {  {&_swigt__p_std__vectorT_SReading_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_argos__CColor_t[] = {  {&_swigt__p_std__vectorT_argos__CColor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ticpp__Base_p_t[] = {  {&_swigt__p_std__vectorT_ticpp__Base_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__Attribute[] = {  {&_swigt__p_ticpp__Attribute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__Base[] = {  {&_swigt__p_ticpp__Text, _p_ticpp__TextTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__Base, 0, 0, 0},  {&_swigt__p_ticpp__StylesheetReference, _p_ticpp__StylesheetReferenceTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__Attribute, _p_ticpp__AttributeTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlDeclaration_t, _p_ticpp__NodeImpT_TiXmlDeclaration_tTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__Node, _p_ticpp__NodeTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__Comment, _p_ticpp__CommentTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlStylesheetReference_t, _p_ticpp__NodeImpT_TiXmlStylesheetReference_tTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlElement_t, _p_ticpp__NodeImpT_TiXmlElement_tTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlDocument_t, _p_ticpp__NodeImpT_TiXmlDocument_tTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlComment_t, _p_ticpp__NodeImpT_TiXmlComment_tTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__Document, _p_ticpp__DocumentTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__Element, _p_ticpp__ElementTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlText_t, _p_ticpp__NodeImpT_TiXmlText_tTo_p_ticpp__Base, 0, 0},  {&_swigt__p_ticpp__Declaration, _p_ticpp__DeclarationTo_p_ticpp__Base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__Comment[] = {  {&_swigt__p_ticpp__Comment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__Declaration[] = {  {&_swigt__p_ticpp__Declaration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__Document[] = {  {&_swigt__p_ticpp__Document, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__Element[] = {  {&_swigt__p_ticpp__Element, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__Exception[] = {  {&_swigt__p_ticpp__Exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__IteratorT_ticpp__Element_t[] = {  {&_swigt__p_ticpp__IteratorT_ticpp__Element_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__Node[] = {  {&_swigt__p_ticpp__Element, _p_ticpp__ElementTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlComment_t, _p_ticpp__NodeImpT_TiXmlComment_tTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlDocument_t, _p_ticpp__NodeImpT_TiXmlDocument_tTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlElement_t, _p_ticpp__NodeImpT_TiXmlElement_tTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__Text, _p_ticpp__TextTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__Declaration, _p_ticpp__DeclarationTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlStylesheetReference_t, _p_ticpp__NodeImpT_TiXmlStylesheetReference_tTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__Comment, _p_ticpp__CommentTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__Node, 0, 0, 0},  {&_swigt__p_ticpp__Document, _p_ticpp__DocumentTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__StylesheetReference, _p_ticpp__StylesheetReferenceTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlText_t, _p_ticpp__NodeImpT_TiXmlText_tTo_p_ticpp__Node, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlDeclaration_t, _p_ticpp__NodeImpT_TiXmlDeclaration_tTo_p_ticpp__Node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__NodeImpT_TiXmlComment_t[] = {  {&_swigt__p_ticpp__NodeImpT_TiXmlComment_t, 0, 0, 0},  {&_swigt__p_ticpp__Comment, _p_ticpp__CommentTo_p_ticpp__NodeImpT_TiXmlComment_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__NodeImpT_TiXmlDeclaration_t[] = {  {&_swigt__p_ticpp__Declaration, _p_ticpp__DeclarationTo_p_ticpp__NodeImpT_TiXmlDeclaration_t, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlDeclaration_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__NodeImpT_TiXmlDocument_t[] = {  {&_swigt__p_ticpp__NodeImpT_TiXmlDocument_t, 0, 0, 0},  {&_swigt__p_ticpp__Document, _p_ticpp__DocumentTo_p_ticpp__NodeImpT_TiXmlDocument_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__NodeImpT_TiXmlElement_t[] = {  {&_swigt__p_ticpp__Element, _p_ticpp__ElementTo_p_ticpp__NodeImpT_TiXmlElement_t, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlElement_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__NodeImpT_TiXmlStylesheetReference_t[] = {  {&_swigt__p_ticpp__NodeImpT_TiXmlStylesheetReference_t, 0, 0, 0},  {&_swigt__p_ticpp__StylesheetReference, _p_ticpp__StylesheetReferenceTo_p_ticpp__NodeImpT_TiXmlStylesheetReference_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__NodeImpT_TiXmlText_t[] = {  {&_swigt__p_ticpp__Text, _p_ticpp__TextTo_p_ticpp__NodeImpT_TiXmlText_t, 0, 0},  {&_swigt__p_ticpp__NodeImpT_TiXmlText_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__StylesheetReference[] = {  {&_swigt__p_ticpp__StylesheetReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__Text[] = {  {&_swigt__p_ticpp__Text, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ticpp__Visitor[] = {  {&_swigt__p_ticpp__Visitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE,
  _swigc__p_TLastReceivedPackets,
  _swigc__p_TLedSettings,
  _swigc__p_TRangeAndBearingData,
  _swigc__p_TRawValues,
  _swigc__p_TReadings,
  _swigc__p_TiCppRC,
  _swigc__p_TiCppRCImp,
  _swigc__p_TiXmlAttribute,
  _swigc__p_TiXmlAttributeSet,
  _swigc__p_TiXmlBase,
  _swigc__p_TiXmlComment,
  _swigc__p_TiXmlCursor,
  _swigc__p_TiXmlDeclaration,
  _swigc__p_TiXmlDocument,
  _swigc__p_TiXmlElement,
  _swigc__p_TiXmlHandle,
  _swigc__p_TiXmlNode,
  _swigc__p_TiXmlParsingData,
  _swigc__p_TiXmlPrinter,
  _swigc__p_TiXmlStylesheetReference,
  _swigc__p_TiXmlText,
  _swigc__p_TiXmlUnknown,
  _swigc__p_TiXmlVisitor,
  _swigc__p_argos__CARGoSException,
  _swigc__p_argos__CARGoSRandom,
  _swigc__p_argos__CBaseConfigurableResource,
  _swigc__p_argos__CByteArray,
  _swigc__p_argos__CCI_Actuator,
  _swigc__p_argos__CCI_Controller,
  _swigc__p_argos__CCI_FootBotLedsActuator,
  _swigc__p_argos__CCI_FootBotLightSensor,
  _swigc__p_argos__CCI_FootBotMotorGroundSensor,
  _swigc__p_argos__CCI_FootBotProximitySensor,
  _swigc__p_argos__CCI_FootBotWheelsActuator,
  _swigc__p_argos__CCI_RangeAndBearingActuator,
  _swigc__p_argos__CCI_RangeAndBearingSensor,
  _swigc__p_argos__CCI_Robot,
  _swigc__p_argos__CCI_Sensor,
  _swigc__p_argos__CCategory,
  _swigc__p_argos__CColor,
  _swigc__p_argos__CDegrees,
  _swigc__p_argos__CMemento,
  _swigc__p_argos__CQuaternion,
  _swigc__p_argos__CRNG,
  _swigc__p_argos__CRadians,
  _swigc__p_argos__CRangeT_argos__CRadians_t,
  _swigc__p_argos__CRangeT_float_t,
  _swigc__p_argos__CRangeT_int_t,
  _swigc__p_argos__CRangeT_unsigned_int_t,
  _swigc__p_argos__CVector2,
  _swigc__p_argos__CVector3,
  _swigc__p_argos__LightSensorReading,
  _swigc__p_argos__MotorGroundSensorReading,
  _swigc__p_argos__ProximitySensorReading,
  _swigc__p_argos__TRangeAndBearingReceivedPacket,
  _swigc__p_bool,
  _swigc__p_double,
  _swigc__p_f___p_argos__CCI_Controller,
  _swigc__p_f_p_void__double,
  _swigc__p_f_p_void__unsigned_long,
  _swigc__p_f_p_void_unsigned_long__void,
  _swigc__p_float,
  _swigc__p_gsl_rng,
  _swigc__p_gsl_rng_type,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_gsl_rng_type,
  _swigc__p_p_ticpp__Attribute,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__exception,
  _swigc__p_std__mapT_std__string_argos__CCI_Actuator_p_std__lessT_std__string_t_t,
  _swigc__p_std__mapT_std__string_argos__CCI_Controller_pfpFfF_std__lessT_std__string_t_t,
  _swigc__p_std__mapT_std__string_argos__CCI_Sensor_p_std__lessT_std__string_t_t,
  _swigc__p_std__mapT_std__string_argos__TRangeAndBearingReceivedPacket_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_SReading_t,
  _swigc__p_std__vectorT_argos__CColor_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_ticpp__Base_p_t,
  _swigc__p_ticpp__Attribute,
  _swigc__p_ticpp__Base,
  _swigc__p_ticpp__Comment,
  _swigc__p_ticpp__Declaration,
  _swigc__p_ticpp__Document,
  _swigc__p_ticpp__Element,
  _swigc__p_ticpp__Exception,
  _swigc__p_ticpp__IteratorT_ticpp__Element_t,
  _swigc__p_ticpp__Node,
  _swigc__p_ticpp__NodeImpT_TiXmlComment_t,
  _swigc__p_ticpp__NodeImpT_TiXmlDeclaration_t,
  _swigc__p_ticpp__NodeImpT_TiXmlDocument_t,
  _swigc__p_ticpp__NodeImpT_TiXmlElement_t,
  _swigc__p_ticpp__NodeImpT_TiXmlStylesheetReference_t,
  _swigc__p_ticpp__NodeImpT_TiXmlText_t,
  _swigc__p_ticpp__StylesheetReference,
  _swigc__p_ticpp__Text,
  _swigc__p_ticpp__Visitor,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

